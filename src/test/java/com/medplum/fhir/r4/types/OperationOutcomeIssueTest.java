/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class OperationOutcomeIssueTest {

    @Test
    public void testConstructor() {
        assertNotNull(new OperationOutcome.OperationOutcomeIssue(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(OperationOutcome.OperationOutcomeIssue.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final OperationOutcome.OperationOutcomeIssue x = OperationOutcome.OperationOutcomeIssue.create().build();
        final OperationOutcome.OperationOutcomeIssue y = OperationOutcome.OperationOutcomeIssue.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", OperationOutcome.OperationOutcomeIssue.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, OperationOutcome.OperationOutcomeIssue.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, OperationOutcome.OperationOutcomeIssue.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testSeverity() {
        assertEquals("x", OperationOutcome.OperationOutcomeIssue.create().severity("x").build().severity());
    }

    @Test
    public void testCode() {
        assertEquals("x", OperationOutcome.OperationOutcomeIssue.create().code("x").build().code());
    }

    @Test
    public void testDetails() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, OperationOutcome.OperationOutcomeIssue.create().details(value).build().details());
    }

    @Test
    public void testDiagnostics() {
        assertEquals("x", OperationOutcome.OperationOutcomeIssue.create().diagnostics("x").build().diagnostics());
    }

    @Test
    public void testLocation() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, OperationOutcome.OperationOutcomeIssue.create().location(value).build().location());
    }

    @Test
    public void testExpression() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, OperationOutcome.OperationOutcomeIssue.create().expression(value).build().expression());
    }
}
