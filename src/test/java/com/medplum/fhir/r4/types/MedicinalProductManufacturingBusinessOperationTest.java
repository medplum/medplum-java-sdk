/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class MedicinalProductManufacturingBusinessOperationTest {

    @Test
    public void testConstructor() {
        assertNotNull(new MedicinalProduct.MedicinalProductManufacturingBusinessOperation(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(MedicinalProduct.MedicinalProductManufacturingBusinessOperation.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
    final MedicinalProduct.MedicinalProductManufacturingBusinessOperation x =
            MedicinalProduct.MedicinalProductManufacturingBusinessOperation.create().build();
    final MedicinalProduct.MedicinalProductManufacturingBusinessOperation y =
            MedicinalProduct.MedicinalProductManufacturingBusinessOperation.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", MedicinalProduct.MedicinalProductManufacturingBusinessOperation.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.MedicinalProductManufacturingBusinessOperation.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.MedicinalProductManufacturingBusinessOperation.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testOperationType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, MedicinalProduct.MedicinalProductManufacturingBusinessOperation.create().operationType(value).build().operationType());
    }

    @Test
    public void testAuthorisationReferenceNumber() {
        final Identifier value = Identifier.create().build();
    assertEquals(value,
            MedicinalProduct.MedicinalProductManufacturingBusinessOperation.create().authorisationReferenceNumber(value).build().authorisationReferenceNumber());
    }

    @Test
    public void testEffectiveDate() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, MedicinalProduct.MedicinalProductManufacturingBusinessOperation.create().effectiveDate(value).build().effectiveDate());
    }

    @Test
    public void testConfidentialityIndicator() {
        final CodeableConcept value = CodeableConcept.create().build();
    assertEquals(value,
            MedicinalProduct.MedicinalProductManufacturingBusinessOperation.create().confidentialityIndicator(value).build().confidentialityIndicator());
    }

    @Test
    public void testManufacturer() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.MedicinalProductManufacturingBusinessOperation.create().manufacturer(value).build().manufacturer());
    }

    @Test
    public void testRegulator() {
        final Reference value = Reference.create().build();
        assertEquals(value, MedicinalProduct.MedicinalProductManufacturingBusinessOperation.create().regulator(value).build().regulator());
    }
}
