/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class SupplyRequestTest {

    @Test
    public void testConstructor() {
        assertNotNull(new SupplyRequest(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(SupplyRequest.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final SupplyRequest x = SupplyRequest.create().build();
        final SupplyRequest y = SupplyRequest.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", SupplyRequest.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, SupplyRequest.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, SupplyRequest.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", SupplyRequest.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, SupplyRequest.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, SupplyRequest.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SupplyRequest.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SupplyRequest.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, SupplyRequest.create().identifier(value).build().identifier());
    }

    @Test
    public void testStatus() {
        assertEquals("x", SupplyRequest.create().status("x").build().status());
    }

    @Test
    public void testCategory() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SupplyRequest.create().category(value).build().category());
    }

    @Test
    public void testPriority() {
        assertEquals("x", SupplyRequest.create().priority("x").build().priority());
    }

    @Test
    public void testItemCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SupplyRequest.create().itemCodeableConcept(value).build().itemCodeableConcept());
    }

    @Test
    public void testItemReference() {
        final Reference value = Reference.create().build();
        assertEquals(value, SupplyRequest.create().itemReference(value).build().itemReference());
    }

    @Test
    public void testQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, SupplyRequest.create().quantity(value).build().quantity());
    }

    @Test
    public void testParameter() {
        final java.util.List<SupplyRequest.SupplyRequestParameter> value = java.util.Collections.emptyList();
        assertEquals(value, SupplyRequest.create().parameter(value).build().parameter());
    }

    @Test
    public void testOccurrenceDateTime() {
        assertEquals("x", SupplyRequest.create().occurrenceDateTime("x").build().occurrenceDateTime());
    }

    @Test
    public void testOccurrencePeriod() {
        final Period value = Period.create().build();
        assertEquals(value, SupplyRequest.create().occurrencePeriod(value).build().occurrencePeriod());
    }

    @Test
    public void testOccurrenceTiming() {
        final Timing value = Timing.create().build();
        assertEquals(value, SupplyRequest.create().occurrenceTiming(value).build().occurrenceTiming());
    }

    @Test
    public void testAuthoredOn() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, SupplyRequest.create().authoredOn(value).build().authoredOn());
    }

    @Test
    public void testRequester() {
        final Reference value = Reference.create().build();
        assertEquals(value, SupplyRequest.create().requester(value).build().requester());
    }

    @Test
    public void testSupplier() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, SupplyRequest.create().supplier(value).build().supplier());
    }

    @Test
    public void testReasonCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, SupplyRequest.create().reasonCode(value).build().reasonCode());
    }

    @Test
    public void testReasonReference() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, SupplyRequest.create().reasonReference(value).build().reasonReference());
    }

    @Test
    public void testDeliverFrom() {
        final Reference value = Reference.create().build();
        assertEquals(value, SupplyRequest.create().deliverFrom(value).build().deliverFrom());
    }

    @Test
    public void testDeliverTo() {
        final Reference value = Reference.create().build();
        assertEquals(value, SupplyRequest.create().deliverTo(value).build().deliverTo());
    }
}
