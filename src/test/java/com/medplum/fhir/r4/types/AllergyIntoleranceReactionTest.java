/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class AllergyIntoleranceReactionTest {

    @Test
    public void testConstructor() {
        assertNotNull(new AllergyIntolerance.AllergyIntoleranceReaction(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(AllergyIntolerance.AllergyIntoleranceReaction.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final AllergyIntolerance.AllergyIntoleranceReaction x = AllergyIntolerance.AllergyIntoleranceReaction.create().build();
        final AllergyIntolerance.AllergyIntoleranceReaction y = AllergyIntolerance.AllergyIntoleranceReaction.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", AllergyIntolerance.AllergyIntoleranceReaction.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, AllergyIntolerance.AllergyIntoleranceReaction.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, AllergyIntolerance.AllergyIntoleranceReaction.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testSubstance() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, AllergyIntolerance.AllergyIntoleranceReaction.create().substance(value).build().substance());
    }

    @Test
    public void testManifestation() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, AllergyIntolerance.AllergyIntoleranceReaction.create().manifestation(value).build().manifestation());
    }

    @Test
    public void testDescription() {
        assertEquals("x", AllergyIntolerance.AllergyIntoleranceReaction.create().description("x").build().description());
    }

    @Test
    public void testOnset() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, AllergyIntolerance.AllergyIntoleranceReaction.create().onset(value).build().onset());
    }

    @Test
    public void testSeverity() {
        assertEquals("x", AllergyIntolerance.AllergyIntoleranceReaction.create().severity("x").build().severity());
    }

    @Test
    public void testExposureRoute() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, AllergyIntolerance.AllergyIntoleranceReaction.create().exposureRoute(value).build().exposureRoute());
    }

    @Test
    public void testNote() {
        final java.util.List<Annotation> value = java.util.Collections.emptyList();
        assertEquals(value, AllergyIntolerance.AllergyIntoleranceReaction.create().note(value).build().note());
    }
}
