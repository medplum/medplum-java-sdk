/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class MolecularSequenceReferenceSeqTest {

    @Test
    public void testConstructor() {
        assertNotNull(new MolecularSequence.MolecularSequenceReferenceSeq(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(MolecularSequence.MolecularSequenceReferenceSeq.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final MolecularSequence.MolecularSequenceReferenceSeq x = MolecularSequence.MolecularSequenceReferenceSeq.create().build();
        final MolecularSequence.MolecularSequenceReferenceSeq y = MolecularSequence.MolecularSequenceReferenceSeq.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", MolecularSequence.MolecularSequenceReferenceSeq.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, MolecularSequence.MolecularSequenceReferenceSeq.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, MolecularSequence.MolecularSequenceReferenceSeq.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testChromosome() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, MolecularSequence.MolecularSequenceReferenceSeq.create().chromosome(value).build().chromosome());
    }

    @Test
    public void testGenomeBuild() {
        assertEquals("x", MolecularSequence.MolecularSequenceReferenceSeq.create().genomeBuild("x").build().genomeBuild());
    }

    @Test
    public void testOrientation() {
        assertEquals("x", MolecularSequence.MolecularSequenceReferenceSeq.create().orientation("x").build().orientation());
    }

    @Test
    public void testReferenceSeqId() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, MolecularSequence.MolecularSequenceReferenceSeq.create().referenceSeqId(value).build().referenceSeqId());
    }

    @Test
    public void testReferenceSeqPointer() {
        final Reference value = Reference.create().build();
        assertEquals(value, MolecularSequence.MolecularSequenceReferenceSeq.create().referenceSeqPointer(value).build().referenceSeqPointer());
    }

    @Test
    public void testReferenceSeqString() {
        assertEquals("x", MolecularSequence.MolecularSequenceReferenceSeq.create().referenceSeqString("x").build().referenceSeqString());
    }

    @Test
    public void testStrand() {
        assertEquals("x", MolecularSequence.MolecularSequenceReferenceSeq.create().strand("x").build().strand());
    }

    @Test
    public void testWindowStart() {
        assertEquals(1, MolecularSequence.MolecularSequenceReferenceSeq.create().windowStart(1).build().windowStart());
    }

    @Test
    public void testWindowEnd() {
        assertEquals(1, MolecularSequence.MolecularSequenceReferenceSeq.create().windowEnd(1).build().windowEnd());
    }
}
