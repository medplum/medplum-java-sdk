/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class AccountTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Account(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Account.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Account x = Account.create().build();
        final Account y = Account.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Account.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, Account.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, Account.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", Account.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, Account.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, Account.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Account.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Account.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, Account.create().identifier(value).build().identifier());
    }

    @Test
    public void testStatus() {
        assertEquals("x", Account.create().status("x").build().status());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Account.create().type(value).build().type());
    }

    @Test
    public void testName() {
        assertEquals("x", Account.create().name("x").build().name());
    }

    @Test
    public void testSubject() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Account.create().subject(value).build().subject());
    }

    @Test
    public void testServicePeriod() {
        final Period value = Period.create().build();
        assertEquals(value, Account.create().servicePeriod(value).build().servicePeriod());
    }

    @Test
    public void testCoverage() {
        final java.util.List<Account.AccountCoverage> value = java.util.Collections.emptyList();
        assertEquals(value, Account.create().coverage(value).build().coverage());
    }

    @Test
    public void testOwner() {
        final Reference value = Reference.create().build();
        assertEquals(value, Account.create().owner(value).build().owner());
    }

    @Test
    public void testDescription() {
        assertEquals("x", Account.create().description("x").build().description());
    }

    @Test
    public void testGuarantor() {
        final java.util.List<Account.AccountGuarantor> value = java.util.Collections.emptyList();
        assertEquals(value, Account.create().guarantor(value).build().guarantor());
    }

    @Test
    public void testPartOf() {
        final Reference value = Reference.create().build();
        assertEquals(value, Account.create().partOf(value).build().partOf());
    }
}
