/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class NutritionOrderTest {

    @Test
    public void testConstructor() {
        assertNotNull(new NutritionOrder(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(NutritionOrder.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final NutritionOrder x = NutritionOrder.create().build();
        final NutritionOrder y = NutritionOrder.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", NutritionOrder.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, NutritionOrder.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, NutritionOrder.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", NutritionOrder.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, NutritionOrder.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, NutritionOrder.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, NutritionOrder.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, NutritionOrder.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, NutritionOrder.create().identifier(value).build().identifier());
    }

    @Test
    public void testInstantiatesCanonical() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, NutritionOrder.create().instantiatesCanonical(value).build().instantiatesCanonical());
    }

    @Test
    public void testInstantiatesUri() {
        final java.util.List<java.net.URI> value = java.util.Collections.emptyList();
        assertEquals(value, NutritionOrder.create().instantiatesUri(value).build().instantiatesUri());
    }

    @Test
    public void testInstantiates() {
        final java.util.List<java.net.URI> value = java.util.Collections.emptyList();
        assertEquals(value, NutritionOrder.create().instantiates(value).build().instantiates());
    }

    @Test
    public void testStatus() {
        assertEquals("x", NutritionOrder.create().status("x").build().status());
    }

    @Test
    public void testIntent() {
        assertEquals("x", NutritionOrder.create().intent("x").build().intent());
    }

    @Test
    public void testPatient() {
        final Reference value = Reference.create().build();
        assertEquals(value, NutritionOrder.create().patient(value).build().patient());
    }

    @Test
    public void testEncounter() {
        final Reference value = Reference.create().build();
        assertEquals(value, NutritionOrder.create().encounter(value).build().encounter());
    }

    @Test
    public void testDateTime() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, NutritionOrder.create().dateTime(value).build().dateTime());
    }

    @Test
    public void testOrderer() {
        final Reference value = Reference.create().build();
        assertEquals(value, NutritionOrder.create().orderer(value).build().orderer());
    }

    @Test
    public void testAllergyIntolerance() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, NutritionOrder.create().allergyIntolerance(value).build().allergyIntolerance());
    }

    @Test
    public void testFoodPreferenceModifier() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, NutritionOrder.create().foodPreferenceModifier(value).build().foodPreferenceModifier());
    }

    @Test
    public void testExcludeFoodModifier() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, NutritionOrder.create().excludeFoodModifier(value).build().excludeFoodModifier());
    }

    @Test
    public void testOralDiet() {
        final NutritionOrder.NutritionOrderOralDiet value = NutritionOrder.NutritionOrderOralDiet.create().build();
        assertEquals(value, NutritionOrder.create().oralDiet(value).build().oralDiet());
    }

    @Test
    public void testSupplement() {
        final java.util.List<NutritionOrder.NutritionOrderSupplement> value = java.util.Collections.emptyList();
        assertEquals(value, NutritionOrder.create().supplement(value).build().supplement());
    }

    @Test
    public void testEnteralFormula() {
        final NutritionOrder.NutritionOrderEnteralFormula value = NutritionOrder.NutritionOrderEnteralFormula.create().build();
        assertEquals(value, NutritionOrder.create().enteralFormula(value).build().enteralFormula());
    }

    @Test
    public void testNote() {
        final java.util.List<Annotation> value = java.util.Collections.emptyList();
        assertEquals(value, NutritionOrder.create().note(value).build().note());
    }
}
