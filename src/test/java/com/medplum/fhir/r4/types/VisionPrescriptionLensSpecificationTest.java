/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class VisionPrescriptionLensSpecificationTest {

    @Test
    public void testConstructor() {
        assertNotNull(new VisionPrescription.VisionPrescriptionLensSpecification(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(VisionPrescription.VisionPrescriptionLensSpecification.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final VisionPrescription.VisionPrescriptionLensSpecification x = VisionPrescription.VisionPrescriptionLensSpecification.create().build();
        final VisionPrescription.VisionPrescriptionLensSpecification y = VisionPrescription.VisionPrescriptionLensSpecification.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", VisionPrescription.VisionPrescriptionLensSpecification.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, VisionPrescription.VisionPrescriptionLensSpecification.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, VisionPrescription.VisionPrescriptionLensSpecification.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testProduct() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, VisionPrescription.VisionPrescriptionLensSpecification.create().product(value).build().product());
    }

    @Test
    public void testEye() {
        assertEquals("x", VisionPrescription.VisionPrescriptionLensSpecification.create().eye("x").build().eye());
    }

    @Test
    public void testSphere() {
        assertEquals(1.0, VisionPrescription.VisionPrescriptionLensSpecification.create().sphere(1.0).build().sphere());
    }

    @Test
    public void testCylinder() {
        assertEquals(1.0, VisionPrescription.VisionPrescriptionLensSpecification.create().cylinder(1.0).build().cylinder());
    }

    @Test
    public void testAxis() {
        assertEquals(1, VisionPrescription.VisionPrescriptionLensSpecification.create().axis(1).build().axis());
    }

    @Test
    public void testPrism() {
        final java.util.List<VisionPrescription.VisionPrescriptionPrism> value = java.util.Collections.emptyList();
        assertEquals(value, VisionPrescription.VisionPrescriptionLensSpecification.create().prism(value).build().prism());
    }

    @Test
    public void testAdd() {
        assertEquals(1.0, VisionPrescription.VisionPrescriptionLensSpecification.create().add(1.0).build().add());
    }

    @Test
    public void testPower() {
        assertEquals(1.0, VisionPrescription.VisionPrescriptionLensSpecification.create().power(1.0).build().power());
    }

    @Test
    public void testBackCurve() {
        assertEquals(1.0, VisionPrescription.VisionPrescriptionLensSpecification.create().backCurve(1.0).build().backCurve());
    }

    @Test
    public void testDiameter() {
        assertEquals(1.0, VisionPrescription.VisionPrescriptionLensSpecification.create().diameter(1.0).build().diameter());
    }

    @Test
    public void testDuration() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, VisionPrescription.VisionPrescriptionLensSpecification.create().duration(value).build().duration());
    }

    @Test
    public void testColor() {
        assertEquals("x", VisionPrescription.VisionPrescriptionLensSpecification.create().color("x").build().color());
    }

    @Test
    public void testBrand() {
        assertEquals("x", VisionPrescription.VisionPrescriptionLensSpecification.create().brand("x").build().brand());
    }

    @Test
    public void testNote() {
        final java.util.List<Annotation> value = java.util.Collections.emptyList();
        assertEquals(value, VisionPrescription.VisionPrescriptionLensSpecification.create().note(value).build().note());
    }
}
