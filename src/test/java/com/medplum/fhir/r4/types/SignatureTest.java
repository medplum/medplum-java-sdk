/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class SignatureTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Signature(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Signature.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Signature x = Signature.create().build();
        final Signature y = Signature.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Signature.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Signature.create().extension(value).build().extension());
    }

    @Test
    public void testType() {
        final java.util.List<Coding> value = java.util.Collections.emptyList();
        assertEquals(value, Signature.create().type(value).build().type());
    }

    @Test
    public void testWhen() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, Signature.create().when(value).build().when());
    }

    @Test
    public void testWho() {
        final Reference value = Reference.create().build();
        assertEquals(value, Signature.create().who(value).build().who());
    }

    @Test
    public void testOnBehalfOf() {
        final Reference value = Reference.create().build();
        assertEquals(value, Signature.create().onBehalfOf(value).build().onBehalfOf());
    }

    @Test
    public void testTargetFormat() {
        assertEquals("x", Signature.create().targetFormat("x").build().targetFormat());
    }

    @Test
    public void testSigFormat() {
        assertEquals("x", Signature.create().sigFormat("x").build().sigFormat());
    }

    @Test
    public void testData() {
        assertEquals("x", Signature.create().data("x").build().data());
    }
}
