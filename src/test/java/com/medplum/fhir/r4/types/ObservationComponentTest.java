/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ObservationComponentTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Observation.ObservationComponent(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Observation.ObservationComponent.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Observation.ObservationComponent x = Observation.ObservationComponent.create().build();
        final Observation.ObservationComponent y = Observation.ObservationComponent.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Observation.ObservationComponent.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.ObservationComponent.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.ObservationComponent.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testCode() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Observation.ObservationComponent.create().code(value).build().code());
    }

    @Test
    public void testValueQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, Observation.ObservationComponent.create().valueQuantity(value).build().valueQuantity());
    }

    @Test
    public void testValueCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Observation.ObservationComponent.create().valueCodeableConcept(value).build().valueCodeableConcept());
    }

    @Test
    public void testValueString() {
        assertEquals("x", Observation.ObservationComponent.create().valueString("x").build().valueString());
    }

    @Test
    public void testValueBoolean() {
        assertEquals(true, Observation.ObservationComponent.create().valueBoolean(true).build().valueBoolean());
    }

    @Test
    public void testValueInteger() {
        assertEquals(1, Observation.ObservationComponent.create().valueInteger(1).build().valueInteger());
    }

    @Test
    public void testValueRange() {
        final Range value = Range.create().build();
        assertEquals(value, Observation.ObservationComponent.create().valueRange(value).build().valueRange());
    }

    @Test
    public void testValueRatio() {
        final Ratio value = Ratio.create().build();
        assertEquals(value, Observation.ObservationComponent.create().valueRatio(value).build().valueRatio());
    }

    @Test
    public void testValueSampledData() {
        final SampledData value = SampledData.create().build();
        assertEquals(value, Observation.ObservationComponent.create().valueSampledData(value).build().valueSampledData());
    }

    @Test
    public void testValueTime() {
        assertEquals("x", Observation.ObservationComponent.create().valueTime("x").build().valueTime());
    }

    @Test
    public void testValueDateTime() {
        assertEquals("x", Observation.ObservationComponent.create().valueDateTime("x").build().valueDateTime());
    }

    @Test
    public void testValuePeriod() {
        final Period value = Period.create().build();
        assertEquals(value, Observation.ObservationComponent.create().valuePeriod(value).build().valuePeriod());
    }

    @Test
    public void testDataAbsentReason() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Observation.ObservationComponent.create().dataAbsentReason(value).build().dataAbsentReason());
    }

    @Test
    public void testInterpretation() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.ObservationComponent.create().interpretation(value).build().interpretation());
    }

    @Test
    public void testReferenceRange() {
        final java.util.List<Observation.ObservationReferenceRange> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.ObservationComponent.create().referenceRange(value).build().referenceRange());
    }
}
