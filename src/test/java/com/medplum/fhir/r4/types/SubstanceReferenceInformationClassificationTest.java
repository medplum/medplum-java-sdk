/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class SubstanceReferenceInformationClassificationTest {

    @Test
    public void testConstructor() {
        assertNotNull(new SubstanceReferenceInformation.SubstanceReferenceInformationClassification(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(SubstanceReferenceInformation.SubstanceReferenceInformationClassification.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
    final SubstanceReferenceInformation.SubstanceReferenceInformationClassification x =
            SubstanceReferenceInformation.SubstanceReferenceInformationClassification.create().build();
    final SubstanceReferenceInformation.SubstanceReferenceInformationClassification y =
            SubstanceReferenceInformation.SubstanceReferenceInformationClassification.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", SubstanceReferenceInformation.SubstanceReferenceInformationClassification.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceReferenceInformation.SubstanceReferenceInformationClassification.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
    assertEquals(value,
            SubstanceReferenceInformation.SubstanceReferenceInformationClassification.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testDomain() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstanceReferenceInformation.SubstanceReferenceInformationClassification.create().domain(value).build().domain());
    }

    @Test
    public void testClassification() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstanceReferenceInformation.SubstanceReferenceInformationClassification.create().classification(value).build().classification());
    }

    @Test
    public void testSubtype() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceReferenceInformation.SubstanceReferenceInformationClassification.create().subtype(value).build().subtype());
    }

    @Test
    public void testSource() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceReferenceInformation.SubstanceReferenceInformationClassification.create().source(value).build().source());
    }
}
