/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class DiagnosticReportTest {

    @Test
    public void testConstructor() {
        assertNotNull(new DiagnosticReport(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(DiagnosticReport.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final DiagnosticReport x = DiagnosticReport.create().build();
        final DiagnosticReport y = DiagnosticReport.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", DiagnosticReport.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, DiagnosticReport.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, DiagnosticReport.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", DiagnosticReport.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, DiagnosticReport.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, DiagnosticReport.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, DiagnosticReport.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, DiagnosticReport.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, DiagnosticReport.create().identifier(value).build().identifier());
    }

    @Test
    public void testBasedOn() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, DiagnosticReport.create().basedOn(value).build().basedOn());
    }

    @Test
    public void testStatus() {
        assertEquals("x", DiagnosticReport.create().status("x").build().status());
    }

    @Test
    public void testCategory() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, DiagnosticReport.create().category(value).build().category());
    }

    @Test
    public void testCode() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, DiagnosticReport.create().code(value).build().code());
    }

    @Test
    public void testSubject() {
        final Reference value = Reference.create().build();
        assertEquals(value, DiagnosticReport.create().subject(value).build().subject());
    }

    @Test
    public void testEncounter() {
        final Reference value = Reference.create().build();
        assertEquals(value, DiagnosticReport.create().encounter(value).build().encounter());
    }

    @Test
    public void testEffectiveDateTime() {
        assertEquals("x", DiagnosticReport.create().effectiveDateTime("x").build().effectiveDateTime());
    }

    @Test
    public void testEffectivePeriod() {
        final Period value = Period.create().build();
        assertEquals(value, DiagnosticReport.create().effectivePeriod(value).build().effectivePeriod());
    }

    @Test
    public void testIssued() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, DiagnosticReport.create().issued(value).build().issued());
    }

    @Test
    public void testPerformer() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, DiagnosticReport.create().performer(value).build().performer());
    }

    @Test
    public void testResultsInterpreter() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, DiagnosticReport.create().resultsInterpreter(value).build().resultsInterpreter());
    }

    @Test
    public void testSpecimen() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, DiagnosticReport.create().specimen(value).build().specimen());
    }

    @Test
    public void testResult() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, DiagnosticReport.create().result(value).build().result());
    }

    @Test
    public void testImagingStudy() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, DiagnosticReport.create().imagingStudy(value).build().imagingStudy());
    }

    @Test
    public void testMedia() {
        final java.util.List<DiagnosticReport.DiagnosticReportMedia> value = java.util.Collections.emptyList();
        assertEquals(value, DiagnosticReport.create().media(value).build().media());
    }

    @Test
    public void testConclusion() {
        assertEquals("x", DiagnosticReport.create().conclusion("x").build().conclusion());
    }

    @Test
    public void testConclusionCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, DiagnosticReport.create().conclusionCode(value).build().conclusionCode());
    }

    @Test
    public void testPresentedForm() {
        final java.util.List<Attachment> value = java.util.Collections.emptyList();
        assertEquals(value, DiagnosticReport.create().presentedForm(value).build().presentedForm());
    }
}
