/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class NutritionOrderEnteralFormulaTest {

    @Test
    public void testConstructor() {
        assertNotNull(new NutritionOrder.NutritionOrderEnteralFormula(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(NutritionOrder.NutritionOrderEnteralFormula.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final NutritionOrder.NutritionOrderEnteralFormula x = NutritionOrder.NutritionOrderEnteralFormula.create().build();
        final NutritionOrder.NutritionOrderEnteralFormula y = NutritionOrder.NutritionOrderEnteralFormula.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", NutritionOrder.NutritionOrderEnteralFormula.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, NutritionOrder.NutritionOrderEnteralFormula.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, NutritionOrder.NutritionOrderEnteralFormula.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testBaseFormulaType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, NutritionOrder.NutritionOrderEnteralFormula.create().baseFormulaType(value).build().baseFormulaType());
    }

    @Test
    public void testBaseFormulaProductName() {
        assertEquals("x", NutritionOrder.NutritionOrderEnteralFormula.create().baseFormulaProductName("x").build().baseFormulaProductName());
    }

    @Test
    public void testAdditiveType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, NutritionOrder.NutritionOrderEnteralFormula.create().additiveType(value).build().additiveType());
    }

    @Test
    public void testAdditiveProductName() {
        assertEquals("x", NutritionOrder.NutritionOrderEnteralFormula.create().additiveProductName("x").build().additiveProductName());
    }

    @Test
    public void testCaloricDensity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, NutritionOrder.NutritionOrderEnteralFormula.create().caloricDensity(value).build().caloricDensity());
    }

    @Test
    public void testRouteofAdministration() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, NutritionOrder.NutritionOrderEnteralFormula.create().routeofAdministration(value).build().routeofAdministration());
    }

    @Test
    public void testAdministration() {
        final java.util.List<NutritionOrder.NutritionOrderAdministration> value = java.util.Collections.emptyList();
        assertEquals(value, NutritionOrder.NutritionOrderEnteralFormula.create().administration(value).build().administration());
    }

    @Test
    public void testMaxVolumeToDeliver() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, NutritionOrder.NutritionOrderEnteralFormula.create().maxVolumeToDeliver(value).build().maxVolumeToDeliver());
    }

    @Test
    public void testAdministrationInstruction() {
        assertEquals("x", NutritionOrder.NutritionOrderEnteralFormula.create().administrationInstruction("x").build().administrationInstruction());
    }
}
