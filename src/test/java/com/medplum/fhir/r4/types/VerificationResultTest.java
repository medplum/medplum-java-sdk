/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class VerificationResultTest {

    @Test
    public void testConstructor() {
        assertNotNull(new VerificationResult(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(VerificationResult.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final VerificationResult x = VerificationResult.create().build();
        final VerificationResult y = VerificationResult.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", VerificationResult.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, VerificationResult.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, VerificationResult.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", VerificationResult.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, VerificationResult.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, VerificationResult.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, VerificationResult.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, VerificationResult.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testTarget() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, VerificationResult.create().target(value).build().target());
    }

    @Test
    public void testTargetLocation() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, VerificationResult.create().targetLocation(value).build().targetLocation());
    }

    @Test
    public void testNeed() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, VerificationResult.create().need(value).build().need());
    }

    @Test
    public void testStatus() {
        assertEquals("x", VerificationResult.create().status("x").build().status());
    }

    @Test
    public void testStatusDate() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, VerificationResult.create().statusDate(value).build().statusDate());
    }

    @Test
    public void testValidationType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, VerificationResult.create().validationType(value).build().validationType());
    }

    @Test
    public void testValidationProcess() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, VerificationResult.create().validationProcess(value).build().validationProcess());
    }

    @Test
    public void testFrequency() {
        final Timing value = Timing.create().build();
        assertEquals(value, VerificationResult.create().frequency(value).build().frequency());
    }

    @Test
    public void testLastPerformed() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, VerificationResult.create().lastPerformed(value).build().lastPerformed());
    }

    @Test
    public void testNextScheduled() {
        final java.time.LocalDate value = java.time.LocalDate.now();
        assertEquals(value, VerificationResult.create().nextScheduled(value).build().nextScheduled());
    }

    @Test
    public void testFailureAction() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, VerificationResult.create().failureAction(value).build().failureAction());
    }

    @Test
    public void testPrimarySource() {
        final java.util.List<VerificationResult.VerificationResultPrimarySource> value = java.util.Collections.emptyList();
        assertEquals(value, VerificationResult.create().primarySource(value).build().primarySource());
    }

    @Test
    public void testAttestation() {
        final VerificationResult.VerificationResultAttestation value = VerificationResult.VerificationResultAttestation.create().build();
        assertEquals(value, VerificationResult.create().attestation(value).build().attestation());
    }

    @Test
    public void testValidator() {
        final java.util.List<VerificationResult.VerificationResultValidator> value = java.util.Collections.emptyList();
        assertEquals(value, VerificationResult.create().validator(value).build().validator());
    }
}
