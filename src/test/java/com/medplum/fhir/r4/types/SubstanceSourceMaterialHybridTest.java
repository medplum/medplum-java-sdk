/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class SubstanceSourceMaterialHybridTest {

    @Test
    public void testConstructor() {
        assertNotNull(new SubstanceSourceMaterial.SubstanceSourceMaterialHybrid(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(SubstanceSourceMaterial.SubstanceSourceMaterialHybrid.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final SubstanceSourceMaterial.SubstanceSourceMaterialHybrid x = SubstanceSourceMaterial.SubstanceSourceMaterialHybrid.create().build();
        final SubstanceSourceMaterial.SubstanceSourceMaterialHybrid y = SubstanceSourceMaterial.SubstanceSourceMaterialHybrid.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", SubstanceSourceMaterial.SubstanceSourceMaterialHybrid.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSourceMaterial.SubstanceSourceMaterialHybrid.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSourceMaterial.SubstanceSourceMaterialHybrid.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testMaternalOrganismId() {
        assertEquals("x", SubstanceSourceMaterial.SubstanceSourceMaterialHybrid.create().maternalOrganismId("x").build().maternalOrganismId());
    }

    @Test
    public void testMaternalOrganismName() {
        assertEquals("x", SubstanceSourceMaterial.SubstanceSourceMaterialHybrid.create().maternalOrganismName("x").build().maternalOrganismName());
    }

    @Test
    public void testPaternalOrganismId() {
        assertEquals("x", SubstanceSourceMaterial.SubstanceSourceMaterialHybrid.create().paternalOrganismId("x").build().paternalOrganismId());
    }

    @Test
    public void testPaternalOrganismName() {
        assertEquals("x", SubstanceSourceMaterial.SubstanceSourceMaterialHybrid.create().paternalOrganismName("x").build().paternalOrganismName());
    }

    @Test
    public void testHybridType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstanceSourceMaterial.SubstanceSourceMaterialHybrid.create().hybridType(value).build().hybridType());
    }
}
