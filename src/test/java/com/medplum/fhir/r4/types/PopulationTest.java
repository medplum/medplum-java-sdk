/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class PopulationTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Population(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Population.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Population x = Population.create().build();
        final Population y = Population.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Population.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Population.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Population.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testAgeRange() {
        final Range value = Range.create().build();
        assertEquals(value, Population.create().ageRange(value).build().ageRange());
    }

    @Test
    public void testAgeCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Population.create().ageCodeableConcept(value).build().ageCodeableConcept());
    }

    @Test
    public void testGender() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Population.create().gender(value).build().gender());
    }

    @Test
    public void testRace() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Population.create().race(value).build().race());
    }

    @Test
    public void testPhysiologicalCondition() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Population.create().physiologicalCondition(value).build().physiologicalCondition());
    }
}
