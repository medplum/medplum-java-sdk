/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class PatientContactTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Patient.PatientContact(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Patient.PatientContact.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Patient.PatientContact x = Patient.PatientContact.create().build();
        final Patient.PatientContact y = Patient.PatientContact.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Patient.PatientContact.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Patient.PatientContact.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Patient.PatientContact.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testRelationship() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Patient.PatientContact.create().relationship(value).build().relationship());
    }

    @Test
    public void testName() {
        final HumanName value = HumanName.create().build();
        assertEquals(value, Patient.PatientContact.create().name(value).build().name());
    }

    @Test
    public void testTelecom() {
        final java.util.List<ContactPoint> value = java.util.Collections.emptyList();
        assertEquals(value, Patient.PatientContact.create().telecom(value).build().telecom());
    }

    @Test
    public void testAddress() {
        final Address value = Address.create().build();
        assertEquals(value, Patient.PatientContact.create().address(value).build().address());
    }

    @Test
    public void testGender() {
        assertEquals("x", Patient.PatientContact.create().gender("x").build().gender());
    }

    @Test
    public void testOrganization() {
        final Reference value = Reference.create().build();
        assertEquals(value, Patient.PatientContact.create().organization(value).build().organization());
    }

    @Test
    public void testPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, Patient.PatientContact.create().period(value).build().period());
    }
}
