/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class MedicinalProductManufacturedTest {

    @Test
    public void testConstructor() {
        assertNotNull(new MedicinalProductManufactured(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(MedicinalProductManufactured.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final MedicinalProductManufactured x = MedicinalProductManufactured.create().build();
        final MedicinalProductManufactured y = MedicinalProductManufactured.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", MedicinalProductManufactured.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, MedicinalProductManufactured.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, MedicinalProductManufactured.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", MedicinalProductManufactured.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, MedicinalProductManufactured.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProductManufactured.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProductManufactured.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProductManufactured.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testManufacturedDoseForm() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, MedicinalProductManufactured.create().manufacturedDoseForm(value).build().manufacturedDoseForm());
    }

    @Test
    public void testUnitOfPresentation() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, MedicinalProductManufactured.create().unitOfPresentation(value).build().unitOfPresentation());
    }

    @Test
    public void testQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, MedicinalProductManufactured.create().quantity(value).build().quantity());
    }

    @Test
    public void testManufacturer() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProductManufactured.create().manufacturer(value).build().manufacturer());
    }

    @Test
    public void testIngredient() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProductManufactured.create().ingredient(value).build().ingredient());
    }

    @Test
    public void testPhysicalCharacteristics() {
        final ProdCharacteristic value = ProdCharacteristic.create().build();
        assertEquals(value, MedicinalProductManufactured.create().physicalCharacteristics(value).build().physicalCharacteristics());
    }

    @Test
    public void testOtherCharacteristics() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProductManufactured.create().otherCharacteristics(value).build().otherCharacteristics());
    }
}
