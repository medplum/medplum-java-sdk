/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class SubstanceSpecificationTest {

    @Test
    public void testConstructor() {
        assertNotNull(new SubstanceSpecification(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(SubstanceSpecification.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final SubstanceSpecification x = SubstanceSpecification.create().build();
        final SubstanceSpecification y = SubstanceSpecification.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", SubstanceSpecification.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, SubstanceSpecification.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, SubstanceSpecification.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", SubstanceSpecification.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, SubstanceSpecification.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final Identifier value = Identifier.create().build();
        assertEquals(value, SubstanceSpecification.create().identifier(value).build().identifier());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstanceSpecification.create().type(value).build().type());
    }

    @Test
    public void testStatus() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstanceSpecification.create().status(value).build().status());
    }

    @Test
    public void testDomain() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstanceSpecification.create().domain(value).build().domain());
    }

    @Test
    public void testDescription() {
        assertEquals("x", SubstanceSpecification.create().description("x").build().description());
    }

    @Test
    public void testSource() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.create().source(value).build().source());
    }

    @Test
    public void testComment() {
        assertEquals("x", SubstanceSpecification.create().comment("x").build().comment());
    }

    @Test
    public void testMoiety() {
        final java.util.List<SubstanceSpecification.SubstanceSpecificationMoiety> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.create().moiety(value).build().moiety());
    }

    @Test
    public void testProperty() {
        final java.util.List<SubstanceSpecification.SubstanceSpecificationProperty> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.create().property(value).build().property());
    }

    @Test
    public void testReferenceInformation() {
        final Reference value = Reference.create().build();
        assertEquals(value, SubstanceSpecification.create().referenceInformation(value).build().referenceInformation());
    }

    @Test
    public void testStructure() {
        final SubstanceSpecification.SubstanceSpecificationStructure value = SubstanceSpecification.SubstanceSpecificationStructure.create().build();
        assertEquals(value, SubstanceSpecification.create().structure(value).build().structure());
    }

    @Test
    public void testCode() {
        final java.util.List<SubstanceSpecification.SubstanceSpecificationCode> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.create().code(value).build().code());
    }

    @Test
    public void testName() {
        final java.util.List<SubstanceSpecification.SubstanceSpecificationName> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.create().name(value).build().name());
    }

    @Test
    public void testMolecularWeight() {
        final java.util.List<SubstanceSpecification.SubstanceSpecificationMolecularWeight> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.create().molecularWeight(value).build().molecularWeight());
    }

    @Test
    public void testRelationship() {
        final java.util.List<SubstanceSpecification.SubstanceSpecificationRelationship> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.create().relationship(value).build().relationship());
    }

    @Test
    public void testNucleicAcid() {
        final Reference value = Reference.create().build();
        assertEquals(value, SubstanceSpecification.create().nucleicAcid(value).build().nucleicAcid());
    }

    @Test
    public void testPolymer() {
        final Reference value = Reference.create().build();
        assertEquals(value, SubstanceSpecification.create().polymer(value).build().polymer());
    }

    @Test
    public void testProtein() {
        final Reference value = Reference.create().build();
        assertEquals(value, SubstanceSpecification.create().protein(value).build().protein());
    }

    @Test
    public void testSourceMaterial() {
        final Reference value = Reference.create().build();
        assertEquals(value, SubstanceSpecification.create().sourceMaterial(value).build().sourceMaterial());
    }
}
