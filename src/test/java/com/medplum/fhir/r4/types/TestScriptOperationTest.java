/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class TestScriptOperationTest {

    @Test
    public void testConstructor() {
        assertNotNull(new TestScript.TestScriptOperation(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(TestScript.TestScriptOperation.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final TestScript.TestScriptOperation x = TestScript.TestScriptOperation.create().build();
        final TestScript.TestScriptOperation y = TestScript.TestScriptOperation.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", TestScript.TestScriptOperation.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, TestScript.TestScriptOperation.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, TestScript.TestScriptOperation.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testType() {
        final Coding value = Coding.create().build();
        assertEquals(value, TestScript.TestScriptOperation.create().type(value).build().type());
    }

    @Test
    public void testResource() {
        assertEquals("x", TestScript.TestScriptOperation.create().resource("x").build().resource());
    }

    @Test
    public void testLabel() {
        assertEquals("x", TestScript.TestScriptOperation.create().label("x").build().label());
    }

    @Test
    public void testDescription() {
        assertEquals("x", TestScript.TestScriptOperation.create().description("x").build().description());
    }

    @Test
    public void testAccept() {
        assertEquals("x", TestScript.TestScriptOperation.create().accept("x").build().accept());
    }

    @Test
    public void testContentType() {
        assertEquals("x", TestScript.TestScriptOperation.create().contentType("x").build().contentType());
    }

    @Test
    public void testDestination() {
        assertEquals(1, TestScript.TestScriptOperation.create().destination(1).build().destination());
    }

    @Test
    public void testEncodeRequestUrl() {
        assertEquals(true, TestScript.TestScriptOperation.create().encodeRequestUrl(true).build().encodeRequestUrl());
    }

    @Test
    public void testMethod() {
        assertEquals("x", TestScript.TestScriptOperation.create().method("x").build().method());
    }

    @Test
    public void testOrigin() {
        assertEquals(1, TestScript.TestScriptOperation.create().origin(1).build().origin());
    }

    @Test
    public void testParams() {
        assertEquals("x", TestScript.TestScriptOperation.create().params("x").build().params());
    }

    @Test
    public void testRequestHeader() {
        final java.util.List<TestScript.TestScriptRequestHeader> value = java.util.Collections.emptyList();
        assertEquals(value, TestScript.TestScriptOperation.create().requestHeader(value).build().requestHeader());
    }

    @Test
    public void testRequestId() {
        assertEquals("x", TestScript.TestScriptOperation.create().requestId("x").build().requestId());
    }

    @Test
    public void testResponseId() {
        assertEquals("x", TestScript.TestScriptOperation.create().responseId("x").build().responseId());
    }

    @Test
    public void testSourceId() {
        assertEquals("x", TestScript.TestScriptOperation.create().sourceId("x").build().sourceId());
    }

    @Test
    public void testTargetId() {
        assertEquals("x", TestScript.TestScriptOperation.create().targetId("x").build().targetId());
    }

    @Test
    public void testUrl() {
        assertEquals("x", TestScript.TestScriptOperation.create().url("x").build().url());
    }
}
