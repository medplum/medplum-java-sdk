/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class DeviceMetricTest {

    @Test
    public void testConstructor() {
        assertNotNull(new DeviceMetric(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(DeviceMetric.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final DeviceMetric x = DeviceMetric.create().build();
        final DeviceMetric y = DeviceMetric.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", DeviceMetric.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, DeviceMetric.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, DeviceMetric.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", DeviceMetric.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, DeviceMetric.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceMetric.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceMetric.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceMetric.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceMetric.create().identifier(value).build().identifier());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, DeviceMetric.create().type(value).build().type());
    }

    @Test
    public void testUnit() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, DeviceMetric.create().unit(value).build().unit());
    }

    @Test
    public void testSource() {
        final Reference value = Reference.create().build();
        assertEquals(value, DeviceMetric.create().source(value).build().source());
    }

    @Test
    public void testParent() {
        final Reference value = Reference.create().build();
        assertEquals(value, DeviceMetric.create().parent(value).build().parent());
    }

    @Test
    public void testOperationalStatus() {
        assertEquals("x", DeviceMetric.create().operationalStatus("x").build().operationalStatus());
    }

    @Test
    public void testColor() {
        assertEquals("x", DeviceMetric.create().color("x").build().color());
    }

    @Test
    public void testCategory() {
        assertEquals("x", DeviceMetric.create().category("x").build().category());
    }

    @Test
    public void testMeasurementPeriod() {
        final Timing value = Timing.create().build();
        assertEquals(value, DeviceMetric.create().measurementPeriod(value).build().measurementPeriod());
    }

    @Test
    public void testCalibration() {
        final java.util.List<DeviceMetric.DeviceMetricCalibration> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceMetric.create().calibration(value).build().calibration());
    }
}
