/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class SampledDataTest {

    @Test
    public void testConstructor() {
        assertNotNull(new SampledData(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(SampledData.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final SampledData x = SampledData.create().build();
        final SampledData y = SampledData.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", SampledData.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SampledData.create().extension(value).build().extension());
    }

    @Test
    public void testOrigin() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, SampledData.create().origin(value).build().origin());
    }

    @Test
    public void testPeriod() {
        assertEquals(1.0, SampledData.create().period(1.0).build().period());
    }

    @Test
    public void testFactor() {
        assertEquals(1.0, SampledData.create().factor(1.0).build().factor());
    }

    @Test
    public void testLowerLimit() {
        assertEquals(1.0, SampledData.create().lowerLimit(1.0).build().lowerLimit());
    }

    @Test
    public void testUpperLimit() {
        assertEquals(1.0, SampledData.create().upperLimit(1.0).build().upperLimit());
    }

    @Test
    public void testDimensions() {
        assertEquals(1, SampledData.create().dimensions(1).build().dimensions());
    }

    @Test
    public void testData() {
        assertEquals("x", SampledData.create().data("x").build().data());
    }
}
