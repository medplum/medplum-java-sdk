/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class SubstanceSpecificationRelationshipTest {

    @Test
    public void testConstructor() {
        assertNotNull(new SubstanceSpecification.SubstanceSpecificationRelationship(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(SubstanceSpecification.SubstanceSpecificationRelationship.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final SubstanceSpecification.SubstanceSpecificationRelationship x = SubstanceSpecification.SubstanceSpecificationRelationship.create().build();
    final SubstanceSpecification.SubstanceSpecificationRelationship y =
            SubstanceSpecification.SubstanceSpecificationRelationship.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", SubstanceSpecification.SubstanceSpecificationRelationship.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationRelationship.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationRelationship.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testSubstanceReference() {
        final Reference value = Reference.create().build();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationRelationship.create().substanceReference(value).build().substanceReference());
    }

    @Test
    public void testSubstanceCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
    assertEquals(value,
            SubstanceSpecification.SubstanceSpecificationRelationship.create().substanceCodeableConcept(value).build().substanceCodeableConcept());
    }

    @Test
    public void testRelationship() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationRelationship.create().relationship(value).build().relationship());
    }

    @Test
    public void testIsDefining() {
        assertEquals(true, SubstanceSpecification.SubstanceSpecificationRelationship.create().isDefining(true).build().isDefining());
    }

    @Test
    public void testAmountQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationRelationship.create().amountQuantity(value).build().amountQuantity());
    }

    @Test
    public void testAmountRange() {
        final Range value = Range.create().build();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationRelationship.create().amountRange(value).build().amountRange());
    }

    @Test
    public void testAmountRatio() {
        final Ratio value = Ratio.create().build();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationRelationship.create().amountRatio(value).build().amountRatio());
    }

    @Test
    public void testAmountString() {
        assertEquals("x", SubstanceSpecification.SubstanceSpecificationRelationship.create().amountString("x").build().amountString());
    }

    @Test
    public void testAmountRatioLowLimit() {
        final Ratio value = Ratio.create().build();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationRelationship.create().amountRatioLowLimit(value).build().amountRatioLowLimit());
    }

    @Test
    public void testAmountType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationRelationship.create().amountType(value).build().amountType());
    }

    @Test
    public void testSource() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationRelationship.create().source(value).build().source());
    }
}
