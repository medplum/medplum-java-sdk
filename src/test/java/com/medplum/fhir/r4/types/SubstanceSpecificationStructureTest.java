/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class SubstanceSpecificationStructureTest {

    @Test
    public void testConstructor() {
        assertNotNull(new SubstanceSpecification.SubstanceSpecificationStructure(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(SubstanceSpecification.SubstanceSpecificationStructure.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final SubstanceSpecification.SubstanceSpecificationStructure x = SubstanceSpecification.SubstanceSpecificationStructure.create().build();
        final SubstanceSpecification.SubstanceSpecificationStructure y = SubstanceSpecification.SubstanceSpecificationStructure.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", SubstanceSpecification.SubstanceSpecificationStructure.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationStructure.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationStructure.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testStereochemistry() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationStructure.create().stereochemistry(value).build().stereochemistry());
    }

    @Test
    public void testOpticalActivity() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationStructure.create().opticalActivity(value).build().opticalActivity());
    }

    @Test
    public void testMolecularFormula() {
        assertEquals("x", SubstanceSpecification.SubstanceSpecificationStructure.create().molecularFormula("x").build().molecularFormula());
    }

    @Test
    public void testMolecularFormulaByMoiety() {
        assertEquals("x", SubstanceSpecification.SubstanceSpecificationStructure.create().molecularFormulaByMoiety("x").build().molecularFormulaByMoiety());
    }

    @Test
    public void testIsotope() {
        final java.util.List<SubstanceSpecification.SubstanceSpecificationIsotope> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationStructure.create().isotope(value).build().isotope());
    }

    @Test
    public void testMolecularWeight() {
    final SubstanceSpecification.SubstanceSpecificationMolecularWeight value =
            SubstanceSpecification.SubstanceSpecificationMolecularWeight.create().build();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationStructure.create().molecularWeight(value).build().molecularWeight());
    }

    @Test
    public void testSource() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationStructure.create().source(value).build().source());
    }

    @Test
    public void testRepresentation() {
        final java.util.List<SubstanceSpecification.SubstanceSpecificationRepresentation> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationStructure.create().representation(value).build().representation());
    }
}
