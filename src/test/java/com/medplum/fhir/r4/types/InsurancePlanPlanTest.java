/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class InsurancePlanPlanTest {

    @Test
    public void testConstructor() {
        assertNotNull(new InsurancePlan.InsurancePlanPlan(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(InsurancePlan.InsurancePlanPlan.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final InsurancePlan.InsurancePlanPlan x = InsurancePlan.InsurancePlanPlan.create().build();
        final InsurancePlan.InsurancePlanPlan y = InsurancePlan.InsurancePlanPlan.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", InsurancePlan.InsurancePlanPlan.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, InsurancePlan.InsurancePlanPlan.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, InsurancePlan.InsurancePlanPlan.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, InsurancePlan.InsurancePlanPlan.create().identifier(value).build().identifier());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, InsurancePlan.InsurancePlanPlan.create().type(value).build().type());
    }

    @Test
    public void testCoverageArea() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, InsurancePlan.InsurancePlanPlan.create().coverageArea(value).build().coverageArea());
    }

    @Test
    public void testNetwork() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, InsurancePlan.InsurancePlanPlan.create().network(value).build().network());
    }

    @Test
    public void testGeneralCost() {
        final java.util.List<InsurancePlan.InsurancePlanGeneralCost> value = java.util.Collections.emptyList();
        assertEquals(value, InsurancePlan.InsurancePlanPlan.create().generalCost(value).build().generalCost());
    }

    @Test
    public void testSpecificCost() {
        final java.util.List<InsurancePlan.InsurancePlanSpecificCost> value = java.util.Collections.emptyList();
        assertEquals(value, InsurancePlan.InsurancePlanPlan.create().specificCost(value).build().specificCost());
    }
}
