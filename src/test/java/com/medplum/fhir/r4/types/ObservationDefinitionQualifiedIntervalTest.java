/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ObservationDefinitionQualifiedIntervalTest {

    @Test
    public void testConstructor() {
        assertNotNull(new ObservationDefinition.ObservationDefinitionQualifiedInterval(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(ObservationDefinition.ObservationDefinitionQualifiedInterval.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final ObservationDefinition.ObservationDefinitionQualifiedInterval x = ObservationDefinition.ObservationDefinitionQualifiedInterval.create().build();
    final ObservationDefinition.ObservationDefinitionQualifiedInterval y =
            ObservationDefinition.ObservationDefinitionQualifiedInterval.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", ObservationDefinition.ObservationDefinitionQualifiedInterval.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, ObservationDefinition.ObservationDefinitionQualifiedInterval.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, ObservationDefinition.ObservationDefinitionQualifiedInterval.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testCategory() {
        assertEquals("x", ObservationDefinition.ObservationDefinitionQualifiedInterval.create().category("x").build().category());
    }

    @Test
    public void testRange() {
        final Range value = Range.create().build();
        assertEquals(value, ObservationDefinition.ObservationDefinitionQualifiedInterval.create().range(value).build().range());
    }

    @Test
    public void testContext() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, ObservationDefinition.ObservationDefinitionQualifiedInterval.create().context(value).build().context());
    }

    @Test
    public void testAppliesTo() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, ObservationDefinition.ObservationDefinitionQualifiedInterval.create().appliesTo(value).build().appliesTo());
    }

    @Test
    public void testGender() {
        assertEquals("x", ObservationDefinition.ObservationDefinitionQualifiedInterval.create().gender("x").build().gender());
    }

    @Test
    public void testAge() {
        final Range value = Range.create().build();
        assertEquals(value, ObservationDefinition.ObservationDefinitionQualifiedInterval.create().age(value).build().age());
    }

    @Test
    public void testGestationalAge() {
        final Range value = Range.create().build();
        assertEquals(value, ObservationDefinition.ObservationDefinitionQualifiedInterval.create().gestationalAge(value).build().gestationalAge());
    }

    @Test
    public void testCondition() {
        assertEquals("x", ObservationDefinition.ObservationDefinitionQualifiedInterval.create().condition("x").build().condition());
    }
}
