/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class DocumentReferenceTest {

    @Test
    public void testConstructor() {
        assertNotNull(new DocumentReference(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(DocumentReference.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final DocumentReference x = DocumentReference.create().build();
        final DocumentReference y = DocumentReference.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", DocumentReference.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, DocumentReference.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, DocumentReference.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", DocumentReference.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, DocumentReference.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, DocumentReference.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, DocumentReference.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, DocumentReference.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testMasterIdentifier() {
        final Identifier value = Identifier.create().build();
        assertEquals(value, DocumentReference.create().masterIdentifier(value).build().masterIdentifier());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, DocumentReference.create().identifier(value).build().identifier());
    }

    @Test
    public void testStatus() {
        assertEquals("x", DocumentReference.create().status("x").build().status());
    }

    @Test
    public void testDocStatus() {
        assertEquals("x", DocumentReference.create().docStatus("x").build().docStatus());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, DocumentReference.create().type(value).build().type());
    }

    @Test
    public void testCategory() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, DocumentReference.create().category(value).build().category());
    }

    @Test
    public void testSubject() {
        final Reference value = Reference.create().build();
        assertEquals(value, DocumentReference.create().subject(value).build().subject());
    }

    @Test
    public void testDate() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, DocumentReference.create().date(value).build().date());
    }

    @Test
    public void testAuthor() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, DocumentReference.create().author(value).build().author());
    }

    @Test
    public void testAuthenticator() {
        final Reference value = Reference.create().build();
        assertEquals(value, DocumentReference.create().authenticator(value).build().authenticator());
    }

    @Test
    public void testCustodian() {
        final Reference value = Reference.create().build();
        assertEquals(value, DocumentReference.create().custodian(value).build().custodian());
    }

    @Test
    public void testRelatesTo() {
        final java.util.List<DocumentReference.DocumentReferenceRelatesTo> value = java.util.Collections.emptyList();
        assertEquals(value, DocumentReference.create().relatesTo(value).build().relatesTo());
    }

    @Test
    public void testDescription() {
        assertEquals("x", DocumentReference.create().description("x").build().description());
    }

    @Test
    public void testSecurityLabel() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, DocumentReference.create().securityLabel(value).build().securityLabel());
    }

    @Test
    public void testContent() {
        final java.util.List<DocumentReference.DocumentReferenceContent> value = java.util.Collections.emptyList();
        assertEquals(value, DocumentReference.create().content(value).build().content());
    }

    @Test
    public void testContext() {
        final DocumentReference.DocumentReferenceContext value = DocumentReference.DocumentReferenceContext.create().build();
        assertEquals(value, DocumentReference.create().context(value).build().context());
    }
}
