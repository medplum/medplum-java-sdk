/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class EvidenceVariableCharacteristicTest {

    @Test
    public void testConstructor() {
        assertNotNull(new EvidenceVariable.EvidenceVariableCharacteristic(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(EvidenceVariable.EvidenceVariableCharacteristic.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final EvidenceVariable.EvidenceVariableCharacteristic x = EvidenceVariable.EvidenceVariableCharacteristic.create().build();
        final EvidenceVariable.EvidenceVariableCharacteristic y = EvidenceVariable.EvidenceVariableCharacteristic.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", EvidenceVariable.EvidenceVariableCharacteristic.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, EvidenceVariable.EvidenceVariableCharacteristic.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, EvidenceVariable.EvidenceVariableCharacteristic.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testDescription() {
        assertEquals("x", EvidenceVariable.EvidenceVariableCharacteristic.create().description("x").build().description());
    }

    @Test
    public void testDefinitionReference() {
        final Reference value = Reference.create().build();
        assertEquals(value, EvidenceVariable.EvidenceVariableCharacteristic.create().definitionReference(value).build().definitionReference());
    }

    @Test
    public void testDefinitionCanonical() {
        assertEquals("x", EvidenceVariable.EvidenceVariableCharacteristic.create().definitionCanonical("x").build().definitionCanonical());
    }

    @Test
    public void testDefinitionCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, EvidenceVariable.EvidenceVariableCharacteristic.create().definitionCodeableConcept(value).build().definitionCodeableConcept());
    }

    @Test
    public void testDefinitionExpression() {
        final Expression value = Expression.create().build();
        assertEquals(value, EvidenceVariable.EvidenceVariableCharacteristic.create().definitionExpression(value).build().definitionExpression());
    }

    @Test
    public void testDefinitionDataRequirement() {
        final DataRequirement value = DataRequirement.create().build();
        assertEquals(value, EvidenceVariable.EvidenceVariableCharacteristic.create().definitionDataRequirement(value).build().definitionDataRequirement());
    }

    @Test
    public void testDefinitionTriggerDefinition() {
        final TriggerDefinition value = TriggerDefinition.create().build();
        assertEquals(value, EvidenceVariable.EvidenceVariableCharacteristic.create().definitionTriggerDefinition(value).build().definitionTriggerDefinition());
    }

    @Test
    public void testUsageContext() {
        final java.util.List<UsageContext> value = java.util.Collections.emptyList();
        assertEquals(value, EvidenceVariable.EvidenceVariableCharacteristic.create().usageContext(value).build().usageContext());
    }

    @Test
    public void testExclude() {
        assertEquals(true, EvidenceVariable.EvidenceVariableCharacteristic.create().exclude(true).build().exclude());
    }

    @Test
    public void testParticipantEffectiveDateTime() {
        assertEquals("x", EvidenceVariable.EvidenceVariableCharacteristic.create().participantEffectiveDateTime("x").build().participantEffectiveDateTime());
    }

    @Test
    public void testParticipantEffectivePeriod() {
        final Period value = Period.create().build();
        assertEquals(value, EvidenceVariable.EvidenceVariableCharacteristic.create().participantEffectivePeriod(value).build().participantEffectivePeriod());
    }

    @Test
    public void testParticipantEffectiveDuration() {
        final Duration value = Duration.create().build();
    assertEquals(value,
            EvidenceVariable.EvidenceVariableCharacteristic.create().participantEffectiveDuration(value).build().participantEffectiveDuration());
    }

    @Test
    public void testParticipantEffectiveTiming() {
        final Timing value = Timing.create().build();
        assertEquals(value, EvidenceVariable.EvidenceVariableCharacteristic.create().participantEffectiveTiming(value).build().participantEffectiveTiming());
    }

    @Test
    public void testTimeFromStart() {
        final Duration value = Duration.create().build();
        assertEquals(value, EvidenceVariable.EvidenceVariableCharacteristic.create().timeFromStart(value).build().timeFromStart());
    }

    @Test
    public void testGroupMeasure() {
        assertEquals("x", EvidenceVariable.EvidenceVariableCharacteristic.create().groupMeasure("x").build().groupMeasure());
    }
}
