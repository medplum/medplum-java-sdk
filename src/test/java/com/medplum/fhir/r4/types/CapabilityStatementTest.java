/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class CapabilityStatementTest {

    @Test
    public void testConstructor() {
        assertNotNull(new CapabilityStatement(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(CapabilityStatement.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final CapabilityStatement x = CapabilityStatement.create().build();
        final CapabilityStatement y = CapabilityStatement.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", CapabilityStatement.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, CapabilityStatement.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, CapabilityStatement.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", CapabilityStatement.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, CapabilityStatement.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, CapabilityStatement.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, CapabilityStatement.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, CapabilityStatement.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testUrl() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, CapabilityStatement.create().url(value).build().url());
    }

    @Test
    public void testVersion() {
        assertEquals("x", CapabilityStatement.create().version("x").build().version());
    }

    @Test
    public void testName() {
        assertEquals("x", CapabilityStatement.create().name("x").build().name());
    }

    @Test
    public void testTitle() {
        assertEquals("x", CapabilityStatement.create().title("x").build().title());
    }

    @Test
    public void testStatus() {
        assertEquals("x", CapabilityStatement.create().status("x").build().status());
    }

    @Test
    public void testExperimental() {
        assertEquals(true, CapabilityStatement.create().experimental(true).build().experimental());
    }

    @Test
    public void testDate() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, CapabilityStatement.create().date(value).build().date());
    }

    @Test
    public void testPublisher() {
        assertEquals("x", CapabilityStatement.create().publisher("x").build().publisher());
    }

    @Test
    public void testContact() {
        final java.util.List<ContactDetail> value = java.util.Collections.emptyList();
        assertEquals(value, CapabilityStatement.create().contact(value).build().contact());
    }

    @Test
    public void testDescription() {
        assertEquals("x", CapabilityStatement.create().description("x").build().description());
    }

    @Test
    public void testUseContext() {
        final java.util.List<UsageContext> value = java.util.Collections.emptyList();
        assertEquals(value, CapabilityStatement.create().useContext(value).build().useContext());
    }

    @Test
    public void testJurisdiction() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, CapabilityStatement.create().jurisdiction(value).build().jurisdiction());
    }

    @Test
    public void testPurpose() {
        assertEquals("x", CapabilityStatement.create().purpose("x").build().purpose());
    }

    @Test
    public void testCopyright() {
        assertEquals("x", CapabilityStatement.create().copyright("x").build().copyright());
    }

    @Test
    public void testKind() {
        assertEquals("x", CapabilityStatement.create().kind("x").build().kind());
    }

    @Test
    public void testInstantiates() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, CapabilityStatement.create().instantiates(value).build().instantiates());
    }

    @Test
    public void testImports() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, CapabilityStatement.create().imports(value).build().imports());
    }

    @Test
    public void testSoftware() {
        final CapabilityStatement.CapabilityStatementSoftware value = CapabilityStatement.CapabilityStatementSoftware.create().build();
        assertEquals(value, CapabilityStatement.create().software(value).build().software());
    }

    @Test
    public void testImplementation() {
        final CapabilityStatement.CapabilityStatementImplementation value = CapabilityStatement.CapabilityStatementImplementation.create().build();
        assertEquals(value, CapabilityStatement.create().implementation(value).build().implementation());
    }

    @Test
    public void testFhirVersion() {
        assertEquals("x", CapabilityStatement.create().fhirVersion("x").build().fhirVersion());
    }

    @Test
    public void testFormat() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, CapabilityStatement.create().format(value).build().format());
    }

    @Test
    public void testPatchFormat() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, CapabilityStatement.create().patchFormat(value).build().patchFormat());
    }

    @Test
    public void testImplementationGuide() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, CapabilityStatement.create().implementationGuide(value).build().implementationGuide());
    }

    @Test
    public void testRest() {
        final java.util.List<CapabilityStatement.CapabilityStatementRest> value = java.util.Collections.emptyList();
        assertEquals(value, CapabilityStatement.create().rest(value).build().rest());
    }

    @Test
    public void testMessaging() {
        final java.util.List<CapabilityStatement.CapabilityStatementMessaging> value = java.util.Collections.emptyList();
        assertEquals(value, CapabilityStatement.create().messaging(value).build().messaging());
    }

    @Test
    public void testDocument() {
        final java.util.List<CapabilityStatement.CapabilityStatementDocument> value = java.util.Collections.emptyList();
        assertEquals(value, CapabilityStatement.create().document(value).build().document());
    }
}
