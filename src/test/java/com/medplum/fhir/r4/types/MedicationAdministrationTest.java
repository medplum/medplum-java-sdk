/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class MedicationAdministrationTest {

    @Test
    public void testConstructor() {
        assertNotNull(new MedicationAdministration(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(MedicationAdministration.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final MedicationAdministration x = MedicationAdministration.create().build();
        final MedicationAdministration y = MedicationAdministration.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", MedicationAdministration.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, MedicationAdministration.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, MedicationAdministration.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", MedicationAdministration.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, MedicationAdministration.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, MedicationAdministration.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, MedicationAdministration.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, MedicationAdministration.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, MedicationAdministration.create().identifier(value).build().identifier());
    }

    @Test
    public void testInstantiates() {
        final java.util.List<java.net.URI> value = java.util.Collections.emptyList();
        assertEquals(value, MedicationAdministration.create().instantiates(value).build().instantiates());
    }

    @Test
    public void testPartOf() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, MedicationAdministration.create().partOf(value).build().partOf());
    }

    @Test
    public void testStatus() {
        assertEquals("x", MedicationAdministration.create().status("x").build().status());
    }

    @Test
    public void testStatusReason() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, MedicationAdministration.create().statusReason(value).build().statusReason());
    }

    @Test
    public void testCategory() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, MedicationAdministration.create().category(value).build().category());
    }

    @Test
    public void testMedicationCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, MedicationAdministration.create().medicationCodeableConcept(value).build().medicationCodeableConcept());
    }

    @Test
    public void testMedicationReference() {
        final Reference value = Reference.create().build();
        assertEquals(value, MedicationAdministration.create().medicationReference(value).build().medicationReference());
    }

    @Test
    public void testSubject() {
        final Reference value = Reference.create().build();
        assertEquals(value, MedicationAdministration.create().subject(value).build().subject());
    }

    @Test
    public void testContext() {
        final Reference value = Reference.create().build();
        assertEquals(value, MedicationAdministration.create().context(value).build().context());
    }

    @Test
    public void testSupportingInformation() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, MedicationAdministration.create().supportingInformation(value).build().supportingInformation());
    }

    @Test
    public void testEffectiveDateTime() {
        assertEquals("x", MedicationAdministration.create().effectiveDateTime("x").build().effectiveDateTime());
    }

    @Test
    public void testEffectivePeriod() {
        final Period value = Period.create().build();
        assertEquals(value, MedicationAdministration.create().effectivePeriod(value).build().effectivePeriod());
    }

    @Test
    public void testPerformer() {
        final java.util.List<MedicationAdministration.MedicationAdministrationPerformer> value = java.util.Collections.emptyList();
        assertEquals(value, MedicationAdministration.create().performer(value).build().performer());
    }

    @Test
    public void testReasonCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, MedicationAdministration.create().reasonCode(value).build().reasonCode());
    }

    @Test
    public void testReasonReference() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, MedicationAdministration.create().reasonReference(value).build().reasonReference());
    }

    @Test
    public void testRequest() {
        final Reference value = Reference.create().build();
        assertEquals(value, MedicationAdministration.create().request(value).build().request());
    }

    @Test
    public void testDevice() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, MedicationAdministration.create().device(value).build().device());
    }

    @Test
    public void testNote() {
        final java.util.List<Annotation> value = java.util.Collections.emptyList();
        assertEquals(value, MedicationAdministration.create().note(value).build().note());
    }

    @Test
    public void testDosage() {
        final MedicationAdministration.MedicationAdministrationDosage value = MedicationAdministration.MedicationAdministrationDosage.create().build();
        assertEquals(value, MedicationAdministration.create().dosage(value).build().dosage());
    }

    @Test
    public void testEventHistory() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, MedicationAdministration.create().eventHistory(value).build().eventHistory());
    }
}
