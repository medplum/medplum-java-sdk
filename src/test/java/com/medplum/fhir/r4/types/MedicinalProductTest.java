/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class MedicinalProductTest {

    @Test
    public void testConstructor() {
        assertNotNull(new MedicinalProduct(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(MedicinalProduct.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final MedicinalProduct x = MedicinalProduct.create().build();
        final MedicinalProduct y = MedicinalProduct.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", MedicinalProduct.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, MedicinalProduct.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, MedicinalProduct.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", MedicinalProduct.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, MedicinalProduct.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.create().identifier(value).build().identifier());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, MedicinalProduct.create().type(value).build().type());
    }

    @Test
    public void testDomain() {
        final Coding value = Coding.create().build();
        assertEquals(value, MedicinalProduct.create().domain(value).build().domain());
    }

    @Test
    public void testCombinedPharmaceuticalDoseForm() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, MedicinalProduct.create().combinedPharmaceuticalDoseForm(value).build().combinedPharmaceuticalDoseForm());
    }

    @Test
    public void testLegalStatusOfSupply() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, MedicinalProduct.create().legalStatusOfSupply(value).build().legalStatusOfSupply());
    }

    @Test
    public void testAdditionalMonitoringIndicator() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, MedicinalProduct.create().additionalMonitoringIndicator(value).build().additionalMonitoringIndicator());
    }

    @Test
    public void testSpecialMeasures() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.create().specialMeasures(value).build().specialMeasures());
    }

    @Test
    public void testPaediatricUseIndicator() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, MedicinalProduct.create().paediatricUseIndicator(value).build().paediatricUseIndicator());
    }

    @Test
    public void testProductClassification() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.create().productClassification(value).build().productClassification());
    }

    @Test
    public void testMarketingStatus() {
        final java.util.List<MarketingStatus> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.create().marketingStatus(value).build().marketingStatus());
    }

    @Test
    public void testPharmaceuticalProduct() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.create().pharmaceuticalProduct(value).build().pharmaceuticalProduct());
    }

    @Test
    public void testPackagedMedicinalProduct() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.create().packagedMedicinalProduct(value).build().packagedMedicinalProduct());
    }

    @Test
    public void testAttachedDocument() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.create().attachedDocument(value).build().attachedDocument());
    }

    @Test
    public void testMasterFile() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.create().masterFile(value).build().masterFile());
    }

    @Test
    public void testContact() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.create().contact(value).build().contact());
    }

    @Test
    public void testClinicalTrial() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.create().clinicalTrial(value).build().clinicalTrial());
    }

    @Test
    public void testName() {
        final java.util.List<MedicinalProduct.MedicinalProductName> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.create().name(value).build().name());
    }

    @Test
    public void testCrossReference() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.create().crossReference(value).build().crossReference());
    }

    @Test
    public void testManufacturingBusinessOperation() {
        final java.util.List<MedicinalProduct.MedicinalProductManufacturingBusinessOperation> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.create().manufacturingBusinessOperation(value).build().manufacturingBusinessOperation());
    }

    @Test
    public void testSpecialDesignation() {
        final java.util.List<MedicinalProduct.MedicinalProductSpecialDesignation> value = java.util.Collections.emptyList();
        assertEquals(value, MedicinalProduct.create().specialDesignation(value).build().specialDesignation());
    }
}
