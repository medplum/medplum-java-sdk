/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class LocationTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Location(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Location.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Location x = Location.create().build();
        final Location y = Location.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Location.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, Location.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, Location.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", Location.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, Location.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, Location.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Location.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Location.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, Location.create().identifier(value).build().identifier());
    }

    @Test
    public void testStatus() {
        assertEquals("x", Location.create().status("x").build().status());
    }

    @Test
    public void testOperationalStatus() {
        final Coding value = Coding.create().build();
        assertEquals(value, Location.create().operationalStatus(value).build().operationalStatus());
    }

    @Test
    public void testName() {
        assertEquals("x", Location.create().name("x").build().name());
    }

    @Test
    public void testAlias() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, Location.create().alias(value).build().alias());
    }

    @Test
    public void testDescription() {
        assertEquals("x", Location.create().description("x").build().description());
    }

    @Test
    public void testMode() {
        assertEquals("x", Location.create().mode("x").build().mode());
    }

    @Test
    public void testType() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Location.create().type(value).build().type());
    }

    @Test
    public void testTelecom() {
        final java.util.List<ContactPoint> value = java.util.Collections.emptyList();
        assertEquals(value, Location.create().telecom(value).build().telecom());
    }

    @Test
    public void testAddress() {
        final Address value = Address.create().build();
        assertEquals(value, Location.create().address(value).build().address());
    }

    @Test
    public void testPhysicalType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Location.create().physicalType(value).build().physicalType());
    }

    @Test
    public void testPosition() {
        final Location.LocationPosition value = Location.LocationPosition.create().build();
        assertEquals(value, Location.create().position(value).build().position());
    }

    @Test
    public void testManagingOrganization() {
        final Reference value = Reference.create().build();
        assertEquals(value, Location.create().managingOrganization(value).build().managingOrganization());
    }

    @Test
    public void testPartOf() {
        final Reference value = Reference.create().build();
        assertEquals(value, Location.create().partOf(value).build().partOf());
    }

    @Test
    public void testHoursOfOperation() {
        final java.util.List<Location.LocationHoursOfOperation> value = java.util.Collections.emptyList();
        assertEquals(value, Location.create().hoursOfOperation(value).build().hoursOfOperation());
    }

    @Test
    public void testAvailabilityExceptions() {
        assertEquals("x", Location.create().availabilityExceptions("x").build().availabilityExceptions());
    }

    @Test
    public void testEndpoint() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Location.create().endpoint(value).build().endpoint());
    }
}
