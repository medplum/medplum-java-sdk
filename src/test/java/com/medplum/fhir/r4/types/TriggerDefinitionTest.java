/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class TriggerDefinitionTest {

    @Test
    public void testConstructor() {
        assertNotNull(new TriggerDefinition(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(TriggerDefinition.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final TriggerDefinition x = TriggerDefinition.create().build();
        final TriggerDefinition y = TriggerDefinition.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", TriggerDefinition.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, TriggerDefinition.create().extension(value).build().extension());
    }

    @Test
    public void testType() {
        assertEquals("x", TriggerDefinition.create().type("x").build().type());
    }

    @Test
    public void testName() {
        assertEquals("x", TriggerDefinition.create().name("x").build().name());
    }

    @Test
    public void testTimingTiming() {
        final Timing value = Timing.create().build();
        assertEquals(value, TriggerDefinition.create().timingTiming(value).build().timingTiming());
    }

    @Test
    public void testTimingReference() {
        final Reference value = Reference.create().build();
        assertEquals(value, TriggerDefinition.create().timingReference(value).build().timingReference());
    }

    @Test
    public void testTimingDate() {
        assertEquals("x", TriggerDefinition.create().timingDate("x").build().timingDate());
    }

    @Test
    public void testTimingDateTime() {
        assertEquals("x", TriggerDefinition.create().timingDateTime("x").build().timingDateTime());
    }

    @Test
    public void testData() {
        final java.util.List<DataRequirement> value = java.util.Collections.emptyList();
        assertEquals(value, TriggerDefinition.create().data(value).build().data());
    }

    @Test
    public void testCondition() {
        final Expression value = Expression.create().build();
        assertEquals(value, TriggerDefinition.create().condition(value).build().condition());
    }
}
