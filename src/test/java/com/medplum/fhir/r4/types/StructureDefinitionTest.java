/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class StructureDefinitionTest {

    @Test
    public void testConstructor() {
        assertNotNull(new StructureDefinition(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(StructureDefinition.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final StructureDefinition x = StructureDefinition.create().build();
        final StructureDefinition y = StructureDefinition.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", StructureDefinition.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, StructureDefinition.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, StructureDefinition.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", StructureDefinition.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, StructureDefinition.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, StructureDefinition.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, StructureDefinition.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, StructureDefinition.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testUrl() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, StructureDefinition.create().url(value).build().url());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, StructureDefinition.create().identifier(value).build().identifier());
    }

    @Test
    public void testVersion() {
        assertEquals("x", StructureDefinition.create().version("x").build().version());
    }

    @Test
    public void testName() {
        assertEquals("x", StructureDefinition.create().name("x").build().name());
    }

    @Test
    public void testTitle() {
        assertEquals("x", StructureDefinition.create().title("x").build().title());
    }

    @Test
    public void testStatus() {
        assertEquals("x", StructureDefinition.create().status("x").build().status());
    }

    @Test
    public void testExperimental() {
        assertEquals(true, StructureDefinition.create().experimental(true).build().experimental());
    }

    @Test
    public void testDate() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, StructureDefinition.create().date(value).build().date());
    }

    @Test
    public void testPublisher() {
        assertEquals("x", StructureDefinition.create().publisher("x").build().publisher());
    }

    @Test
    public void testContact() {
        final java.util.List<ContactDetail> value = java.util.Collections.emptyList();
        assertEquals(value, StructureDefinition.create().contact(value).build().contact());
    }

    @Test
    public void testDescription() {
        assertEquals("x", StructureDefinition.create().description("x").build().description());
    }

    @Test
    public void testUseContext() {
        final java.util.List<UsageContext> value = java.util.Collections.emptyList();
        assertEquals(value, StructureDefinition.create().useContext(value).build().useContext());
    }

    @Test
    public void testJurisdiction() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, StructureDefinition.create().jurisdiction(value).build().jurisdiction());
    }

    @Test
    public void testPurpose() {
        assertEquals("x", StructureDefinition.create().purpose("x").build().purpose());
    }

    @Test
    public void testCopyright() {
        assertEquals("x", StructureDefinition.create().copyright("x").build().copyright());
    }

    @Test
    public void testKeyword() {
        final java.util.List<Coding> value = java.util.Collections.emptyList();
        assertEquals(value, StructureDefinition.create().keyword(value).build().keyword());
    }

    @Test
    public void testFhirVersion() {
        assertEquals("x", StructureDefinition.create().fhirVersion("x").build().fhirVersion());
    }

    @Test
    public void testMapping() {
        final java.util.List<StructureDefinition.StructureDefinitionMapping> value = java.util.Collections.emptyList();
        assertEquals(value, StructureDefinition.create().mapping(value).build().mapping());
    }

    @Test
    public void testKind() {
        assertEquals("x", StructureDefinition.create().kind("x").build().kind());
    }

    @Test
    public void testAbstractValue() {
        assertEquals(true, StructureDefinition.create().abstractValue(true).build().abstractValue());
    }

    @Test
    public void testContext() {
        final java.util.List<StructureDefinition.StructureDefinitionContext> value = java.util.Collections.emptyList();
        assertEquals(value, StructureDefinition.create().context(value).build().context());
    }

    @Test
    public void testContextInvariant() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, StructureDefinition.create().contextInvariant(value).build().contextInvariant());
    }

    @Test
    public void testType() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, StructureDefinition.create().type(value).build().type());
    }

    @Test
    public void testBaseDefinition() {
        assertEquals("x", StructureDefinition.create().baseDefinition("x").build().baseDefinition());
    }

    @Test
    public void testDerivation() {
        assertEquals("x", StructureDefinition.create().derivation("x").build().derivation());
    }

    @Test
    public void testSnapshot() {
        final StructureDefinition.StructureDefinitionSnapshot value = StructureDefinition.StructureDefinitionSnapshot.create().build();
        assertEquals(value, StructureDefinition.create().snapshot(value).build().snapshot());
    }

    @Test
    public void testDifferential() {
        final StructureDefinition.StructureDefinitionDifferential value = StructureDefinition.StructureDefinitionDifferential.create().build();
        assertEquals(value, StructureDefinition.create().differential(value).build().differential());
    }
}
