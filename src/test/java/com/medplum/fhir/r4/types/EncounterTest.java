/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class EncounterTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Encounter(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Encounter.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Encounter x = Encounter.create().build();
        final Encounter y = Encounter.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Encounter.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, Encounter.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, Encounter.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", Encounter.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, Encounter.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.create().identifier(value).build().identifier());
    }

    @Test
    public void testStatus() {
        assertEquals("x", Encounter.create().status("x").build().status());
    }

    @Test
    public void testStatusHistory() {
        final java.util.List<Encounter.EncounterStatusHistory> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.create().statusHistory(value).build().statusHistory());
    }

    @Test
    public void testClassValue() {
        final Coding value = Coding.create().build();
        assertEquals(value, Encounter.create().classValue(value).build().classValue());
    }

    @Test
    public void testClassHistory() {
        final java.util.List<Encounter.EncounterClassHistory> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.create().classHistory(value).build().classHistory());
    }

    @Test
    public void testType() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.create().type(value).build().type());
    }

    @Test
    public void testServiceType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Encounter.create().serviceType(value).build().serviceType());
    }

    @Test
    public void testPriority() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Encounter.create().priority(value).build().priority());
    }

    @Test
    public void testSubject() {
        final Reference value = Reference.create().build();
        assertEquals(value, Encounter.create().subject(value).build().subject());
    }

    @Test
    public void testEpisodeOfCare() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.create().episodeOfCare(value).build().episodeOfCare());
    }

    @Test
    public void testBasedOn() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.create().basedOn(value).build().basedOn());
    }

    @Test
    public void testParticipant() {
        final java.util.List<Encounter.EncounterParticipant> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.create().participant(value).build().participant());
    }

    @Test
    public void testAppointment() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.create().appointment(value).build().appointment());
    }

    @Test
    public void testPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, Encounter.create().period(value).build().period());
    }

    @Test
    public void testLength() {
        final Duration value = Duration.create().build();
        assertEquals(value, Encounter.create().length(value).build().length());
    }

    @Test
    public void testReasonCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.create().reasonCode(value).build().reasonCode());
    }

    @Test
    public void testReasonReference() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.create().reasonReference(value).build().reasonReference());
    }

    @Test
    public void testDiagnosis() {
        final java.util.List<Encounter.EncounterDiagnosis> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.create().diagnosis(value).build().diagnosis());
    }

    @Test
    public void testAccount() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.create().account(value).build().account());
    }

    @Test
    public void testHospitalization() {
        final Encounter.EncounterHospitalization value = Encounter.EncounterHospitalization.create().build();
        assertEquals(value, Encounter.create().hospitalization(value).build().hospitalization());
    }

    @Test
    public void testLocation() {
        final java.util.List<Encounter.EncounterLocation> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.create().location(value).build().location());
    }

    @Test
    public void testServiceProvider() {
        final Reference value = Reference.create().build();
        assertEquals(value, Encounter.create().serviceProvider(value).build().serviceProvider());
    }

    @Test
    public void testPartOf() {
        final Reference value = Reference.create().build();
        assertEquals(value, Encounter.create().partOf(value).build().partOf());
    }
}
