/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ContractValuedItemTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Contract.ContractValuedItem(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Contract.ContractValuedItem.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Contract.ContractValuedItem x = Contract.ContractValuedItem.create().build();
        final Contract.ContractValuedItem y = Contract.ContractValuedItem.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Contract.ContractValuedItem.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractValuedItem.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractValuedItem.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testEntityCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Contract.ContractValuedItem.create().entityCodeableConcept(value).build().entityCodeableConcept());
    }

    @Test
    public void testEntityReference() {
        final Reference value = Reference.create().build();
        assertEquals(value, Contract.ContractValuedItem.create().entityReference(value).build().entityReference());
    }

    @Test
    public void testIdentifier() {
        final Identifier value = Identifier.create().build();
        assertEquals(value, Contract.ContractValuedItem.create().identifier(value).build().identifier());
    }

    @Test
    public void testEffectiveTime() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, Contract.ContractValuedItem.create().effectiveTime(value).build().effectiveTime());
    }

    @Test
    public void testQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, Contract.ContractValuedItem.create().quantity(value).build().quantity());
    }

    @Test
    public void testUnitPrice() {
        final Money value = Money.create().build();
        assertEquals(value, Contract.ContractValuedItem.create().unitPrice(value).build().unitPrice());
    }

    @Test
    public void testFactor() {
        assertEquals(1.0, Contract.ContractValuedItem.create().factor(1.0).build().factor());
    }

    @Test
    public void testPoints() {
        assertEquals(1.0, Contract.ContractValuedItem.create().points(1.0).build().points());
    }

    @Test
    public void testNet() {
        final Money value = Money.create().build();
        assertEquals(value, Contract.ContractValuedItem.create().net(value).build().net());
    }

    @Test
    public void testPayment() {
        assertEquals("x", Contract.ContractValuedItem.create().payment("x").build().payment());
    }

    @Test
    public void testPaymentDate() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, Contract.ContractValuedItem.create().paymentDate(value).build().paymentDate());
    }

    @Test
    public void testResponsible() {
        final Reference value = Reference.create().build();
        assertEquals(value, Contract.ContractValuedItem.create().responsible(value).build().responsible());
    }

    @Test
    public void testRecipient() {
        final Reference value = Reference.create().build();
        assertEquals(value, Contract.ContractValuedItem.create().recipient(value).build().recipient());
    }

    @Test
    public void testLinkId() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractValuedItem.create().linkId(value).build().linkId());
    }

    @Test
    public void testSecurityLabelNumber() {
        final java.util.List<Integer> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractValuedItem.create().securityLabelNumber(value).build().securityLabelNumber());
    }
}
