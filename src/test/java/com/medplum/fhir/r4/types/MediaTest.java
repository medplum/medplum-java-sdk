/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class MediaTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Media(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Media.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Media x = Media.create().build();
        final Media y = Media.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Media.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, Media.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, Media.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", Media.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, Media.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, Media.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Media.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Media.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, Media.create().identifier(value).build().identifier());
    }

    @Test
    public void testBasedOn() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Media.create().basedOn(value).build().basedOn());
    }

    @Test
    public void testPartOf() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Media.create().partOf(value).build().partOf());
    }

    @Test
    public void testStatus() {
        assertEquals("x", Media.create().status("x").build().status());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Media.create().type(value).build().type());
    }

    @Test
    public void testModality() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Media.create().modality(value).build().modality());
    }

    @Test
    public void testView() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Media.create().view(value).build().view());
    }

    @Test
    public void testSubject() {
        final Reference value = Reference.create().build();
        assertEquals(value, Media.create().subject(value).build().subject());
    }

    @Test
    public void testEncounter() {
        final Reference value = Reference.create().build();
        assertEquals(value, Media.create().encounter(value).build().encounter());
    }

    @Test
    public void testCreatedDateTime() {
        assertEquals("x", Media.create().createdDateTime("x").build().createdDateTime());
    }

    @Test
    public void testCreatedPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, Media.create().createdPeriod(value).build().createdPeriod());
    }

    @Test
    public void testIssued() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, Media.create().issued(value).build().issued());
    }

    @Test
    public void testOperator() {
        final Reference value = Reference.create().build();
        assertEquals(value, Media.create().operator(value).build().operator());
    }

    @Test
    public void testReasonCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Media.create().reasonCode(value).build().reasonCode());
    }

    @Test
    public void testBodySite() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Media.create().bodySite(value).build().bodySite());
    }

    @Test
    public void testDeviceName() {
        assertEquals("x", Media.create().deviceName("x").build().deviceName());
    }

    @Test
    public void testDevice() {
        final Reference value = Reference.create().build();
        assertEquals(value, Media.create().device(value).build().device());
    }

    @Test
    public void testHeight() {
        assertEquals(1, Media.create().height(1).build().height());
    }

    @Test
    public void testWidth() {
        assertEquals(1, Media.create().width(1).build().width());
    }

    @Test
    public void testFrames() {
        assertEquals(1, Media.create().frames(1).build().frames());
    }

    @Test
    public void testDuration() {
        assertEquals(1.0, Media.create().duration(1.0).build().duration());
    }

    @Test
    public void testContent() {
        final Attachment value = Attachment.create().build();
        assertEquals(value, Media.create().content(value).build().content());
    }

    @Test
    public void testNote() {
        final java.util.List<Annotation> value = java.util.Collections.emptyList();
        assertEquals(value, Media.create().note(value).build().note());
    }
}
