/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class MolecularSequenceTest {

    @Test
    public void testConstructor() {
        assertNotNull(new MolecularSequence(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(MolecularSequence.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final MolecularSequence x = MolecularSequence.create().build();
        final MolecularSequence y = MolecularSequence.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", MolecularSequence.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, MolecularSequence.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, MolecularSequence.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", MolecularSequence.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, MolecularSequence.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, MolecularSequence.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, MolecularSequence.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, MolecularSequence.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, MolecularSequence.create().identifier(value).build().identifier());
    }

    @Test
    public void testType() {
        assertEquals("x", MolecularSequence.create().type("x").build().type());
    }

    @Test
    public void testCoordinateSystem() {
        assertEquals(1, MolecularSequence.create().coordinateSystem(1).build().coordinateSystem());
    }

    @Test
    public void testPatient() {
        final Reference value = Reference.create().build();
        assertEquals(value, MolecularSequence.create().patient(value).build().patient());
    }

    @Test
    public void testSpecimen() {
        final Reference value = Reference.create().build();
        assertEquals(value, MolecularSequence.create().specimen(value).build().specimen());
    }

    @Test
    public void testDevice() {
        final Reference value = Reference.create().build();
        assertEquals(value, MolecularSequence.create().device(value).build().device());
    }

    @Test
    public void testPerformer() {
        final Reference value = Reference.create().build();
        assertEquals(value, MolecularSequence.create().performer(value).build().performer());
    }

    @Test
    public void testQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, MolecularSequence.create().quantity(value).build().quantity());
    }

    @Test
    public void testReferenceSeq() {
        final MolecularSequence.MolecularSequenceReferenceSeq value = MolecularSequence.MolecularSequenceReferenceSeq.create().build();
        assertEquals(value, MolecularSequence.create().referenceSeq(value).build().referenceSeq());
    }

    @Test
    public void testVariant() {
        final java.util.List<MolecularSequence.MolecularSequenceVariant> value = java.util.Collections.emptyList();
        assertEquals(value, MolecularSequence.create().variant(value).build().variant());
    }

    @Test
    public void testObservedSeq() {
        assertEquals("x", MolecularSequence.create().observedSeq("x").build().observedSeq());
    }

    @Test
    public void testQuality() {
        final java.util.List<MolecularSequence.MolecularSequenceQuality> value = java.util.Collections.emptyList();
        assertEquals(value, MolecularSequence.create().quality(value).build().quality());
    }

    @Test
    public void testReadCoverage() {
        assertEquals(1, MolecularSequence.create().readCoverage(1).build().readCoverage());
    }

    @Test
    public void testRepository() {
        final java.util.List<MolecularSequence.MolecularSequenceRepository> value = java.util.Collections.emptyList();
        assertEquals(value, MolecularSequence.create().repository(value).build().repository());
    }

    @Test
    public void testPointer() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, MolecularSequence.create().pointer(value).build().pointer());
    }

    @Test
    public void testStructureVariant() {
        final java.util.List<MolecularSequence.MolecularSequenceStructureVariant> value = java.util.Collections.emptyList();
        assertEquals(value, MolecularSequence.create().structureVariant(value).build().structureVariant());
    }
}
