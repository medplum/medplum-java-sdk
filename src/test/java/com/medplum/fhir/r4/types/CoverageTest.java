/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class CoverageTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Coverage(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Coverage.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Coverage x = Coverage.create().build();
        final Coverage y = Coverage.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Coverage.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, Coverage.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, Coverage.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", Coverage.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, Coverage.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, Coverage.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Coverage.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Coverage.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, Coverage.create().identifier(value).build().identifier());
    }

    @Test
    public void testStatus() {
        assertEquals("x", Coverage.create().status("x").build().status());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Coverage.create().type(value).build().type());
    }

    @Test
    public void testPolicyHolder() {
        final Reference value = Reference.create().build();
        assertEquals(value, Coverage.create().policyHolder(value).build().policyHolder());
    }

    @Test
    public void testSubscriber() {
        final Reference value = Reference.create().build();
        assertEquals(value, Coverage.create().subscriber(value).build().subscriber());
    }

    @Test
    public void testSubscriberId() {
        assertEquals("x", Coverage.create().subscriberId("x").build().subscriberId());
    }

    @Test
    public void testBeneficiary() {
        final Reference value = Reference.create().build();
        assertEquals(value, Coverage.create().beneficiary(value).build().beneficiary());
    }

    @Test
    public void testDependent() {
        assertEquals("x", Coverage.create().dependent("x").build().dependent());
    }

    @Test
    public void testRelationship() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Coverage.create().relationship(value).build().relationship());
    }

    @Test
    public void testPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, Coverage.create().period(value).build().period());
    }

    @Test
    public void testPayor() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Coverage.create().payor(value).build().payor());
    }

    @Test
    public void testClassValue() {
        final java.util.List<Coverage.CoverageClass> value = java.util.Collections.emptyList();
        assertEquals(value, Coverage.create().classValue(value).build().classValue());
    }

    @Test
    public void testOrder() {
        assertEquals(1, Coverage.create().order(1).build().order());
    }

    @Test
    public void testNetwork() {
        assertEquals("x", Coverage.create().network("x").build().network());
    }

    @Test
    public void testCostToBeneficiary() {
        final java.util.List<Coverage.CoverageCostToBeneficiary> value = java.util.Collections.emptyList();
        assertEquals(value, Coverage.create().costToBeneficiary(value).build().costToBeneficiary());
    }

    @Test
    public void testSubrogation() {
        assertEquals(true, Coverage.create().subrogation(true).build().subrogation());
    }

    @Test
    public void testContract() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Coverage.create().contract(value).build().contract());
    }
}
