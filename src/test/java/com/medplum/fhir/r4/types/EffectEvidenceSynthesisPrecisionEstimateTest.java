/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class EffectEvidenceSynthesisPrecisionEstimateTest {

    @Test
    public void testConstructor() {
        assertNotNull(new EffectEvidenceSynthesis.EffectEvidenceSynthesisPrecisionEstimate(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(EffectEvidenceSynthesis.EffectEvidenceSynthesisPrecisionEstimate.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
    final EffectEvidenceSynthesis.EffectEvidenceSynthesisPrecisionEstimate x =
            EffectEvidenceSynthesis.EffectEvidenceSynthesisPrecisionEstimate.create().build();
    final EffectEvidenceSynthesis.EffectEvidenceSynthesisPrecisionEstimate y =
            EffectEvidenceSynthesis.EffectEvidenceSynthesisPrecisionEstimate.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", EffectEvidenceSynthesis.EffectEvidenceSynthesisPrecisionEstimate.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, EffectEvidenceSynthesis.EffectEvidenceSynthesisPrecisionEstimate.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, EffectEvidenceSynthesis.EffectEvidenceSynthesisPrecisionEstimate.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, EffectEvidenceSynthesis.EffectEvidenceSynthesisPrecisionEstimate.create().type(value).build().type());
    }

    @Test
    public void testLevel() {
        assertEquals(1.0, EffectEvidenceSynthesis.EffectEvidenceSynthesisPrecisionEstimate.create().level(1.0).build().level());
    }

    @Test
    public void testFrom() {
        assertEquals(1.0, EffectEvidenceSynthesis.EffectEvidenceSynthesisPrecisionEstimate.create().from(1.0).build().from());
    }

    @Test
    public void testTo() {
        assertEquals(1.0, EffectEvidenceSynthesis.EffectEvidenceSynthesisPrecisionEstimate.create().to(1.0).build().to());
    }
}
