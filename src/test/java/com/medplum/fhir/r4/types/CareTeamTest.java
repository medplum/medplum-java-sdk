/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class CareTeamTest {

    @Test
    public void testConstructor() {
        assertNotNull(new CareTeam(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(CareTeam.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final CareTeam x = CareTeam.create().build();
        final CareTeam y = CareTeam.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", CareTeam.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, CareTeam.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, CareTeam.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", CareTeam.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, CareTeam.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, CareTeam.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, CareTeam.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, CareTeam.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, CareTeam.create().identifier(value).build().identifier());
    }

    @Test
    public void testStatus() {
        assertEquals("x", CareTeam.create().status("x").build().status());
    }

    @Test
    public void testCategory() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, CareTeam.create().category(value).build().category());
    }

    @Test
    public void testName() {
        assertEquals("x", CareTeam.create().name("x").build().name());
    }

    @Test
    public void testSubject() {
        final Reference value = Reference.create().build();
        assertEquals(value, CareTeam.create().subject(value).build().subject());
    }

    @Test
    public void testEncounter() {
        final Reference value = Reference.create().build();
        assertEquals(value, CareTeam.create().encounter(value).build().encounter());
    }

    @Test
    public void testPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, CareTeam.create().period(value).build().period());
    }

    @Test
    public void testParticipant() {
        final java.util.List<CareTeam.CareTeamParticipant> value = java.util.Collections.emptyList();
        assertEquals(value, CareTeam.create().participant(value).build().participant());
    }

    @Test
    public void testReasonCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, CareTeam.create().reasonCode(value).build().reasonCode());
    }

    @Test
    public void testReasonReference() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, CareTeam.create().reasonReference(value).build().reasonReference());
    }

    @Test
    public void testManagingOrganization() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, CareTeam.create().managingOrganization(value).build().managingOrganization());
    }

    @Test
    public void testTelecom() {
        final java.util.List<ContactPoint> value = java.util.Collections.emptyList();
        assertEquals(value, CareTeam.create().telecom(value).build().telecom());
    }

    @Test
    public void testNote() {
        final java.util.List<Annotation> value = java.util.Collections.emptyList();
        assertEquals(value, CareTeam.create().note(value).build().note());
    }
}
