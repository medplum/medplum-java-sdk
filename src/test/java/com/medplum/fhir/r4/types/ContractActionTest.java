/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ContractActionTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Contract.ContractAction(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Contract.ContractAction.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Contract.ContractAction x = Contract.ContractAction.create().build();
        final Contract.ContractAction y = Contract.ContractAction.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Contract.ContractAction.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractAction.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractAction.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testDoNotPerform() {
        assertEquals(true, Contract.ContractAction.create().doNotPerform(true).build().doNotPerform());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Contract.ContractAction.create().type(value).build().type());
    }

    @Test
    public void testSubject() {
        final java.util.List<Contract.ContractSubject> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractAction.create().subject(value).build().subject());
    }

    @Test
    public void testIntent() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Contract.ContractAction.create().intent(value).build().intent());
    }

    @Test
    public void testLinkId() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractAction.create().linkId(value).build().linkId());
    }

    @Test
    public void testStatus() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Contract.ContractAction.create().status(value).build().status());
    }

    @Test
    public void testContext() {
        final Reference value = Reference.create().build();
        assertEquals(value, Contract.ContractAction.create().context(value).build().context());
    }

    @Test
    public void testContextLinkId() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractAction.create().contextLinkId(value).build().contextLinkId());
    }

    @Test
    public void testOccurrenceDateTime() {
        assertEquals("x", Contract.ContractAction.create().occurrenceDateTime("x").build().occurrenceDateTime());
    }

    @Test
    public void testOccurrencePeriod() {
        final Period value = Period.create().build();
        assertEquals(value, Contract.ContractAction.create().occurrencePeriod(value).build().occurrencePeriod());
    }

    @Test
    public void testOccurrenceTiming() {
        final Timing value = Timing.create().build();
        assertEquals(value, Contract.ContractAction.create().occurrenceTiming(value).build().occurrenceTiming());
    }

    @Test
    public void testRequester() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractAction.create().requester(value).build().requester());
    }

    @Test
    public void testRequesterLinkId() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractAction.create().requesterLinkId(value).build().requesterLinkId());
    }

    @Test
    public void testPerformerType() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractAction.create().performerType(value).build().performerType());
    }

    @Test
    public void testPerformerRole() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Contract.ContractAction.create().performerRole(value).build().performerRole());
    }

    @Test
    public void testPerformer() {
        final Reference value = Reference.create().build();
        assertEquals(value, Contract.ContractAction.create().performer(value).build().performer());
    }

    @Test
    public void testPerformerLinkId() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractAction.create().performerLinkId(value).build().performerLinkId());
    }

    @Test
    public void testReasonCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractAction.create().reasonCode(value).build().reasonCode());
    }

    @Test
    public void testReasonReference() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractAction.create().reasonReference(value).build().reasonReference());
    }

    @Test
    public void testReason() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractAction.create().reason(value).build().reason());
    }

    @Test
    public void testReasonLinkId() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractAction.create().reasonLinkId(value).build().reasonLinkId());
    }

    @Test
    public void testNote() {
        final java.util.List<Annotation> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractAction.create().note(value).build().note());
    }

    @Test
    public void testSecurityLabelNumber() {
        final java.util.List<Integer> value = java.util.Collections.emptyList();
        assertEquals(value, Contract.ContractAction.create().securityLabelNumber(value).build().securityLabelNumber());
    }
}
