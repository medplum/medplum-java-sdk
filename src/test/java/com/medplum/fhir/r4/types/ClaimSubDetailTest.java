/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ClaimSubDetailTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Claim.ClaimSubDetail(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Claim.ClaimSubDetail.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Claim.ClaimSubDetail x = Claim.ClaimSubDetail.create().build();
        final Claim.ClaimSubDetail y = Claim.ClaimSubDetail.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Claim.ClaimSubDetail.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Claim.ClaimSubDetail.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Claim.ClaimSubDetail.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testSequence() {
        assertEquals(1, Claim.ClaimSubDetail.create().sequence(1).build().sequence());
    }

    @Test
    public void testRevenue() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Claim.ClaimSubDetail.create().revenue(value).build().revenue());
    }

    @Test
    public void testCategory() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Claim.ClaimSubDetail.create().category(value).build().category());
    }

    @Test
    public void testProductOrService() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Claim.ClaimSubDetail.create().productOrService(value).build().productOrService());
    }

    @Test
    public void testModifier() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Claim.ClaimSubDetail.create().modifier(value).build().modifier());
    }

    @Test
    public void testProgramCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Claim.ClaimSubDetail.create().programCode(value).build().programCode());
    }

    @Test
    public void testQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, Claim.ClaimSubDetail.create().quantity(value).build().quantity());
    }

    @Test
    public void testUnitPrice() {
        final Money value = Money.create().build();
        assertEquals(value, Claim.ClaimSubDetail.create().unitPrice(value).build().unitPrice());
    }

    @Test
    public void testFactor() {
        assertEquals(1.0, Claim.ClaimSubDetail.create().factor(1.0).build().factor());
    }

    @Test
    public void testNet() {
        final Money value = Money.create().build();
        assertEquals(value, Claim.ClaimSubDetail.create().net(value).build().net());
    }

    @Test
    public void testUdi() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Claim.ClaimSubDetail.create().udi(value).build().udi());
    }
}
