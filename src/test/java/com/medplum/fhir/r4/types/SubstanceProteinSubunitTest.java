/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class SubstanceProteinSubunitTest {

    @Test
    public void testConstructor() {
        assertNotNull(new SubstanceProtein.SubstanceProteinSubunit(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(SubstanceProtein.SubstanceProteinSubunit.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final SubstanceProtein.SubstanceProteinSubunit x = SubstanceProtein.SubstanceProteinSubunit.create().build();
        final SubstanceProtein.SubstanceProteinSubunit y = SubstanceProtein.SubstanceProteinSubunit.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", SubstanceProtein.SubstanceProteinSubunit.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceProtein.SubstanceProteinSubunit.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceProtein.SubstanceProteinSubunit.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testSubunit() {
        assertEquals(1, SubstanceProtein.SubstanceProteinSubunit.create().subunit(1).build().subunit());
    }

    @Test
    public void testSequence() {
        assertEquals("x", SubstanceProtein.SubstanceProteinSubunit.create().sequence("x").build().sequence());
    }

    @Test
    public void testLength() {
        assertEquals(1, SubstanceProtein.SubstanceProteinSubunit.create().length(1).build().length());
    }

    @Test
    public void testSequenceAttachment() {
        final Attachment value = Attachment.create().build();
        assertEquals(value, SubstanceProtein.SubstanceProteinSubunit.create().sequenceAttachment(value).build().sequenceAttachment());
    }

    @Test
    public void testNTerminalModificationId() {
        final Identifier value = Identifier.create().build();
        assertEquals(value, SubstanceProtein.SubstanceProteinSubunit.create().nTerminalModificationId(value).build().nTerminalModificationId());
    }

    @Test
    public void testNTerminalModification() {
        assertEquals("x", SubstanceProtein.SubstanceProteinSubunit.create().nTerminalModification("x").build().nTerminalModification());
    }

    @Test
    public void testCTerminalModificationId() {
        final Identifier value = Identifier.create().build();
        assertEquals(value, SubstanceProtein.SubstanceProteinSubunit.create().cTerminalModificationId(value).build().cTerminalModificationId());
    }

    @Test
    public void testCTerminalModification() {
        assertEquals("x", SubstanceProtein.SubstanceProteinSubunit.create().cTerminalModification("x").build().cTerminalModification());
    }
}
