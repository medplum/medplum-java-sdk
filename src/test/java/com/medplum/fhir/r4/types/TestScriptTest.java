/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class TestScriptTest {

    @Test
    public void testConstructor() {
        assertNotNull(new TestScript(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(TestScript.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final TestScript x = TestScript.create().build();
        final TestScript y = TestScript.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", TestScript.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, TestScript.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, TestScript.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", TestScript.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, TestScript.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, TestScript.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, TestScript.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, TestScript.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testUrl() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, TestScript.create().url(value).build().url());
    }

    @Test
    public void testIdentifier() {
        final Identifier value = Identifier.create().build();
        assertEquals(value, TestScript.create().identifier(value).build().identifier());
    }

    @Test
    public void testVersion() {
        assertEquals("x", TestScript.create().version("x").build().version());
    }

    @Test
    public void testName() {
        assertEquals("x", TestScript.create().name("x").build().name());
    }

    @Test
    public void testTitle() {
        assertEquals("x", TestScript.create().title("x").build().title());
    }

    @Test
    public void testStatus() {
        assertEquals("x", TestScript.create().status("x").build().status());
    }

    @Test
    public void testExperimental() {
        assertEquals(true, TestScript.create().experimental(true).build().experimental());
    }

    @Test
    public void testDate() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, TestScript.create().date(value).build().date());
    }

    @Test
    public void testPublisher() {
        assertEquals("x", TestScript.create().publisher("x").build().publisher());
    }

    @Test
    public void testContact() {
        final java.util.List<ContactDetail> value = java.util.Collections.emptyList();
        assertEquals(value, TestScript.create().contact(value).build().contact());
    }

    @Test
    public void testDescription() {
        assertEquals("x", TestScript.create().description("x").build().description());
    }

    @Test
    public void testUseContext() {
        final java.util.List<UsageContext> value = java.util.Collections.emptyList();
        assertEquals(value, TestScript.create().useContext(value).build().useContext());
    }

    @Test
    public void testJurisdiction() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, TestScript.create().jurisdiction(value).build().jurisdiction());
    }

    @Test
    public void testPurpose() {
        assertEquals("x", TestScript.create().purpose("x").build().purpose());
    }

    @Test
    public void testCopyright() {
        assertEquals("x", TestScript.create().copyright("x").build().copyright());
    }

    @Test
    public void testOrigin() {
        final java.util.List<TestScript.TestScriptOrigin> value = java.util.Collections.emptyList();
        assertEquals(value, TestScript.create().origin(value).build().origin());
    }

    @Test
    public void testDestination() {
        final java.util.List<TestScript.TestScriptDestination> value = java.util.Collections.emptyList();
        assertEquals(value, TestScript.create().destination(value).build().destination());
    }

    @Test
    public void testMetadata() {
        final TestScript.TestScriptMetadata value = TestScript.TestScriptMetadata.create().build();
        assertEquals(value, TestScript.create().metadata(value).build().metadata());
    }

    @Test
    public void testFixture() {
        final java.util.List<TestScript.TestScriptFixture> value = java.util.Collections.emptyList();
        assertEquals(value, TestScript.create().fixture(value).build().fixture());
    }

    @Test
    public void testProfile() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, TestScript.create().profile(value).build().profile());
    }

    @Test
    public void testVariable() {
        final java.util.List<TestScript.TestScriptVariable> value = java.util.Collections.emptyList();
        assertEquals(value, TestScript.create().variable(value).build().variable());
    }

    @Test
    public void testSetup() {
        final TestScript.TestScriptSetup value = TestScript.TestScriptSetup.create().build();
        assertEquals(value, TestScript.create().setup(value).build().setup());
    }

    @Test
    public void testTest() {
        final java.util.List<TestScript.TestScriptTest> value = java.util.Collections.emptyList();
        assertEquals(value, TestScript.create().test(value).build().test());
    }

    @Test
    public void testTeardown() {
        final TestScript.TestScriptTeardown value = TestScript.TestScriptTeardown.create().build();
        assertEquals(value, TestScript.create().teardown(value).build().teardown());
    }
}
