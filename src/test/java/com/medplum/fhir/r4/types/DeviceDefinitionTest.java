/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class DeviceDefinitionTest {

    @Test
    public void testConstructor() {
        assertNotNull(new DeviceDefinition(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(DeviceDefinition.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final DeviceDefinition x = DeviceDefinition.create().build();
        final DeviceDefinition y = DeviceDefinition.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", DeviceDefinition.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, DeviceDefinition.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, DeviceDefinition.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", DeviceDefinition.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, DeviceDefinition.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceDefinition.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceDefinition.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceDefinition.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceDefinition.create().identifier(value).build().identifier());
    }

    @Test
    public void testUdiDeviceIdentifier() {
        final java.util.List<DeviceDefinition.DeviceDefinitionUdiDeviceIdentifier> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceDefinition.create().udiDeviceIdentifier(value).build().udiDeviceIdentifier());
    }

    @Test
    public void testManufacturerString() {
        assertEquals("x", DeviceDefinition.create().manufacturerString("x").build().manufacturerString());
    }

    @Test
    public void testManufacturerReference() {
        final Reference value = Reference.create().build();
        assertEquals(value, DeviceDefinition.create().manufacturerReference(value).build().manufacturerReference());
    }

    @Test
    public void testDeviceName() {
        final java.util.List<DeviceDefinition.DeviceDefinitionDeviceName> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceDefinition.create().deviceName(value).build().deviceName());
    }

    @Test
    public void testModelNumber() {
        assertEquals("x", DeviceDefinition.create().modelNumber("x").build().modelNumber());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, DeviceDefinition.create().type(value).build().type());
    }

    @Test
    public void testSpecialization() {
        final java.util.List<DeviceDefinition.DeviceDefinitionSpecialization> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceDefinition.create().specialization(value).build().specialization());
    }

    @Test
    public void testVersion() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceDefinition.create().version(value).build().version());
    }

    @Test
    public void testSafety() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceDefinition.create().safety(value).build().safety());
    }

    @Test
    public void testShelfLifeStorage() {
        final java.util.List<ProductShelfLife> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceDefinition.create().shelfLifeStorage(value).build().shelfLifeStorage());
    }

    @Test
    public void testPhysicalCharacteristics() {
        final ProdCharacteristic value = ProdCharacteristic.create().build();
        assertEquals(value, DeviceDefinition.create().physicalCharacteristics(value).build().physicalCharacteristics());
    }

    @Test
    public void testLanguageCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceDefinition.create().languageCode(value).build().languageCode());
    }

    @Test
    public void testCapability() {
        final java.util.List<DeviceDefinition.DeviceDefinitionCapability> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceDefinition.create().capability(value).build().capability());
    }

    @Test
    public void testProperty() {
        final java.util.List<DeviceDefinition.DeviceDefinitionProperty> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceDefinition.create().property(value).build().property());
    }

    @Test
    public void testOwner() {
        final Reference value = Reference.create().build();
        assertEquals(value, DeviceDefinition.create().owner(value).build().owner());
    }

    @Test
    public void testContact() {
        final java.util.List<ContactPoint> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceDefinition.create().contact(value).build().contact());
    }

    @Test
    public void testUrl() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, DeviceDefinition.create().url(value).build().url());
    }

    @Test
    public void testOnlineInformation() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, DeviceDefinition.create().onlineInformation(value).build().onlineInformation());
    }

    @Test
    public void testNote() {
        final java.util.List<Annotation> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceDefinition.create().note(value).build().note());
    }

    @Test
    public void testQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, DeviceDefinition.create().quantity(value).build().quantity());
    }

    @Test
    public void testParentDevice() {
        final Reference value = Reference.create().build();
        assertEquals(value, DeviceDefinition.create().parentDevice(value).build().parentDevice());
    }

    @Test
    public void testMaterial() {
        final java.util.List<DeviceDefinition.DeviceDefinitionMaterial> value = java.util.Collections.emptyList();
        assertEquals(value, DeviceDefinition.create().material(value).build().material());
    }
}
