/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ExplanationOfBenefitTest {

    @Test
    public void testConstructor() {
        assertNotNull(new ExplanationOfBenefit(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(ExplanationOfBenefit.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final ExplanationOfBenefit x = ExplanationOfBenefit.create().build();
        final ExplanationOfBenefit y = ExplanationOfBenefit.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", ExplanationOfBenefit.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, ExplanationOfBenefit.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, ExplanationOfBenefit.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", ExplanationOfBenefit.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, ExplanationOfBenefit.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().identifier(value).build().identifier());
    }

    @Test
    public void testStatus() {
        assertEquals("x", ExplanationOfBenefit.create().status("x").build().status());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, ExplanationOfBenefit.create().type(value).build().type());
    }

    @Test
    public void testSubType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, ExplanationOfBenefit.create().subType(value).build().subType());
    }

    @Test
    public void testUse() {
        assertEquals("x", ExplanationOfBenefit.create().use("x").build().use());
    }

    @Test
    public void testPatient() {
        final Reference value = Reference.create().build();
        assertEquals(value, ExplanationOfBenefit.create().patient(value).build().patient());
    }

    @Test
    public void testBillablePeriod() {
        final Period value = Period.create().build();
        assertEquals(value, ExplanationOfBenefit.create().billablePeriod(value).build().billablePeriod());
    }

    @Test
    public void testCreated() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, ExplanationOfBenefit.create().created(value).build().created());
    }

    @Test
    public void testEnterer() {
        final Reference value = Reference.create().build();
        assertEquals(value, ExplanationOfBenefit.create().enterer(value).build().enterer());
    }

    @Test
    public void testInsurer() {
        final Reference value = Reference.create().build();
        assertEquals(value, ExplanationOfBenefit.create().insurer(value).build().insurer());
    }

    @Test
    public void testProvider() {
        final Reference value = Reference.create().build();
        assertEquals(value, ExplanationOfBenefit.create().provider(value).build().provider());
    }

    @Test
    public void testPriority() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, ExplanationOfBenefit.create().priority(value).build().priority());
    }

    @Test
    public void testFundsReserveRequested() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, ExplanationOfBenefit.create().fundsReserveRequested(value).build().fundsReserveRequested());
    }

    @Test
    public void testFundsReserve() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, ExplanationOfBenefit.create().fundsReserve(value).build().fundsReserve());
    }

    @Test
    public void testRelated() {
        final java.util.List<ExplanationOfBenefit.ExplanationOfBenefitRelated> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().related(value).build().related());
    }

    @Test
    public void testPrescription() {
        final Reference value = Reference.create().build();
        assertEquals(value, ExplanationOfBenefit.create().prescription(value).build().prescription());
    }

    @Test
    public void testOriginalPrescription() {
        final Reference value = Reference.create().build();
        assertEquals(value, ExplanationOfBenefit.create().originalPrescription(value).build().originalPrescription());
    }

    @Test
    public void testPayee() {
        final ExplanationOfBenefit.ExplanationOfBenefitPayee value = ExplanationOfBenefit.ExplanationOfBenefitPayee.create().build();
        assertEquals(value, ExplanationOfBenefit.create().payee(value).build().payee());
    }

    @Test
    public void testReferral() {
        final Reference value = Reference.create().build();
        assertEquals(value, ExplanationOfBenefit.create().referral(value).build().referral());
    }

    @Test
    public void testFacility() {
        final Reference value = Reference.create().build();
        assertEquals(value, ExplanationOfBenefit.create().facility(value).build().facility());
    }

    @Test
    public void testClaim() {
        final Reference value = Reference.create().build();
        assertEquals(value, ExplanationOfBenefit.create().claim(value).build().claim());
    }

    @Test
    public void testClaimResponse() {
        final Reference value = Reference.create().build();
        assertEquals(value, ExplanationOfBenefit.create().claimResponse(value).build().claimResponse());
    }

    @Test
    public void testOutcome() {
        assertEquals("x", ExplanationOfBenefit.create().outcome("x").build().outcome());
    }

    @Test
    public void testDisposition() {
        assertEquals("x", ExplanationOfBenefit.create().disposition("x").build().disposition());
    }

    @Test
    public void testPreAuthRef() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().preAuthRef(value).build().preAuthRef());
    }

    @Test
    public void testPreAuthRefPeriod() {
        final java.util.List<Period> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().preAuthRefPeriod(value).build().preAuthRefPeriod());
    }

    @Test
    public void testCareTeam() {
        final java.util.List<ExplanationOfBenefit.ExplanationOfBenefitCareTeam> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().careTeam(value).build().careTeam());
    }

    @Test
    public void testSupportingInfo() {
        final java.util.List<ExplanationOfBenefit.ExplanationOfBenefitSupportingInfo> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().supportingInfo(value).build().supportingInfo());
    }

    @Test
    public void testDiagnosis() {
        final java.util.List<ExplanationOfBenefit.ExplanationOfBenefitDiagnosis> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().diagnosis(value).build().diagnosis());
    }

    @Test
    public void testProcedure() {
        final java.util.List<ExplanationOfBenefit.ExplanationOfBenefitProcedure> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().procedure(value).build().procedure());
    }

    @Test
    public void testPrecedence() {
        assertEquals(1, ExplanationOfBenefit.create().precedence(1).build().precedence());
    }

    @Test
    public void testInsurance() {
        final java.util.List<ExplanationOfBenefit.ExplanationOfBenefitInsurance> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().insurance(value).build().insurance());
    }

    @Test
    public void testAccident() {
        final ExplanationOfBenefit.ExplanationOfBenefitAccident value = ExplanationOfBenefit.ExplanationOfBenefitAccident.create().build();
        assertEquals(value, ExplanationOfBenefit.create().accident(value).build().accident());
    }

    @Test
    public void testItem() {
        final java.util.List<ExplanationOfBenefit.ExplanationOfBenefitItem> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().item(value).build().item());
    }

    @Test
    public void testAddItem() {
        final java.util.List<ExplanationOfBenefit.ExplanationOfBenefitAddItem> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().addItem(value).build().addItem());
    }

    @Test
    public void testAdjudication() {
        final java.util.List<ExplanationOfBenefit.ExplanationOfBenefitAdjudication> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().adjudication(value).build().adjudication());
    }

    @Test
    public void testTotal() {
        final java.util.List<ExplanationOfBenefit.ExplanationOfBenefitTotal> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().total(value).build().total());
    }

    @Test
    public void testPayment() {
        final ExplanationOfBenefit.ExplanationOfBenefitPayment value = ExplanationOfBenefit.ExplanationOfBenefitPayment.create().build();
        assertEquals(value, ExplanationOfBenefit.create().payment(value).build().payment());
    }

    @Test
    public void testFormCode() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, ExplanationOfBenefit.create().formCode(value).build().formCode());
    }

    @Test
    public void testForm() {
        final Attachment value = Attachment.create().build();
        assertEquals(value, ExplanationOfBenefit.create().form(value).build().form());
    }

    @Test
    public void testProcessNote() {
        final java.util.List<ExplanationOfBenefit.ExplanationOfBenefitProcessNote> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().processNote(value).build().processNote());
    }

    @Test
    public void testBenefitPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, ExplanationOfBenefit.create().benefitPeriod(value).build().benefitPeriod());
    }

    @Test
    public void testBenefitBalance() {
        final java.util.List<ExplanationOfBenefit.ExplanationOfBenefitBenefitBalance> value = java.util.Collections.emptyList();
        assertEquals(value, ExplanationOfBenefit.create().benefitBalance(value).build().benefitBalance());
    }
}
