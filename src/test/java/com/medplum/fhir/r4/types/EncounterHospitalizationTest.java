/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class EncounterHospitalizationTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Encounter.EncounterHospitalization(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Encounter.EncounterHospitalization.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Encounter.EncounterHospitalization x = Encounter.EncounterHospitalization.create().build();
        final Encounter.EncounterHospitalization y = Encounter.EncounterHospitalization.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Encounter.EncounterHospitalization.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.EncounterHospitalization.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.EncounterHospitalization.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testPreAdmissionIdentifier() {
        final Identifier value = Identifier.create().build();
        assertEquals(value, Encounter.EncounterHospitalization.create().preAdmissionIdentifier(value).build().preAdmissionIdentifier());
    }

    @Test
    public void testOrigin() {
        final Reference value = Reference.create().build();
        assertEquals(value, Encounter.EncounterHospitalization.create().origin(value).build().origin());
    }

    @Test
    public void testAdmitSource() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Encounter.EncounterHospitalization.create().admitSource(value).build().admitSource());
    }

    @Test
    public void testReAdmission() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Encounter.EncounterHospitalization.create().reAdmission(value).build().reAdmission());
    }

    @Test
    public void testDietPreference() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.EncounterHospitalization.create().dietPreference(value).build().dietPreference());
    }

    @Test
    public void testSpecialCourtesy() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.EncounterHospitalization.create().specialCourtesy(value).build().specialCourtesy());
    }

    @Test
    public void testSpecialArrangement() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Encounter.EncounterHospitalization.create().specialArrangement(value).build().specialArrangement());
    }

    @Test
    public void testDestination() {
        final Reference value = Reference.create().build();
        assertEquals(value, Encounter.EncounterHospitalization.create().destination(value).build().destination());
    }

    @Test
    public void testDischargeDisposition() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Encounter.EncounterHospitalization.create().dischargeDisposition(value).build().dischargeDisposition());
    }
}
