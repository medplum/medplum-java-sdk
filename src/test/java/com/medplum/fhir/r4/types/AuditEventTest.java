/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class AuditEventTest {

    @Test
    public void testConstructor() {
        assertNotNull(new AuditEvent(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(AuditEvent.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final AuditEvent x = AuditEvent.create().build();
        final AuditEvent y = AuditEvent.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", AuditEvent.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, AuditEvent.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, AuditEvent.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", AuditEvent.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, AuditEvent.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, AuditEvent.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, AuditEvent.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, AuditEvent.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testType() {
        final Coding value = Coding.create().build();
        assertEquals(value, AuditEvent.create().type(value).build().type());
    }

    @Test
    public void testSubtype() {
        final java.util.List<Coding> value = java.util.Collections.emptyList();
        assertEquals(value, AuditEvent.create().subtype(value).build().subtype());
    }

    @Test
    public void testAction() {
        assertEquals("x", AuditEvent.create().action("x").build().action());
    }

    @Test
    public void testPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, AuditEvent.create().period(value).build().period());
    }

    @Test
    public void testRecorded() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, AuditEvent.create().recorded(value).build().recorded());
    }

    @Test
    public void testOutcome() {
        assertEquals("x", AuditEvent.create().outcome("x").build().outcome());
    }

    @Test
    public void testOutcomeDesc() {
        assertEquals("x", AuditEvent.create().outcomeDesc("x").build().outcomeDesc());
    }

    @Test
    public void testPurposeOfEvent() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, AuditEvent.create().purposeOfEvent(value).build().purposeOfEvent());
    }

    @Test
    public void testAgent() {
        final java.util.List<AuditEvent.AuditEventAgent> value = java.util.Collections.emptyList();
        assertEquals(value, AuditEvent.create().agent(value).build().agent());
    }

    @Test
    public void testSource() {
        final AuditEvent.AuditEventSource value = AuditEvent.AuditEventSource.create().build();
        assertEquals(value, AuditEvent.create().source(value).build().source());
    }

    @Test
    public void testEntity() {
        final java.util.List<AuditEvent.AuditEventEntity> value = java.util.Collections.emptyList();
        assertEquals(value, AuditEvent.create().entity(value).build().entity());
    }
}
