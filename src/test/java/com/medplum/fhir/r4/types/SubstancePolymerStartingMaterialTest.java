/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class SubstancePolymerStartingMaterialTest {

    @Test
    public void testConstructor() {
        assertNotNull(new SubstancePolymer.SubstancePolymerStartingMaterial(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(SubstancePolymer.SubstancePolymerStartingMaterial.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final SubstancePolymer.SubstancePolymerStartingMaterial x = SubstancePolymer.SubstancePolymerStartingMaterial.create().build();
        final SubstancePolymer.SubstancePolymerStartingMaterial y = SubstancePolymer.SubstancePolymerStartingMaterial.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", SubstancePolymer.SubstancePolymerStartingMaterial.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstancePolymer.SubstancePolymerStartingMaterial.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstancePolymer.SubstancePolymerStartingMaterial.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testMaterial() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstancePolymer.SubstancePolymerStartingMaterial.create().material(value).build().material());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstancePolymer.SubstancePolymerStartingMaterial.create().type(value).build().type());
    }

    @Test
    public void testIsDefining() {
        assertEquals(true, SubstancePolymer.SubstancePolymerStartingMaterial.create().isDefining(true).build().isDefining());
    }

    @Test
    public void testAmount() {
        final SubstanceAmount value = SubstanceAmount.create().build();
        assertEquals(value, SubstancePolymer.SubstancePolymerStartingMaterial.create().amount(value).build().amount());
    }
}
