/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class CoverageEligibilityRequestItemTest {

    @Test
    public void testConstructor() {
        assertNotNull(new CoverageEligibilityRequest.CoverageEligibilityRequestItem(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(CoverageEligibilityRequest.CoverageEligibilityRequestItem.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final CoverageEligibilityRequest.CoverageEligibilityRequestItem x = CoverageEligibilityRequest.CoverageEligibilityRequestItem.create().build();
    final CoverageEligibilityRequest.CoverageEligibilityRequestItem y =
            CoverageEligibilityRequest.CoverageEligibilityRequestItem.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", CoverageEligibilityRequest.CoverageEligibilityRequestItem.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, CoverageEligibilityRequest.CoverageEligibilityRequestItem.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, CoverageEligibilityRequest.CoverageEligibilityRequestItem.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testSupportingInfoSequence() {
        final java.util.List<Integer> value = java.util.Collections.emptyList();
        assertEquals(value, CoverageEligibilityRequest.CoverageEligibilityRequestItem.create().supportingInfoSequence(value).build().supportingInfoSequence());
    }

    @Test
    public void testCategory() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, CoverageEligibilityRequest.CoverageEligibilityRequestItem.create().category(value).build().category());
    }

    @Test
    public void testProductOrService() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, CoverageEligibilityRequest.CoverageEligibilityRequestItem.create().productOrService(value).build().productOrService());
    }

    @Test
    public void testModifier() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, CoverageEligibilityRequest.CoverageEligibilityRequestItem.create().modifier(value).build().modifier());
    }

    @Test
    public void testProvider() {
        final Reference value = Reference.create().build();
        assertEquals(value, CoverageEligibilityRequest.CoverageEligibilityRequestItem.create().provider(value).build().provider());
    }

    @Test
    public void testQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, CoverageEligibilityRequest.CoverageEligibilityRequestItem.create().quantity(value).build().quantity());
    }

    @Test
    public void testUnitPrice() {
        final Money value = Money.create().build();
        assertEquals(value, CoverageEligibilityRequest.CoverageEligibilityRequestItem.create().unitPrice(value).build().unitPrice());
    }

    @Test
    public void testFacility() {
        final Reference value = Reference.create().build();
        assertEquals(value, CoverageEligibilityRequest.CoverageEligibilityRequestItem.create().facility(value).build().facility());
    }

    @Test
    public void testDiagnosis() {
        final java.util.List<CoverageEligibilityRequest.CoverageEligibilityRequestDiagnosis> value = java.util.Collections.emptyList();
        assertEquals(value, CoverageEligibilityRequest.CoverageEligibilityRequestItem.create().diagnosis(value).build().diagnosis());
    }

    @Test
    public void testDetail() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, CoverageEligibilityRequest.CoverageEligibilityRequestItem.create().detail(value).build().detail());
    }
}
