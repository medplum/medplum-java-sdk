/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class AddressTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Address(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Address.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Address x = Address.create().build();
        final Address y = Address.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Address.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Address.create().extension(value).build().extension());
    }

    @Test
    public void testUse() {
        assertEquals("x", Address.create().use("x").build().use());
    }

    @Test
    public void testType() {
        assertEquals("x", Address.create().type("x").build().type());
    }

    @Test
    public void testText() {
        assertEquals("x", Address.create().text("x").build().text());
    }

    @Test
    public void testLine() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, Address.create().line(value).build().line());
    }

    @Test
    public void testCity() {
        assertEquals("x", Address.create().city("x").build().city());
    }

    @Test
    public void testDistrict() {
        assertEquals("x", Address.create().district("x").build().district());
    }

    @Test
    public void testState() {
        assertEquals("x", Address.create().state("x").build().state());
    }

    @Test
    public void testPostalCode() {
        assertEquals("x", Address.create().postalCode("x").build().postalCode());
    }

    @Test
    public void testCountry() {
        assertEquals("x", Address.create().country("x").build().country());
    }

    @Test
    public void testPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, Address.create().period(value).build().period());
    }
}
