/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class SubstanceSpecificationNameTest {

    @Test
    public void testConstructor() {
        assertNotNull(new SubstanceSpecification.SubstanceSpecificationName(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(SubstanceSpecification.SubstanceSpecificationName.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final SubstanceSpecification.SubstanceSpecificationName x = SubstanceSpecification.SubstanceSpecificationName.create().build();
        final SubstanceSpecification.SubstanceSpecificationName y = SubstanceSpecification.SubstanceSpecificationName.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", SubstanceSpecification.SubstanceSpecificationName.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationName.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationName.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testName() {
        assertEquals("x", SubstanceSpecification.SubstanceSpecificationName.create().name("x").build().name());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationName.create().type(value).build().type());
    }

    @Test
    public void testStatus() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationName.create().status(value).build().status());
    }

    @Test
    public void testPreferred() {
        assertEquals(true, SubstanceSpecification.SubstanceSpecificationName.create().preferred(true).build().preferred());
    }

    @Test
    public void testLanguage() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationName.create().language(value).build().language());
    }

    @Test
    public void testDomain() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationName.create().domain(value).build().domain());
    }

    @Test
    public void testJurisdiction() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationName.create().jurisdiction(value).build().jurisdiction());
    }

    @Test
    public void testSynonym() {
        final java.util.List<SubstanceSpecification.SubstanceSpecificationName> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationName.create().synonym(value).build().synonym());
    }

    @Test
    public void testTranslation() {
        final java.util.List<SubstanceSpecification.SubstanceSpecificationName> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationName.create().translation(value).build().translation());
    }

    @Test
    public void testOfficial() {
        final java.util.List<SubstanceSpecification.SubstanceSpecificationOfficial> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationName.create().official(value).build().official());
    }

    @Test
    public void testSource() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationName.create().source(value).build().source());
    }
}
