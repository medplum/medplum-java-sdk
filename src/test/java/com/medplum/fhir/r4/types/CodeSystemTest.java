/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class CodeSystemTest {

    @Test
    public void testConstructor() {
        assertNotNull(new CodeSystem(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(CodeSystem.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final CodeSystem x = CodeSystem.create().build();
        final CodeSystem y = CodeSystem.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", CodeSystem.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, CodeSystem.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, CodeSystem.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", CodeSystem.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, CodeSystem.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, CodeSystem.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, CodeSystem.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, CodeSystem.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testUrl() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, CodeSystem.create().url(value).build().url());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, CodeSystem.create().identifier(value).build().identifier());
    }

    @Test
    public void testVersion() {
        assertEquals("x", CodeSystem.create().version("x").build().version());
    }

    @Test
    public void testName() {
        assertEquals("x", CodeSystem.create().name("x").build().name());
    }

    @Test
    public void testTitle() {
        assertEquals("x", CodeSystem.create().title("x").build().title());
    }

    @Test
    public void testStatus() {
        assertEquals("x", CodeSystem.create().status("x").build().status());
    }

    @Test
    public void testExperimental() {
        assertEquals(true, CodeSystem.create().experimental(true).build().experimental());
    }

    @Test
    public void testDate() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, CodeSystem.create().date(value).build().date());
    }

    @Test
    public void testPublisher() {
        assertEquals("x", CodeSystem.create().publisher("x").build().publisher());
    }

    @Test
    public void testContact() {
        final java.util.List<ContactDetail> value = java.util.Collections.emptyList();
        assertEquals(value, CodeSystem.create().contact(value).build().contact());
    }

    @Test
    public void testDescription() {
        assertEquals("x", CodeSystem.create().description("x").build().description());
    }

    @Test
    public void testUseContext() {
        final java.util.List<UsageContext> value = java.util.Collections.emptyList();
        assertEquals(value, CodeSystem.create().useContext(value).build().useContext());
    }

    @Test
    public void testJurisdiction() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, CodeSystem.create().jurisdiction(value).build().jurisdiction());
    }

    @Test
    public void testPurpose() {
        assertEquals("x", CodeSystem.create().purpose("x").build().purpose());
    }

    @Test
    public void testCopyright() {
        assertEquals("x", CodeSystem.create().copyright("x").build().copyright());
    }

    @Test
    public void testCaseSensitive() {
        assertEquals(true, CodeSystem.create().caseSensitive(true).build().caseSensitive());
    }

    @Test
    public void testValueSet() {
        assertEquals("x", CodeSystem.create().valueSet("x").build().valueSet());
    }

    @Test
    public void testHierarchyMeaning() {
        assertEquals("x", CodeSystem.create().hierarchyMeaning("x").build().hierarchyMeaning());
    }

    @Test
    public void testCompositional() {
        assertEquals(true, CodeSystem.create().compositional(true).build().compositional());
    }

    @Test
    public void testVersionNeeded() {
        assertEquals(true, CodeSystem.create().versionNeeded(true).build().versionNeeded());
    }

    @Test
    public void testContent() {
        assertEquals("x", CodeSystem.create().content("x").build().content());
    }

    @Test
    public void testSupplements() {
        assertEquals("x", CodeSystem.create().supplements("x").build().supplements());
    }

    @Test
    public void testCount() {
        assertEquals(1, CodeSystem.create().count(1).build().count());
    }

    @Test
    public void testFilter() {
        final java.util.List<CodeSystem.CodeSystemFilter> value = java.util.Collections.emptyList();
        assertEquals(value, CodeSystem.create().filter(value).build().filter());
    }

    @Test
    public void testProperty() {
        final java.util.List<CodeSystem.CodeSystemProperty> value = java.util.Collections.emptyList();
        assertEquals(value, CodeSystem.create().property(value).build().property());
    }

    @Test
    public void testConcept() {
        final java.util.List<CodeSystem.CodeSystemConcept> value = java.util.Collections.emptyList();
        assertEquals(value, CodeSystem.create().concept(value).build().concept());
    }
}
