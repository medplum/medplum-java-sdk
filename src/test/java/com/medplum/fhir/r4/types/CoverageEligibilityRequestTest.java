/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class CoverageEligibilityRequestTest {

    @Test
    public void testConstructor() {
        assertNotNull(new CoverageEligibilityRequest(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(CoverageEligibilityRequest.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final CoverageEligibilityRequest x = CoverageEligibilityRequest.create().build();
        final CoverageEligibilityRequest y = CoverageEligibilityRequest.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", CoverageEligibilityRequest.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, CoverageEligibilityRequest.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, CoverageEligibilityRequest.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", CoverageEligibilityRequest.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, CoverageEligibilityRequest.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, CoverageEligibilityRequest.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, CoverageEligibilityRequest.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, CoverageEligibilityRequest.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, CoverageEligibilityRequest.create().identifier(value).build().identifier());
    }

    @Test
    public void testStatus() {
        assertEquals("x", CoverageEligibilityRequest.create().status("x").build().status());
    }

    @Test
    public void testPriority() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, CoverageEligibilityRequest.create().priority(value).build().priority());
    }

    @Test
    public void testPurpose() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, CoverageEligibilityRequest.create().purpose(value).build().purpose());
    }

    @Test
    public void testPatient() {
        final Reference value = Reference.create().build();
        assertEquals(value, CoverageEligibilityRequest.create().patient(value).build().patient());
    }

    @Test
    public void testServicedDate() {
        assertEquals("x", CoverageEligibilityRequest.create().servicedDate("x").build().servicedDate());
    }

    @Test
    public void testServicedPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, CoverageEligibilityRequest.create().servicedPeriod(value).build().servicedPeriod());
    }

    @Test
    public void testCreated() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, CoverageEligibilityRequest.create().created(value).build().created());
    }

    @Test
    public void testEnterer() {
        final Reference value = Reference.create().build();
        assertEquals(value, CoverageEligibilityRequest.create().enterer(value).build().enterer());
    }

    @Test
    public void testProvider() {
        final Reference value = Reference.create().build();
        assertEquals(value, CoverageEligibilityRequest.create().provider(value).build().provider());
    }

    @Test
    public void testInsurer() {
        final Reference value = Reference.create().build();
        assertEquals(value, CoverageEligibilityRequest.create().insurer(value).build().insurer());
    }

    @Test
    public void testFacility() {
        final Reference value = Reference.create().build();
        assertEquals(value, CoverageEligibilityRequest.create().facility(value).build().facility());
    }

    @Test
    public void testSupportingInfo() {
        final java.util.List<CoverageEligibilityRequest.CoverageEligibilityRequestSupportingInfo> value = java.util.Collections.emptyList();
        assertEquals(value, CoverageEligibilityRequest.create().supportingInfo(value).build().supportingInfo());
    }

    @Test
    public void testInsurance() {
        final java.util.List<CoverageEligibilityRequest.CoverageEligibilityRequestInsurance> value = java.util.Collections.emptyList();
        assertEquals(value, CoverageEligibilityRequest.create().insurance(value).build().insurance());
    }

    @Test
    public void testItem() {
        final java.util.List<CoverageEligibilityRequest.CoverageEligibilityRequestItem> value = java.util.Collections.emptyList();
        assertEquals(value, CoverageEligibilityRequest.create().item(value).build().item());
    }
}
