/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ScheduleTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Schedule(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Schedule.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Schedule x = Schedule.create().build();
        final Schedule y = Schedule.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Schedule.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, Schedule.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, Schedule.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", Schedule.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, Schedule.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, Schedule.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Schedule.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Schedule.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, Schedule.create().identifier(value).build().identifier());
    }

    @Test
    public void testActive() {
        assertEquals(true, Schedule.create().active(true).build().active());
    }

    @Test
    public void testServiceCategory() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Schedule.create().serviceCategory(value).build().serviceCategory());
    }

    @Test
    public void testServiceType() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Schedule.create().serviceType(value).build().serviceType());
    }

    @Test
    public void testSpecialty() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Schedule.create().specialty(value).build().specialty());
    }

    @Test
    public void testActor() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Schedule.create().actor(value).build().actor());
    }

    @Test
    public void testPlanningHorizon() {
        final Period value = Period.create().build();
        assertEquals(value, Schedule.create().planningHorizon(value).build().planningHorizon());
    }

    @Test
    public void testComment() {
        assertEquals("x", Schedule.create().comment("x").build().comment());
    }
}
