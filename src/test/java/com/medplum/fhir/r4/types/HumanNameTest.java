/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class HumanNameTest {

    @Test
    public void testConstructor() {
        assertNotNull(new HumanName(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(HumanName.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final HumanName x = HumanName.create().build();
        final HumanName y = HumanName.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", HumanName.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, HumanName.create().extension(value).build().extension());
    }

    @Test
    public void testUse() {
        assertEquals("x", HumanName.create().use("x").build().use());
    }

    @Test
    public void testText() {
        assertEquals("x", HumanName.create().text("x").build().text());
    }

    @Test
    public void testFamily() {
        assertEquals("x", HumanName.create().family("x").build().family());
    }

    @Test
    public void testGiven() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, HumanName.create().given(value).build().given());
    }

    @Test
    public void testPrefix() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, HumanName.create().prefix(value).build().prefix());
    }

    @Test
    public void testSuffix() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, HumanName.create().suffix(value).build().suffix());
    }

    @Test
    public void testPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, HumanName.create().period(value).build().period());
    }
}
