/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class MessageHeaderTest {

    @Test
    public void testConstructor() {
        assertNotNull(new MessageHeader(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(MessageHeader.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final MessageHeader x = MessageHeader.create().build();
        final MessageHeader y = MessageHeader.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", MessageHeader.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, MessageHeader.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, MessageHeader.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", MessageHeader.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, MessageHeader.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, MessageHeader.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, MessageHeader.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, MessageHeader.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testEventCoding() {
        final Coding value = Coding.create().build();
        assertEquals(value, MessageHeader.create().eventCoding(value).build().eventCoding());
    }

    @Test
    public void testEventUri() {
        assertEquals("x", MessageHeader.create().eventUri("x").build().eventUri());
    }

    @Test
    public void testDestination() {
        final java.util.List<MessageHeader.MessageHeaderDestination> value = java.util.Collections.emptyList();
        assertEquals(value, MessageHeader.create().destination(value).build().destination());
    }

    @Test
    public void testSender() {
        final Reference value = Reference.create().build();
        assertEquals(value, MessageHeader.create().sender(value).build().sender());
    }

    @Test
    public void testEnterer() {
        final Reference value = Reference.create().build();
        assertEquals(value, MessageHeader.create().enterer(value).build().enterer());
    }

    @Test
    public void testAuthor() {
        final Reference value = Reference.create().build();
        assertEquals(value, MessageHeader.create().author(value).build().author());
    }

    @Test
    public void testSource() {
        final MessageHeader.MessageHeaderSource value = MessageHeader.MessageHeaderSource.create().build();
        assertEquals(value, MessageHeader.create().source(value).build().source());
    }

    @Test
    public void testResponsible() {
        final Reference value = Reference.create().build();
        assertEquals(value, MessageHeader.create().responsible(value).build().responsible());
    }

    @Test
    public void testReason() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, MessageHeader.create().reason(value).build().reason());
    }

    @Test
    public void testResponse() {
        final MessageHeader.MessageHeaderResponse value = MessageHeader.MessageHeaderResponse.create().build();
        assertEquals(value, MessageHeader.create().response(value).build().response());
    }

    @Test
    public void testFocus() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, MessageHeader.create().focus(value).build().focus());
    }

    @Test
    public void testDefinition() {
        assertEquals("x", MessageHeader.create().definition("x").build().definition());
    }
}
