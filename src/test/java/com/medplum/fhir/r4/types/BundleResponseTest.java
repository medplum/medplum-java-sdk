/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class BundleResponseTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Bundle.BundleResponse(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Bundle.BundleResponse.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Bundle.BundleResponse x = Bundle.BundleResponse.create().build();
        final Bundle.BundleResponse y = Bundle.BundleResponse.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Bundle.BundleResponse.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Bundle.BundleResponse.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Bundle.BundleResponse.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testStatus() {
        assertEquals("x", Bundle.BundleResponse.create().status("x").build().status());
    }

    @Test
    public void testLocation() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, Bundle.BundleResponse.create().location(value).build().location());
    }

    @Test
    public void testEtag() {
        assertEquals("x", Bundle.BundleResponse.create().etag("x").build().etag());
    }

    @Test
    public void testLastModified() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, Bundle.BundleResponse.create().lastModified(value).build().lastModified());
    }

    @Test
    public void testOutcome() {
        final Patient p = Patient.create().build();
        assertEquals(p, Bundle.BundleResponse.create().outcome(p).build().outcome());
    }

    @Test
    public void testOutcomeAsClass() {
        final Patient p = Patient.create().build();
        assertEquals(p, Bundle.BundleResponse.create().outcome(p).build().outcome(Patient.class));
    }
}
