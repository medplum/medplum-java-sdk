/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class CodeSystemProperty1Test {

    @Test
    public void testConstructor() {
        assertNotNull(new CodeSystem.CodeSystemProperty1(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(CodeSystem.CodeSystemProperty1.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final CodeSystem.CodeSystemProperty1 x = CodeSystem.CodeSystemProperty1.create().build();
        final CodeSystem.CodeSystemProperty1 y = CodeSystem.CodeSystemProperty1.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", CodeSystem.CodeSystemProperty1.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, CodeSystem.CodeSystemProperty1.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, CodeSystem.CodeSystemProperty1.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testCode() {
        assertEquals("x", CodeSystem.CodeSystemProperty1.create().code("x").build().code());
    }

    @Test
    public void testValueCode() {
        assertEquals("x", CodeSystem.CodeSystemProperty1.create().valueCode("x").build().valueCode());
    }

    @Test
    public void testValueCoding() {
        final Coding value = Coding.create().build();
        assertEquals(value, CodeSystem.CodeSystemProperty1.create().valueCoding(value).build().valueCoding());
    }

    @Test
    public void testValueString() {
        assertEquals("x", CodeSystem.CodeSystemProperty1.create().valueString("x").build().valueString());
    }

    @Test
    public void testValueInteger() {
        assertEquals(1, CodeSystem.CodeSystemProperty1.create().valueInteger(1).build().valueInteger());
    }

    @Test
    public void testValueBoolean() {
        assertEquals(true, CodeSystem.CodeSystemProperty1.create().valueBoolean(true).build().valueBoolean());
    }

    @Test
    public void testValueDateTime() {
        assertEquals("x", CodeSystem.CodeSystemProperty1.create().valueDateTime("x").build().valueDateTime());
    }

    @Test
    public void testValueDecimal() {
        assertEquals(1, CodeSystem.CodeSystemProperty1.create().valueDecimal(1).build().valueDecimal());
    }
}
