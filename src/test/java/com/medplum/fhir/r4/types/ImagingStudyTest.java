/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ImagingStudyTest {

    @Test
    public void testConstructor() {
        assertNotNull(new ImagingStudy(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(ImagingStudy.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final ImagingStudy x = ImagingStudy.create().build();
        final ImagingStudy y = ImagingStudy.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", ImagingStudy.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, ImagingStudy.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, ImagingStudy.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", ImagingStudy.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, ImagingStudy.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.create().identifier(value).build().identifier());
    }

    @Test
    public void testStatus() {
        assertEquals("x", ImagingStudy.create().status("x").build().status());
    }

    @Test
    public void testModality() {
        final java.util.List<Coding> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.create().modality(value).build().modality());
    }

    @Test
    public void testSubject() {
        final Reference value = Reference.create().build();
        assertEquals(value, ImagingStudy.create().subject(value).build().subject());
    }

    @Test
    public void testEncounter() {
        final Reference value = Reference.create().build();
        assertEquals(value, ImagingStudy.create().encounter(value).build().encounter());
    }

    @Test
    public void testStarted() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, ImagingStudy.create().started(value).build().started());
    }

    @Test
    public void testBasedOn() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.create().basedOn(value).build().basedOn());
    }

    @Test
    public void testReferrer() {
        final Reference value = Reference.create().build();
        assertEquals(value, ImagingStudy.create().referrer(value).build().referrer());
    }

    @Test
    public void testInterpreter() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.create().interpreter(value).build().interpreter());
    }

    @Test
    public void testEndpoint() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.create().endpoint(value).build().endpoint());
    }

    @Test
    public void testNumberOfSeries() {
        assertEquals(1, ImagingStudy.create().numberOfSeries(1).build().numberOfSeries());
    }

    @Test
    public void testNumberOfInstances() {
        assertEquals(1, ImagingStudy.create().numberOfInstances(1).build().numberOfInstances());
    }

    @Test
    public void testProcedureReference() {
        final Reference value = Reference.create().build();
        assertEquals(value, ImagingStudy.create().procedureReference(value).build().procedureReference());
    }

    @Test
    public void testProcedureCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.create().procedureCode(value).build().procedureCode());
    }

    @Test
    public void testLocation() {
        final Reference value = Reference.create().build();
        assertEquals(value, ImagingStudy.create().location(value).build().location());
    }

    @Test
    public void testReasonCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.create().reasonCode(value).build().reasonCode());
    }

    @Test
    public void testReasonReference() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.create().reasonReference(value).build().reasonReference());
    }

    @Test
    public void testNote() {
        final java.util.List<Annotation> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.create().note(value).build().note());
    }

    @Test
    public void testDescription() {
        assertEquals("x", ImagingStudy.create().description("x").build().description());
    }

    @Test
    public void testSeries() {
        final java.util.List<ImagingStudy.ImagingStudySeries> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.create().series(value).build().series());
    }
}
