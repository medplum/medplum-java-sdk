/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class CarePlanDetailTest {

    @Test
    public void testConstructor() {
        assertNotNull(new CarePlan.CarePlanDetail(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(CarePlan.CarePlanDetail.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final CarePlan.CarePlanDetail x = CarePlan.CarePlanDetail.create().build();
        final CarePlan.CarePlanDetail y = CarePlan.CarePlanDetail.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", CarePlan.CarePlanDetail.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, CarePlan.CarePlanDetail.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, CarePlan.CarePlanDetail.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testKind() {
        assertEquals("x", CarePlan.CarePlanDetail.create().kind("x").build().kind());
    }

    @Test
    public void testInstantiatesCanonical() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, CarePlan.CarePlanDetail.create().instantiatesCanonical(value).build().instantiatesCanonical());
    }

    @Test
    public void testInstantiatesUri() {
        final java.util.List<java.net.URI> value = java.util.Collections.emptyList();
        assertEquals(value, CarePlan.CarePlanDetail.create().instantiatesUri(value).build().instantiatesUri());
    }

    @Test
    public void testCode() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, CarePlan.CarePlanDetail.create().code(value).build().code());
    }

    @Test
    public void testReasonCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, CarePlan.CarePlanDetail.create().reasonCode(value).build().reasonCode());
    }

    @Test
    public void testReasonReference() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, CarePlan.CarePlanDetail.create().reasonReference(value).build().reasonReference());
    }

    @Test
    public void testGoal() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, CarePlan.CarePlanDetail.create().goal(value).build().goal());
    }

    @Test
    public void testStatus() {
        assertEquals("x", CarePlan.CarePlanDetail.create().status("x").build().status());
    }

    @Test
    public void testStatusReason() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, CarePlan.CarePlanDetail.create().statusReason(value).build().statusReason());
    }

    @Test
    public void testDoNotPerform() {
        assertEquals(true, CarePlan.CarePlanDetail.create().doNotPerform(true).build().doNotPerform());
    }

    @Test
    public void testScheduledTiming() {
        final Timing value = Timing.create().build();
        assertEquals(value, CarePlan.CarePlanDetail.create().scheduledTiming(value).build().scheduledTiming());
    }

    @Test
    public void testScheduledPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, CarePlan.CarePlanDetail.create().scheduledPeriod(value).build().scheduledPeriod());
    }

    @Test
    public void testScheduledString() {
        assertEquals("x", CarePlan.CarePlanDetail.create().scheduledString("x").build().scheduledString());
    }

    @Test
    public void testLocation() {
        final Reference value = Reference.create().build();
        assertEquals(value, CarePlan.CarePlanDetail.create().location(value).build().location());
    }

    @Test
    public void testPerformer() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, CarePlan.CarePlanDetail.create().performer(value).build().performer());
    }

    @Test
    public void testProductCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, CarePlan.CarePlanDetail.create().productCodeableConcept(value).build().productCodeableConcept());
    }

    @Test
    public void testProductReference() {
        final Reference value = Reference.create().build();
        assertEquals(value, CarePlan.CarePlanDetail.create().productReference(value).build().productReference());
    }

    @Test
    public void testDailyAmount() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, CarePlan.CarePlanDetail.create().dailyAmount(value).build().dailyAmount());
    }

    @Test
    public void testQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, CarePlan.CarePlanDetail.create().quantity(value).build().quantity());
    }

    @Test
    public void testDescription() {
        assertEquals("x", CarePlan.CarePlanDetail.create().description("x").build().description());
    }
}
