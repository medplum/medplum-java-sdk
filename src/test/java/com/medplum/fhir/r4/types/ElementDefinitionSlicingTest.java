/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ElementDefinitionSlicingTest {

    @Test
    public void testConstructor() {
        assertNotNull(new ElementDefinition.ElementDefinitionSlicing(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(ElementDefinition.ElementDefinitionSlicing.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final ElementDefinition.ElementDefinitionSlicing x = ElementDefinition.ElementDefinitionSlicing.create().build();
        final ElementDefinition.ElementDefinitionSlicing y = ElementDefinition.ElementDefinitionSlicing.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", ElementDefinition.ElementDefinitionSlicing.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, ElementDefinition.ElementDefinitionSlicing.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, ElementDefinition.ElementDefinitionSlicing.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testDiscriminator() {
        final java.util.List<ElementDefinition.ElementDefinitionDiscriminator> value = java.util.Collections.emptyList();
        assertEquals(value, ElementDefinition.ElementDefinitionSlicing.create().discriminator(value).build().discriminator());
    }

    @Test
    public void testDescription() {
        assertEquals("x", ElementDefinition.ElementDefinitionSlicing.create().description("x").build().description());
    }

    @Test
    public void testOrdered() {
        assertEquals(true, ElementDefinition.ElementDefinitionSlicing.create().ordered(true).build().ordered());
    }

    @Test
    public void testRules() {
        assertEquals("x", ElementDefinition.ElementDefinitionSlicing.create().rules("x").build().rules());
    }
}
