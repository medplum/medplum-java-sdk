/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ElementDefinitionTest {

    @Test
    public void testConstructor() {
        assertNotNull(new ElementDefinition(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(ElementDefinition.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final ElementDefinition x = ElementDefinition.create().build();
        final ElementDefinition y = ElementDefinition.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", ElementDefinition.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, ElementDefinition.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, ElementDefinition.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testPath() {
        assertEquals("x", ElementDefinition.create().path("x").build().path());
    }

    @Test
    public void testRepresentation() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, ElementDefinition.create().representation(value).build().representation());
    }

    @Test
    public void testSliceName() {
        assertEquals("x", ElementDefinition.create().sliceName("x").build().sliceName());
    }

    @Test
    public void testSliceIsConstraining() {
        assertEquals(true, ElementDefinition.create().sliceIsConstraining(true).build().sliceIsConstraining());
    }

    @Test
    public void testLabel() {
        assertEquals("x", ElementDefinition.create().label("x").build().label());
    }

    @Test
    public void testCode() {
        final java.util.List<Coding> value = java.util.Collections.emptyList();
        assertEquals(value, ElementDefinition.create().code(value).build().code());
    }

    @Test
    public void testSlicing() {
        final ElementDefinition.ElementDefinitionSlicing value = ElementDefinition.ElementDefinitionSlicing.create().build();
        assertEquals(value, ElementDefinition.create().slicing(value).build().slicing());
    }

    @Test
    public void testShortValue() {
        assertEquals("x", ElementDefinition.create().shortValue("x").build().shortValue());
    }

    @Test
    public void testDefinition() {
        assertEquals("x", ElementDefinition.create().definition("x").build().definition());
    }

    @Test
    public void testComment() {
        assertEquals("x", ElementDefinition.create().comment("x").build().comment());
    }

    @Test
    public void testRequirements() {
        assertEquals("x", ElementDefinition.create().requirements("x").build().requirements());
    }

    @Test
    public void testAlias() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, ElementDefinition.create().alias(value).build().alias());
    }

    @Test
    public void testMin() {
        assertEquals(1, ElementDefinition.create().min(1).build().min());
    }

    @Test
    public void testMax() {
        assertEquals("x", ElementDefinition.create().max("x").build().max());
    }

    @Test
    public void testBase() {
        final ElementDefinition.ElementDefinitionBase value = ElementDefinition.ElementDefinitionBase.create().build();
        assertEquals(value, ElementDefinition.create().base(value).build().base());
    }

    @Test
    public void testContentReference() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, ElementDefinition.create().contentReference(value).build().contentReference());
    }

    @Test
    public void testType() {
        final java.util.List<ElementDefinition.ElementDefinitionType> value = java.util.Collections.emptyList();
        assertEquals(value, ElementDefinition.create().type(value).build().type());
    }

    @Test
    public void testDefaultValueBase64Binary() {
        assertEquals("x", ElementDefinition.create().defaultValueBase64Binary("x").build().defaultValueBase64Binary());
    }

    @Test
    public void testDefaultValueBoolean() {
        assertEquals(true, ElementDefinition.create().defaultValueBoolean(true).build().defaultValueBoolean());
    }

    @Test
    public void testDefaultValueCanonical() {
        assertEquals("x", ElementDefinition.create().defaultValueCanonical("x").build().defaultValueCanonical());
    }

    @Test
    public void testDefaultValueCode() {
        assertEquals("x", ElementDefinition.create().defaultValueCode("x").build().defaultValueCode());
    }

    @Test
    public void testDefaultValueDate() {
        assertEquals("x", ElementDefinition.create().defaultValueDate("x").build().defaultValueDate());
    }

    @Test
    public void testDefaultValueDateTime() {
        assertEquals("x", ElementDefinition.create().defaultValueDateTime("x").build().defaultValueDateTime());
    }

    @Test
    public void testDefaultValueDecimal() {
        assertEquals(1, ElementDefinition.create().defaultValueDecimal(1).build().defaultValueDecimal());
    }

    @Test
    public void testDefaultValueId() {
        assertEquals("x", ElementDefinition.create().defaultValueId("x").build().defaultValueId());
    }

    @Test
    public void testDefaultValueInstant() {
        assertEquals("x", ElementDefinition.create().defaultValueInstant("x").build().defaultValueInstant());
    }

    @Test
    public void testDefaultValueInteger() {
        assertEquals(1, ElementDefinition.create().defaultValueInteger(1).build().defaultValueInteger());
    }

    @Test
    public void testDefaultValueMarkdown() {
        assertEquals("x", ElementDefinition.create().defaultValueMarkdown("x").build().defaultValueMarkdown());
    }

    @Test
    public void testDefaultValueOid() {
        assertEquals("x", ElementDefinition.create().defaultValueOid("x").build().defaultValueOid());
    }

    @Test
    public void testDefaultValuePositiveInt() {
        assertEquals(1, ElementDefinition.create().defaultValuePositiveInt(1).build().defaultValuePositiveInt());
    }

    @Test
    public void testDefaultValueString() {
        assertEquals("x", ElementDefinition.create().defaultValueString("x").build().defaultValueString());
    }

    @Test
    public void testDefaultValueTime() {
        assertEquals("x", ElementDefinition.create().defaultValueTime("x").build().defaultValueTime());
    }

    @Test
    public void testDefaultValueUnsignedInt() {
        assertEquals(1, ElementDefinition.create().defaultValueUnsignedInt(1).build().defaultValueUnsignedInt());
    }

    @Test
    public void testDefaultValueUri() {
        assertEquals("x", ElementDefinition.create().defaultValueUri("x").build().defaultValueUri());
    }

    @Test
    public void testDefaultValueUrl() {
        assertEquals("x", ElementDefinition.create().defaultValueUrl("x").build().defaultValueUrl());
    }

    @Test
    public void testDefaultValueUuid() {
        assertEquals("x", ElementDefinition.create().defaultValueUuid("x").build().defaultValueUuid());
    }

    @Test
    public void testDefaultValueAddress() {
        final Address value = Address.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueAddress(value).build().defaultValueAddress());
    }

    @Test
    public void testDefaultValueAge() {
        final Age value = Age.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueAge(value).build().defaultValueAge());
    }

    @Test
    public void testDefaultValueAnnotation() {
        final Annotation value = Annotation.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueAnnotation(value).build().defaultValueAnnotation());
    }

    @Test
    public void testDefaultValueAttachment() {
        final Attachment value = Attachment.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueAttachment(value).build().defaultValueAttachment());
    }

    @Test
    public void testDefaultValueCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueCodeableConcept(value).build().defaultValueCodeableConcept());
    }

    @Test
    public void testDefaultValueCoding() {
        final Coding value = Coding.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueCoding(value).build().defaultValueCoding());
    }

    @Test
    public void testDefaultValueContactPoint() {
        final ContactPoint value = ContactPoint.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueContactPoint(value).build().defaultValueContactPoint());
    }

    @Test
    public void testDefaultValueCount() {
        final Count value = Count.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueCount(value).build().defaultValueCount());
    }

    @Test
    public void testDefaultValueDistance() {
        final Distance value = Distance.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueDistance(value).build().defaultValueDistance());
    }

    @Test
    public void testDefaultValueDuration() {
        final Duration value = Duration.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueDuration(value).build().defaultValueDuration());
    }

    @Test
    public void testDefaultValueHumanName() {
        final HumanName value = HumanName.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueHumanName(value).build().defaultValueHumanName());
    }

    @Test
    public void testDefaultValueIdentifier() {
        final Identifier value = Identifier.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueIdentifier(value).build().defaultValueIdentifier());
    }

    @Test
    public void testDefaultValueMoney() {
        final Money value = Money.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueMoney(value).build().defaultValueMoney());
    }

    @Test
    public void testDefaultValuePeriod() {
        final Period value = Period.create().build();
        assertEquals(value, ElementDefinition.create().defaultValuePeriod(value).build().defaultValuePeriod());
    }

    @Test
    public void testDefaultValueQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueQuantity(value).build().defaultValueQuantity());
    }

    @Test
    public void testDefaultValueRange() {
        final Range value = Range.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueRange(value).build().defaultValueRange());
    }

    @Test
    public void testDefaultValueRatio() {
        final Ratio value = Ratio.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueRatio(value).build().defaultValueRatio());
    }

    @Test
    public void testDefaultValueReference() {
        final Reference value = Reference.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueReference(value).build().defaultValueReference());
    }

    @Test
    public void testDefaultValueSampledData() {
        final SampledData value = SampledData.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueSampledData(value).build().defaultValueSampledData());
    }

    @Test
    public void testDefaultValueSignature() {
        final Signature value = Signature.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueSignature(value).build().defaultValueSignature());
    }

    @Test
    public void testDefaultValueTiming() {
        final Timing value = Timing.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueTiming(value).build().defaultValueTiming());
    }

    @Test
    public void testDefaultValueContactDetail() {
        final ContactDetail value = ContactDetail.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueContactDetail(value).build().defaultValueContactDetail());
    }

    @Test
    public void testDefaultValueContributor() {
        final Contributor value = Contributor.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueContributor(value).build().defaultValueContributor());
    }

    @Test
    public void testDefaultValueDataRequirement() {
        final DataRequirement value = DataRequirement.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueDataRequirement(value).build().defaultValueDataRequirement());
    }

    @Test
    public void testDefaultValueExpression() {
        final Expression value = Expression.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueExpression(value).build().defaultValueExpression());
    }

    @Test
    public void testDefaultValueParameterDefinition() {
        final ParameterDefinition value = ParameterDefinition.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueParameterDefinition(value).build().defaultValueParameterDefinition());
    }

    @Test
    public void testDefaultValueRelatedArtifact() {
        final RelatedArtifact value = RelatedArtifact.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueRelatedArtifact(value).build().defaultValueRelatedArtifact());
    }

    @Test
    public void testDefaultValueTriggerDefinition() {
        final TriggerDefinition value = TriggerDefinition.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueTriggerDefinition(value).build().defaultValueTriggerDefinition());
    }

    @Test
    public void testDefaultValueUsageContext() {
        final UsageContext value = UsageContext.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueUsageContext(value).build().defaultValueUsageContext());
    }

    @Test
    public void testDefaultValueDosage() {
        final Dosage value = Dosage.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueDosage(value).build().defaultValueDosage());
    }

    @Test
    public void testDefaultValueMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, ElementDefinition.create().defaultValueMeta(value).build().defaultValueMeta());
    }

    @Test
    public void testMeaningWhenMissing() {
        assertEquals("x", ElementDefinition.create().meaningWhenMissing("x").build().meaningWhenMissing());
    }

    @Test
    public void testOrderMeaning() {
        assertEquals("x", ElementDefinition.create().orderMeaning("x").build().orderMeaning());
    }

    @Test
    public void testFixedBase64Binary() {
        assertEquals("x", ElementDefinition.create().fixedBase64Binary("x").build().fixedBase64Binary());
    }

    @Test
    public void testFixedBoolean() {
        assertEquals(true, ElementDefinition.create().fixedBoolean(true).build().fixedBoolean());
    }

    @Test
    public void testFixedCanonical() {
        assertEquals("x", ElementDefinition.create().fixedCanonical("x").build().fixedCanonical());
    }

    @Test
    public void testFixedCode() {
        assertEquals("x", ElementDefinition.create().fixedCode("x").build().fixedCode());
    }

    @Test
    public void testFixedDate() {
        assertEquals("x", ElementDefinition.create().fixedDate("x").build().fixedDate());
    }

    @Test
    public void testFixedDateTime() {
        assertEquals("x", ElementDefinition.create().fixedDateTime("x").build().fixedDateTime());
    }

    @Test
    public void testFixedDecimal() {
        assertEquals(1, ElementDefinition.create().fixedDecimal(1).build().fixedDecimal());
    }

    @Test
    public void testFixedId() {
        assertEquals("x", ElementDefinition.create().fixedId("x").build().fixedId());
    }

    @Test
    public void testFixedInstant() {
        assertEquals("x", ElementDefinition.create().fixedInstant("x").build().fixedInstant());
    }

    @Test
    public void testFixedInteger() {
        assertEquals(1, ElementDefinition.create().fixedInteger(1).build().fixedInteger());
    }

    @Test
    public void testFixedMarkdown() {
        assertEquals("x", ElementDefinition.create().fixedMarkdown("x").build().fixedMarkdown());
    }

    @Test
    public void testFixedOid() {
        assertEquals("x", ElementDefinition.create().fixedOid("x").build().fixedOid());
    }

    @Test
    public void testFixedPositiveInt() {
        assertEquals(1, ElementDefinition.create().fixedPositiveInt(1).build().fixedPositiveInt());
    }

    @Test
    public void testFixedString() {
        assertEquals("x", ElementDefinition.create().fixedString("x").build().fixedString());
    }

    @Test
    public void testFixedTime() {
        assertEquals("x", ElementDefinition.create().fixedTime("x").build().fixedTime());
    }

    @Test
    public void testFixedUnsignedInt() {
        assertEquals(1, ElementDefinition.create().fixedUnsignedInt(1).build().fixedUnsignedInt());
    }

    @Test
    public void testFixedUri() {
        assertEquals("x", ElementDefinition.create().fixedUri("x").build().fixedUri());
    }

    @Test
    public void testFixedUrl() {
        assertEquals("x", ElementDefinition.create().fixedUrl("x").build().fixedUrl());
    }

    @Test
    public void testFixedUuid() {
        assertEquals("x", ElementDefinition.create().fixedUuid("x").build().fixedUuid());
    }

    @Test
    public void testFixedAddress() {
        final Address value = Address.create().build();
        assertEquals(value, ElementDefinition.create().fixedAddress(value).build().fixedAddress());
    }

    @Test
    public void testFixedAge() {
        final Age value = Age.create().build();
        assertEquals(value, ElementDefinition.create().fixedAge(value).build().fixedAge());
    }

    @Test
    public void testFixedAnnotation() {
        final Annotation value = Annotation.create().build();
        assertEquals(value, ElementDefinition.create().fixedAnnotation(value).build().fixedAnnotation());
    }

    @Test
    public void testFixedAttachment() {
        final Attachment value = Attachment.create().build();
        assertEquals(value, ElementDefinition.create().fixedAttachment(value).build().fixedAttachment());
    }

    @Test
    public void testFixedCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, ElementDefinition.create().fixedCodeableConcept(value).build().fixedCodeableConcept());
    }

    @Test
    public void testFixedCoding() {
        final Coding value = Coding.create().build();
        assertEquals(value, ElementDefinition.create().fixedCoding(value).build().fixedCoding());
    }

    @Test
    public void testFixedContactPoint() {
        final ContactPoint value = ContactPoint.create().build();
        assertEquals(value, ElementDefinition.create().fixedContactPoint(value).build().fixedContactPoint());
    }

    @Test
    public void testFixedCount() {
        final Count value = Count.create().build();
        assertEquals(value, ElementDefinition.create().fixedCount(value).build().fixedCount());
    }

    @Test
    public void testFixedDistance() {
        final Distance value = Distance.create().build();
        assertEquals(value, ElementDefinition.create().fixedDistance(value).build().fixedDistance());
    }

    @Test
    public void testFixedDuration() {
        final Duration value = Duration.create().build();
        assertEquals(value, ElementDefinition.create().fixedDuration(value).build().fixedDuration());
    }

    @Test
    public void testFixedHumanName() {
        final HumanName value = HumanName.create().build();
        assertEquals(value, ElementDefinition.create().fixedHumanName(value).build().fixedHumanName());
    }

    @Test
    public void testFixedIdentifier() {
        final Identifier value = Identifier.create().build();
        assertEquals(value, ElementDefinition.create().fixedIdentifier(value).build().fixedIdentifier());
    }

    @Test
    public void testFixedMoney() {
        final Money value = Money.create().build();
        assertEquals(value, ElementDefinition.create().fixedMoney(value).build().fixedMoney());
    }

    @Test
    public void testFixedPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, ElementDefinition.create().fixedPeriod(value).build().fixedPeriod());
    }

    @Test
    public void testFixedQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, ElementDefinition.create().fixedQuantity(value).build().fixedQuantity());
    }

    @Test
    public void testFixedRange() {
        final Range value = Range.create().build();
        assertEquals(value, ElementDefinition.create().fixedRange(value).build().fixedRange());
    }

    @Test
    public void testFixedRatio() {
        final Ratio value = Ratio.create().build();
        assertEquals(value, ElementDefinition.create().fixedRatio(value).build().fixedRatio());
    }

    @Test
    public void testFixedReference() {
        final Reference value = Reference.create().build();
        assertEquals(value, ElementDefinition.create().fixedReference(value).build().fixedReference());
    }

    @Test
    public void testFixedSampledData() {
        final SampledData value = SampledData.create().build();
        assertEquals(value, ElementDefinition.create().fixedSampledData(value).build().fixedSampledData());
    }

    @Test
    public void testFixedSignature() {
        final Signature value = Signature.create().build();
        assertEquals(value, ElementDefinition.create().fixedSignature(value).build().fixedSignature());
    }

    @Test
    public void testFixedTiming() {
        final Timing value = Timing.create().build();
        assertEquals(value, ElementDefinition.create().fixedTiming(value).build().fixedTiming());
    }

    @Test
    public void testFixedContactDetail() {
        final ContactDetail value = ContactDetail.create().build();
        assertEquals(value, ElementDefinition.create().fixedContactDetail(value).build().fixedContactDetail());
    }

    @Test
    public void testFixedContributor() {
        final Contributor value = Contributor.create().build();
        assertEquals(value, ElementDefinition.create().fixedContributor(value).build().fixedContributor());
    }

    @Test
    public void testFixedDataRequirement() {
        final DataRequirement value = DataRequirement.create().build();
        assertEquals(value, ElementDefinition.create().fixedDataRequirement(value).build().fixedDataRequirement());
    }

    @Test
    public void testFixedExpression() {
        final Expression value = Expression.create().build();
        assertEquals(value, ElementDefinition.create().fixedExpression(value).build().fixedExpression());
    }

    @Test
    public void testFixedParameterDefinition() {
        final ParameterDefinition value = ParameterDefinition.create().build();
        assertEquals(value, ElementDefinition.create().fixedParameterDefinition(value).build().fixedParameterDefinition());
    }

    @Test
    public void testFixedRelatedArtifact() {
        final RelatedArtifact value = RelatedArtifact.create().build();
        assertEquals(value, ElementDefinition.create().fixedRelatedArtifact(value).build().fixedRelatedArtifact());
    }

    @Test
    public void testFixedTriggerDefinition() {
        final TriggerDefinition value = TriggerDefinition.create().build();
        assertEquals(value, ElementDefinition.create().fixedTriggerDefinition(value).build().fixedTriggerDefinition());
    }

    @Test
    public void testFixedUsageContext() {
        final UsageContext value = UsageContext.create().build();
        assertEquals(value, ElementDefinition.create().fixedUsageContext(value).build().fixedUsageContext());
    }

    @Test
    public void testFixedDosage() {
        final Dosage value = Dosage.create().build();
        assertEquals(value, ElementDefinition.create().fixedDosage(value).build().fixedDosage());
    }

    @Test
    public void testFixedMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, ElementDefinition.create().fixedMeta(value).build().fixedMeta());
    }

    @Test
    public void testPatternBase64Binary() {
        assertEquals("x", ElementDefinition.create().patternBase64Binary("x").build().patternBase64Binary());
    }

    @Test
    public void testPatternBoolean() {
        assertEquals(true, ElementDefinition.create().patternBoolean(true).build().patternBoolean());
    }

    @Test
    public void testPatternCanonical() {
        assertEquals("x", ElementDefinition.create().patternCanonical("x").build().patternCanonical());
    }

    @Test
    public void testPatternCode() {
        assertEquals("x", ElementDefinition.create().patternCode("x").build().patternCode());
    }

    @Test
    public void testPatternDate() {
        assertEquals("x", ElementDefinition.create().patternDate("x").build().patternDate());
    }

    @Test
    public void testPatternDateTime() {
        assertEquals("x", ElementDefinition.create().patternDateTime("x").build().patternDateTime());
    }

    @Test
    public void testPatternDecimal() {
        assertEquals(1, ElementDefinition.create().patternDecimal(1).build().patternDecimal());
    }

    @Test
    public void testPatternId() {
        assertEquals("x", ElementDefinition.create().patternId("x").build().patternId());
    }

    @Test
    public void testPatternInstant() {
        assertEquals("x", ElementDefinition.create().patternInstant("x").build().patternInstant());
    }

    @Test
    public void testPatternInteger() {
        assertEquals(1, ElementDefinition.create().patternInteger(1).build().patternInteger());
    }

    @Test
    public void testPatternMarkdown() {
        assertEquals("x", ElementDefinition.create().patternMarkdown("x").build().patternMarkdown());
    }

    @Test
    public void testPatternOid() {
        assertEquals("x", ElementDefinition.create().patternOid("x").build().patternOid());
    }

    @Test
    public void testPatternPositiveInt() {
        assertEquals(1, ElementDefinition.create().patternPositiveInt(1).build().patternPositiveInt());
    }

    @Test
    public void testPatternString() {
        assertEquals("x", ElementDefinition.create().patternString("x").build().patternString());
    }

    @Test
    public void testPatternTime() {
        assertEquals("x", ElementDefinition.create().patternTime("x").build().patternTime());
    }

    @Test
    public void testPatternUnsignedInt() {
        assertEquals(1, ElementDefinition.create().patternUnsignedInt(1).build().patternUnsignedInt());
    }

    @Test
    public void testPatternUri() {
        assertEquals("x", ElementDefinition.create().patternUri("x").build().patternUri());
    }

    @Test
    public void testPatternUrl() {
        assertEquals("x", ElementDefinition.create().patternUrl("x").build().patternUrl());
    }

    @Test
    public void testPatternUuid() {
        assertEquals("x", ElementDefinition.create().patternUuid("x").build().patternUuid());
    }

    @Test
    public void testPatternAddress() {
        final Address value = Address.create().build();
        assertEquals(value, ElementDefinition.create().patternAddress(value).build().patternAddress());
    }

    @Test
    public void testPatternAge() {
        final Age value = Age.create().build();
        assertEquals(value, ElementDefinition.create().patternAge(value).build().patternAge());
    }

    @Test
    public void testPatternAnnotation() {
        final Annotation value = Annotation.create().build();
        assertEquals(value, ElementDefinition.create().patternAnnotation(value).build().patternAnnotation());
    }

    @Test
    public void testPatternAttachment() {
        final Attachment value = Attachment.create().build();
        assertEquals(value, ElementDefinition.create().patternAttachment(value).build().patternAttachment());
    }

    @Test
    public void testPatternCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, ElementDefinition.create().patternCodeableConcept(value).build().patternCodeableConcept());
    }

    @Test
    public void testPatternCoding() {
        final Coding value = Coding.create().build();
        assertEquals(value, ElementDefinition.create().patternCoding(value).build().patternCoding());
    }

    @Test
    public void testPatternContactPoint() {
        final ContactPoint value = ContactPoint.create().build();
        assertEquals(value, ElementDefinition.create().patternContactPoint(value).build().patternContactPoint());
    }

    @Test
    public void testPatternCount() {
        final Count value = Count.create().build();
        assertEquals(value, ElementDefinition.create().patternCount(value).build().patternCount());
    }

    @Test
    public void testPatternDistance() {
        final Distance value = Distance.create().build();
        assertEquals(value, ElementDefinition.create().patternDistance(value).build().patternDistance());
    }

    @Test
    public void testPatternDuration() {
        final Duration value = Duration.create().build();
        assertEquals(value, ElementDefinition.create().patternDuration(value).build().patternDuration());
    }

    @Test
    public void testPatternHumanName() {
        final HumanName value = HumanName.create().build();
        assertEquals(value, ElementDefinition.create().patternHumanName(value).build().patternHumanName());
    }

    @Test
    public void testPatternIdentifier() {
        final Identifier value = Identifier.create().build();
        assertEquals(value, ElementDefinition.create().patternIdentifier(value).build().patternIdentifier());
    }

    @Test
    public void testPatternMoney() {
        final Money value = Money.create().build();
        assertEquals(value, ElementDefinition.create().patternMoney(value).build().patternMoney());
    }

    @Test
    public void testPatternPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, ElementDefinition.create().patternPeriod(value).build().patternPeriod());
    }

    @Test
    public void testPatternQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, ElementDefinition.create().patternQuantity(value).build().patternQuantity());
    }

    @Test
    public void testPatternRange() {
        final Range value = Range.create().build();
        assertEquals(value, ElementDefinition.create().patternRange(value).build().patternRange());
    }

    @Test
    public void testPatternRatio() {
        final Ratio value = Ratio.create().build();
        assertEquals(value, ElementDefinition.create().patternRatio(value).build().patternRatio());
    }

    @Test
    public void testPatternReference() {
        final Reference value = Reference.create().build();
        assertEquals(value, ElementDefinition.create().patternReference(value).build().patternReference());
    }

    @Test
    public void testPatternSampledData() {
        final SampledData value = SampledData.create().build();
        assertEquals(value, ElementDefinition.create().patternSampledData(value).build().patternSampledData());
    }

    @Test
    public void testPatternSignature() {
        final Signature value = Signature.create().build();
        assertEquals(value, ElementDefinition.create().patternSignature(value).build().patternSignature());
    }

    @Test
    public void testPatternTiming() {
        final Timing value = Timing.create().build();
        assertEquals(value, ElementDefinition.create().patternTiming(value).build().patternTiming());
    }

    @Test
    public void testPatternContactDetail() {
        final ContactDetail value = ContactDetail.create().build();
        assertEquals(value, ElementDefinition.create().patternContactDetail(value).build().patternContactDetail());
    }

    @Test
    public void testPatternContributor() {
        final Contributor value = Contributor.create().build();
        assertEquals(value, ElementDefinition.create().patternContributor(value).build().patternContributor());
    }

    @Test
    public void testPatternDataRequirement() {
        final DataRequirement value = DataRequirement.create().build();
        assertEquals(value, ElementDefinition.create().patternDataRequirement(value).build().patternDataRequirement());
    }

    @Test
    public void testPatternExpression() {
        final Expression value = Expression.create().build();
        assertEquals(value, ElementDefinition.create().patternExpression(value).build().patternExpression());
    }

    @Test
    public void testPatternParameterDefinition() {
        final ParameterDefinition value = ParameterDefinition.create().build();
        assertEquals(value, ElementDefinition.create().patternParameterDefinition(value).build().patternParameterDefinition());
    }

    @Test
    public void testPatternRelatedArtifact() {
        final RelatedArtifact value = RelatedArtifact.create().build();
        assertEquals(value, ElementDefinition.create().patternRelatedArtifact(value).build().patternRelatedArtifact());
    }

    @Test
    public void testPatternTriggerDefinition() {
        final TriggerDefinition value = TriggerDefinition.create().build();
        assertEquals(value, ElementDefinition.create().patternTriggerDefinition(value).build().patternTriggerDefinition());
    }

    @Test
    public void testPatternUsageContext() {
        final UsageContext value = UsageContext.create().build();
        assertEquals(value, ElementDefinition.create().patternUsageContext(value).build().patternUsageContext());
    }

    @Test
    public void testPatternDosage() {
        final Dosage value = Dosage.create().build();
        assertEquals(value, ElementDefinition.create().patternDosage(value).build().patternDosage());
    }

    @Test
    public void testPatternMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, ElementDefinition.create().patternMeta(value).build().patternMeta());
    }

    @Test
    public void testExample() {
        final java.util.List<ElementDefinition.ElementDefinitionExample> value = java.util.Collections.emptyList();
        assertEquals(value, ElementDefinition.create().example(value).build().example());
    }

    @Test
    public void testMinValueDate() {
        assertEquals("x", ElementDefinition.create().minValueDate("x").build().minValueDate());
    }

    @Test
    public void testMinValueDateTime() {
        assertEquals("x", ElementDefinition.create().minValueDateTime("x").build().minValueDateTime());
    }

    @Test
    public void testMinValueInstant() {
        assertEquals("x", ElementDefinition.create().minValueInstant("x").build().minValueInstant());
    }

    @Test
    public void testMinValueTime() {
        assertEquals("x", ElementDefinition.create().minValueTime("x").build().minValueTime());
    }

    @Test
    public void testMinValueDecimal() {
        assertEquals(1, ElementDefinition.create().minValueDecimal(1).build().minValueDecimal());
    }

    @Test
    public void testMinValueInteger() {
        assertEquals(1, ElementDefinition.create().minValueInteger(1).build().minValueInteger());
    }

    @Test
    public void testMinValuePositiveInt() {
        assertEquals(1, ElementDefinition.create().minValuePositiveInt(1).build().minValuePositiveInt());
    }

    @Test
    public void testMinValueUnsignedInt() {
        assertEquals(1, ElementDefinition.create().minValueUnsignedInt(1).build().minValueUnsignedInt());
    }

    @Test
    public void testMinValueQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, ElementDefinition.create().minValueQuantity(value).build().minValueQuantity());
    }

    @Test
    public void testMaxValueDate() {
        assertEquals("x", ElementDefinition.create().maxValueDate("x").build().maxValueDate());
    }

    @Test
    public void testMaxValueDateTime() {
        assertEquals("x", ElementDefinition.create().maxValueDateTime("x").build().maxValueDateTime());
    }

    @Test
    public void testMaxValueInstant() {
        assertEquals("x", ElementDefinition.create().maxValueInstant("x").build().maxValueInstant());
    }

    @Test
    public void testMaxValueTime() {
        assertEquals("x", ElementDefinition.create().maxValueTime("x").build().maxValueTime());
    }

    @Test
    public void testMaxValueDecimal() {
        assertEquals(1, ElementDefinition.create().maxValueDecimal(1).build().maxValueDecimal());
    }

    @Test
    public void testMaxValueInteger() {
        assertEquals(1, ElementDefinition.create().maxValueInteger(1).build().maxValueInteger());
    }

    @Test
    public void testMaxValuePositiveInt() {
        assertEquals(1, ElementDefinition.create().maxValuePositiveInt(1).build().maxValuePositiveInt());
    }

    @Test
    public void testMaxValueUnsignedInt() {
        assertEquals(1, ElementDefinition.create().maxValueUnsignedInt(1).build().maxValueUnsignedInt());
    }

    @Test
    public void testMaxValueQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, ElementDefinition.create().maxValueQuantity(value).build().maxValueQuantity());
    }

    @Test
    public void testMaxLength() {
        assertEquals(1, ElementDefinition.create().maxLength(1).build().maxLength());
    }

    @Test
    public void testCondition() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, ElementDefinition.create().condition(value).build().condition());
    }

    @Test
    public void testConstraint() {
        final java.util.List<ElementDefinition.ElementDefinitionConstraint> value = java.util.Collections.emptyList();
        assertEquals(value, ElementDefinition.create().constraint(value).build().constraint());
    }

    @Test
    public void testMustSupport() {
        assertEquals(true, ElementDefinition.create().mustSupport(true).build().mustSupport());
    }

    @Test
    public void testIsModifier() {
        assertEquals(true, ElementDefinition.create().isModifier(true).build().isModifier());
    }

    @Test
    public void testIsModifierReason() {
        assertEquals("x", ElementDefinition.create().isModifierReason("x").build().isModifierReason());
    }

    @Test
    public void testIsSummary() {
        assertEquals(true, ElementDefinition.create().isSummary(true).build().isSummary());
    }

    @Test
    public void testBinding() {
        final ElementDefinition.ElementDefinitionBinding value = ElementDefinition.ElementDefinitionBinding.create().build();
        assertEquals(value, ElementDefinition.create().binding(value).build().binding());
    }

    @Test
    public void testMapping() {
        final java.util.List<ElementDefinition.ElementDefinitionMapping> value = java.util.Collections.emptyList();
        assertEquals(value, ElementDefinition.create().mapping(value).build().mapping());
    }
}
