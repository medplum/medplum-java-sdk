/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class MeasureSupplementalDataTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Measure.MeasureSupplementalData(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Measure.MeasureSupplementalData.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Measure.MeasureSupplementalData x = Measure.MeasureSupplementalData.create().build();
        final Measure.MeasureSupplementalData y = Measure.MeasureSupplementalData.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Measure.MeasureSupplementalData.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Measure.MeasureSupplementalData.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Measure.MeasureSupplementalData.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testCode() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Measure.MeasureSupplementalData.create().code(value).build().code());
    }

    @Test
    public void testUsage() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Measure.MeasureSupplementalData.create().usage(value).build().usage());
    }

    @Test
    public void testDescription() {
        assertEquals("x", Measure.MeasureSupplementalData.create().description("x").build().description());
    }

    @Test
    public void testCriteria() {
        final Expression value = Expression.create().build();
        assertEquals(value, Measure.MeasureSupplementalData.create().criteria(value).build().criteria());
    }
}
