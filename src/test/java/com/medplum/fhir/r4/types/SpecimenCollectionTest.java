/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class SpecimenCollectionTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Specimen.SpecimenCollection(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Specimen.SpecimenCollection.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Specimen.SpecimenCollection x = Specimen.SpecimenCollection.create().build();
        final Specimen.SpecimenCollection y = Specimen.SpecimenCollection.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Specimen.SpecimenCollection.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Specimen.SpecimenCollection.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Specimen.SpecimenCollection.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testCollector() {
        final Reference value = Reference.create().build();
        assertEquals(value, Specimen.SpecimenCollection.create().collector(value).build().collector());
    }

    @Test
    public void testCollectedDateTime() {
        assertEquals("x", Specimen.SpecimenCollection.create().collectedDateTime("x").build().collectedDateTime());
    }

    @Test
    public void testCollectedPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, Specimen.SpecimenCollection.create().collectedPeriod(value).build().collectedPeriod());
    }

    @Test
    public void testDuration() {
        final Duration value = Duration.create().build();
        assertEquals(value, Specimen.SpecimenCollection.create().duration(value).build().duration());
    }

    @Test
    public void testQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, Specimen.SpecimenCollection.create().quantity(value).build().quantity());
    }

    @Test
    public void testMethod() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Specimen.SpecimenCollection.create().method(value).build().method());
    }

    @Test
    public void testBodySite() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Specimen.SpecimenCollection.create().bodySite(value).build().bodySite());
    }

    @Test
    public void testFastingStatusCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Specimen.SpecimenCollection.create().fastingStatusCodeableConcept(value).build().fastingStatusCodeableConcept());
    }

    @Test
    public void testFastingStatusDuration() {
        final Duration value = Duration.create().build();
        assertEquals(value, Specimen.SpecimenCollection.create().fastingStatusDuration(value).build().fastingStatusDuration());
    }
}
