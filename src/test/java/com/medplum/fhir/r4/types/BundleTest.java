/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class BundleTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Bundle(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Bundle.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Bundle x = Bundle.create().build();
        final Bundle y = Bundle.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Bundle.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, Bundle.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, Bundle.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", Bundle.create().language("x").build().language());
    }

    @Test
    public void testIdentifier() {
        final Identifier value = Identifier.create().build();
        assertEquals(value, Bundle.create().identifier(value).build().identifier());
    }

    @Test
    public void testType() {
        assertEquals("x", Bundle.create().type("x").build().type());
    }

    @Test
    public void testTimestamp() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, Bundle.create().timestamp(value).build().timestamp());
    }

    @Test
    public void testTotal() {
        assertEquals(1, Bundle.create().total(1).build().total());
    }

    @Test
    public void testLink() {
        final java.util.List<Bundle.BundleLink> value = java.util.Collections.emptyList();
        assertEquals(value, Bundle.create().link(value).build().link());
    }

    @Test
    public void testEntry() {
        final java.util.List<Bundle.BundleEntry> value = java.util.Collections.emptyList();
        assertEquals(value, Bundle.create().entry(value).build().entry());
    }

    @Test
    public void testSignature() {
        final Signature value = Signature.create().build();
        assertEquals(value, Bundle.create().signature(value).build().signature());
    }
}
