/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ClaimResponseAddItemTest {

    @Test
    public void testConstructor() {
        assertNotNull(new ClaimResponse.ClaimResponseAddItem(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(ClaimResponse.ClaimResponseAddItem.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final ClaimResponse.ClaimResponseAddItem x = ClaimResponse.ClaimResponseAddItem.create().build();
        final ClaimResponse.ClaimResponseAddItem y = ClaimResponse.ClaimResponseAddItem.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", ClaimResponse.ClaimResponseAddItem.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testItemSequence() {
        final java.util.List<Integer> value = java.util.Collections.emptyList();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().itemSequence(value).build().itemSequence());
    }

    @Test
    public void testDetailSequence() {
        final java.util.List<Integer> value = java.util.Collections.emptyList();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().detailSequence(value).build().detailSequence());
    }

    @Test
    public void testSubdetailSequence() {
        final java.util.List<Integer> value = java.util.Collections.emptyList();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().subdetailSequence(value).build().subdetailSequence());
    }

    @Test
    public void testProvider() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().provider(value).build().provider());
    }

    @Test
    public void testProductOrService() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().productOrService(value).build().productOrService());
    }

    @Test
    public void testModifier() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().modifier(value).build().modifier());
    }

    @Test
    public void testProgramCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().programCode(value).build().programCode());
    }

    @Test
    public void testServicedDate() {
        assertEquals("x", ClaimResponse.ClaimResponseAddItem.create().servicedDate("x").build().servicedDate());
    }

    @Test
    public void testServicedPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().servicedPeriod(value).build().servicedPeriod());
    }

    @Test
    public void testLocationCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().locationCodeableConcept(value).build().locationCodeableConcept());
    }

    @Test
    public void testLocationAddress() {
        final Address value = Address.create().build();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().locationAddress(value).build().locationAddress());
    }

    @Test
    public void testLocationReference() {
        final Reference value = Reference.create().build();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().locationReference(value).build().locationReference());
    }

    @Test
    public void testQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().quantity(value).build().quantity());
    }

    @Test
    public void testUnitPrice() {
        final Money value = Money.create().build();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().unitPrice(value).build().unitPrice());
    }

    @Test
    public void testFactor() {
        assertEquals(1.0, ClaimResponse.ClaimResponseAddItem.create().factor(1.0).build().factor());
    }

    @Test
    public void testNet() {
        final Money value = Money.create().build();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().net(value).build().net());
    }

    @Test
    public void testBodySite() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().bodySite(value).build().bodySite());
    }

    @Test
    public void testSubSite() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().subSite(value).build().subSite());
    }

    @Test
    public void testNoteNumber() {
        final java.util.List<Integer> value = java.util.Collections.emptyList();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().noteNumber(value).build().noteNumber());
    }

    @Test
    public void testAdjudication() {
        final java.util.List<ClaimResponse.ClaimResponseAdjudication> value = java.util.Collections.emptyList();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().adjudication(value).build().adjudication());
    }

    @Test
    public void testDetail() {
        final java.util.List<ClaimResponse.ClaimResponseDetail1> value = java.util.Collections.emptyList();
        assertEquals(value, ClaimResponse.ClaimResponseAddItem.create().detail(value).build().detail());
    }
}
