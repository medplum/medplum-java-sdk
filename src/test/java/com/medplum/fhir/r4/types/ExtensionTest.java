/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ExtensionTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Extension(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Extension.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Extension x = Extension.create().build();
        final Extension y = Extension.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Extension.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Extension.create().extension(value).build().extension());
    }

    @Test
    public void testUrl() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, Extension.create().url(value).build().url());
    }

    @Test
    public void testValueBase64Binary() {
        assertEquals("x", Extension.create().valueBase64Binary("x").build().valueBase64Binary());
    }

    @Test
    public void testValueBoolean() {
        assertEquals(true, Extension.create().valueBoolean(true).build().valueBoolean());
    }

    @Test
    public void testValueCanonical() {
        assertEquals("x", Extension.create().valueCanonical("x").build().valueCanonical());
    }

    @Test
    public void testValueCode() {
        assertEquals("x", Extension.create().valueCode("x").build().valueCode());
    }

    @Test
    public void testValueDate() {
        assertEquals("x", Extension.create().valueDate("x").build().valueDate());
    }

    @Test
    public void testValueDateTime() {
        assertEquals("x", Extension.create().valueDateTime("x").build().valueDateTime());
    }

    @Test
    public void testValueDecimal() {
        assertEquals(1, Extension.create().valueDecimal(1).build().valueDecimal());
    }

    @Test
    public void testValueId() {
        assertEquals("x", Extension.create().valueId("x").build().valueId());
    }

    @Test
    public void testValueInstant() {
        assertEquals("x", Extension.create().valueInstant("x").build().valueInstant());
    }

    @Test
    public void testValueInteger() {
        assertEquals(1, Extension.create().valueInteger(1).build().valueInteger());
    }

    @Test
    public void testValueMarkdown() {
        assertEquals("x", Extension.create().valueMarkdown("x").build().valueMarkdown());
    }

    @Test
    public void testValueOid() {
        assertEquals("x", Extension.create().valueOid("x").build().valueOid());
    }

    @Test
    public void testValuePositiveInt() {
        assertEquals(1, Extension.create().valuePositiveInt(1).build().valuePositiveInt());
    }

    @Test
    public void testValueString() {
        assertEquals("x", Extension.create().valueString("x").build().valueString());
    }

    @Test
    public void testValueTime() {
        assertEquals("x", Extension.create().valueTime("x").build().valueTime());
    }

    @Test
    public void testValueUnsignedInt() {
        assertEquals(1, Extension.create().valueUnsignedInt(1).build().valueUnsignedInt());
    }

    @Test
    public void testValueUri() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, Extension.create().valueUri(value).build().valueUri());
    }

    @Test
    public void testValueUrl() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, Extension.create().valueUrl(value).build().valueUrl());
    }

    @Test
    public void testValueUuid() {
        assertEquals("x", Extension.create().valueUuid("x").build().valueUuid());
    }

    @Test
    public void testValueAddress() {
        final Address value = Address.create().build();
        assertEquals(value, Extension.create().valueAddress(value).build().valueAddress());
    }

    @Test
    public void testValueAge() {
        final Age value = Age.create().build();
        assertEquals(value, Extension.create().valueAge(value).build().valueAge());
    }

    @Test
    public void testValueAnnotation() {
        final Annotation value = Annotation.create().build();
        assertEquals(value, Extension.create().valueAnnotation(value).build().valueAnnotation());
    }

    @Test
    public void testValueAttachment() {
        final Attachment value = Attachment.create().build();
        assertEquals(value, Extension.create().valueAttachment(value).build().valueAttachment());
    }

    @Test
    public void testValueCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Extension.create().valueCodeableConcept(value).build().valueCodeableConcept());
    }

    @Test
    public void testValueCoding() {
        final Coding value = Coding.create().build();
        assertEquals(value, Extension.create().valueCoding(value).build().valueCoding());
    }

    @Test
    public void testValueContactPoint() {
        final ContactPoint value = ContactPoint.create().build();
        assertEquals(value, Extension.create().valueContactPoint(value).build().valueContactPoint());
    }

    @Test
    public void testValueCount() {
        final Count value = Count.create().build();
        assertEquals(value, Extension.create().valueCount(value).build().valueCount());
    }

    @Test
    public void testValueDistance() {
        final Distance value = Distance.create().build();
        assertEquals(value, Extension.create().valueDistance(value).build().valueDistance());
    }

    @Test
    public void testValueDuration() {
        final Duration value = Duration.create().build();
        assertEquals(value, Extension.create().valueDuration(value).build().valueDuration());
    }

    @Test
    public void testValueHumanName() {
        final HumanName value = HumanName.create().build();
        assertEquals(value, Extension.create().valueHumanName(value).build().valueHumanName());
    }

    @Test
    public void testValueIdentifier() {
        final Identifier value = Identifier.create().build();
        assertEquals(value, Extension.create().valueIdentifier(value).build().valueIdentifier());
    }

    @Test
    public void testValueMoney() {
        final Money value = Money.create().build();
        assertEquals(value, Extension.create().valueMoney(value).build().valueMoney());
    }

    @Test
    public void testValuePeriod() {
        final Period value = Period.create().build();
        assertEquals(value, Extension.create().valuePeriod(value).build().valuePeriod());
    }

    @Test
    public void testValueQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, Extension.create().valueQuantity(value).build().valueQuantity());
    }

    @Test
    public void testValueRange() {
        final Range value = Range.create().build();
        assertEquals(value, Extension.create().valueRange(value).build().valueRange());
    }

    @Test
    public void testValueRatio() {
        final Ratio value = Ratio.create().build();
        assertEquals(value, Extension.create().valueRatio(value).build().valueRatio());
    }

    @Test
    public void testValueReference() {
        final Reference value = Reference.create().build();
        assertEquals(value, Extension.create().valueReference(value).build().valueReference());
    }

    @Test
    public void testValueSampledData() {
        final SampledData value = SampledData.create().build();
        assertEquals(value, Extension.create().valueSampledData(value).build().valueSampledData());
    }

    @Test
    public void testValueSignature() {
        final Signature value = Signature.create().build();
        assertEquals(value, Extension.create().valueSignature(value).build().valueSignature());
    }

    @Test
    public void testValueTiming() {
        final Timing value = Timing.create().build();
        assertEquals(value, Extension.create().valueTiming(value).build().valueTiming());
    }

    @Test
    public void testValueContactDetail() {
        final ContactDetail value = ContactDetail.create().build();
        assertEquals(value, Extension.create().valueContactDetail(value).build().valueContactDetail());
    }

    @Test
    public void testValueContributor() {
        final Contributor value = Contributor.create().build();
        assertEquals(value, Extension.create().valueContributor(value).build().valueContributor());
    }

    @Test
    public void testValueDataRequirement() {
        final DataRequirement value = DataRequirement.create().build();
        assertEquals(value, Extension.create().valueDataRequirement(value).build().valueDataRequirement());
    }

    @Test
    public void testValueExpression() {
        final Expression value = Expression.create().build();
        assertEquals(value, Extension.create().valueExpression(value).build().valueExpression());
    }

    @Test
    public void testValueParameterDefinition() {
        final ParameterDefinition value = ParameterDefinition.create().build();
        assertEquals(value, Extension.create().valueParameterDefinition(value).build().valueParameterDefinition());
    }

    @Test
    public void testValueRelatedArtifact() {
        final RelatedArtifact value = RelatedArtifact.create().build();
        assertEquals(value, Extension.create().valueRelatedArtifact(value).build().valueRelatedArtifact());
    }

    @Test
    public void testValueTriggerDefinition() {
        final TriggerDefinition value = TriggerDefinition.create().build();
        assertEquals(value, Extension.create().valueTriggerDefinition(value).build().valueTriggerDefinition());
    }

    @Test
    public void testValueUsageContext() {
        final UsageContext value = UsageContext.create().build();
        assertEquals(value, Extension.create().valueUsageContext(value).build().valueUsageContext());
    }

    @Test
    public void testValueDosage() {
        final Dosage value = Dosage.create().build();
        assertEquals(value, Extension.create().valueDosage(value).build().valueDosage());
    }

    @Test
    public void testValueMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, Extension.create().valueMeta(value).build().valueMeta());
    }
}
