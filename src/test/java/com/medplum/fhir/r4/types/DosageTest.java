/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class DosageTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Dosage(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Dosage.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Dosage x = Dosage.create().build();
        final Dosage y = Dosage.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Dosage.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Dosage.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Dosage.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testSequence() {
        assertEquals(1, Dosage.create().sequence(1).build().sequence());
    }

    @Test
    public void testText() {
        assertEquals("x", Dosage.create().text("x").build().text());
    }

    @Test
    public void testAdditionalInstruction() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Dosage.create().additionalInstruction(value).build().additionalInstruction());
    }

    @Test
    public void testPatientInstruction() {
        assertEquals("x", Dosage.create().patientInstruction("x").build().patientInstruction());
    }

    @Test
    public void testTiming() {
        final Timing value = Timing.create().build();
        assertEquals(value, Dosage.create().timing(value).build().timing());
    }

    @Test
    public void testAsNeededBoolean() {
        assertEquals(true, Dosage.create().asNeededBoolean(true).build().asNeededBoolean());
    }

    @Test
    public void testAsNeededCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Dosage.create().asNeededCodeableConcept(value).build().asNeededCodeableConcept());
    }

    @Test
    public void testSite() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Dosage.create().site(value).build().site());
    }

    @Test
    public void testRoute() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Dosage.create().route(value).build().route());
    }

    @Test
    public void testMethod() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Dosage.create().method(value).build().method());
    }

    @Test
    public void testDoseAndRate() {
        final java.util.List<Dosage.DosageDoseAndRate> value = java.util.Collections.emptyList();
        assertEquals(value, Dosage.create().doseAndRate(value).build().doseAndRate());
    }

    @Test
    public void testMaxDosePerPeriod() {
        final Ratio value = Ratio.create().build();
        assertEquals(value, Dosage.create().maxDosePerPeriod(value).build().maxDosePerPeriod());
    }

    @Test
    public void testMaxDosePerAdministration() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, Dosage.create().maxDosePerAdministration(value).build().maxDosePerAdministration());
    }

    @Test
    public void testMaxDosePerLifetime() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, Dosage.create().maxDosePerLifetime(value).build().maxDosePerLifetime());
    }
}
