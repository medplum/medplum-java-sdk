/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class DosageDoseAndRateTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Dosage.DosageDoseAndRate(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Dosage.DosageDoseAndRate.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Dosage.DosageDoseAndRate x = Dosage.DosageDoseAndRate.create().build();
        final Dosage.DosageDoseAndRate y = Dosage.DosageDoseAndRate.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Dosage.DosageDoseAndRate.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Dosage.DosageDoseAndRate.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Dosage.DosageDoseAndRate.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Dosage.DosageDoseAndRate.create().type(value).build().type());
    }

    @Test
    public void testDoseRange() {
        final Range value = Range.create().build();
        assertEquals(value, Dosage.DosageDoseAndRate.create().doseRange(value).build().doseRange());
    }

    @Test
    public void testDoseQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, Dosage.DosageDoseAndRate.create().doseQuantity(value).build().doseQuantity());
    }

    @Test
    public void testRateRatio() {
        final Ratio value = Ratio.create().build();
        assertEquals(value, Dosage.DosageDoseAndRate.create().rateRatio(value).build().rateRatio());
    }

    @Test
    public void testRateRange() {
        final Range value = Range.create().build();
        assertEquals(value, Dosage.DosageDoseAndRate.create().rateRange(value).build().rateRange());
    }

    @Test
    public void testRateQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, Dosage.DosageDoseAndRate.create().rateQuantity(value).build().rateQuantity());
    }
}
