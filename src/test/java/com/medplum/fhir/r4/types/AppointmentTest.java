/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class AppointmentTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Appointment(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Appointment.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Appointment x = Appointment.create().build();
        final Appointment y = Appointment.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Appointment.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, Appointment.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, Appointment.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", Appointment.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, Appointment.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, Appointment.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Appointment.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Appointment.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, Appointment.create().identifier(value).build().identifier());
    }

    @Test
    public void testStatus() {
        assertEquals("x", Appointment.create().status("x").build().status());
    }

    @Test
    public void testCancelationReason() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Appointment.create().cancelationReason(value).build().cancelationReason());
    }

    @Test
    public void testServiceCategory() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Appointment.create().serviceCategory(value).build().serviceCategory());
    }

    @Test
    public void testServiceType() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Appointment.create().serviceType(value).build().serviceType());
    }

    @Test
    public void testSpecialty() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Appointment.create().specialty(value).build().specialty());
    }

    @Test
    public void testAppointmentType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Appointment.create().appointmentType(value).build().appointmentType());
    }

    @Test
    public void testReasonCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Appointment.create().reasonCode(value).build().reasonCode());
    }

    @Test
    public void testReasonReference() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Appointment.create().reasonReference(value).build().reasonReference());
    }

    @Test
    public void testPriority() {
        assertEquals(1, Appointment.create().priority(1).build().priority());
    }

    @Test
    public void testDescription() {
        assertEquals("x", Appointment.create().description("x").build().description());
    }

    @Test
    public void testSupportingInformation() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Appointment.create().supportingInformation(value).build().supportingInformation());
    }

    @Test
    public void testStart() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, Appointment.create().start(value).build().start());
    }

    @Test
    public void testEnd() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, Appointment.create().end(value).build().end());
    }

    @Test
    public void testMinutesDuration() {
        assertEquals(1, Appointment.create().minutesDuration(1).build().minutesDuration());
    }

    @Test
    public void testSlot() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Appointment.create().slot(value).build().slot());
    }

    @Test
    public void testCreated() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, Appointment.create().created(value).build().created());
    }

    @Test
    public void testComment() {
        assertEquals("x", Appointment.create().comment("x").build().comment());
    }

    @Test
    public void testPatientInstruction() {
        assertEquals("x", Appointment.create().patientInstruction("x").build().patientInstruction());
    }

    @Test
    public void testBasedOn() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Appointment.create().basedOn(value).build().basedOn());
    }

    @Test
    public void testParticipant() {
        final java.util.List<Appointment.AppointmentParticipant> value = java.util.Collections.emptyList();
        assertEquals(value, Appointment.create().participant(value).build().participant());
    }

    @Test
    public void testRequestedPeriod() {
        final java.util.List<Period> value = java.util.Collections.emptyList();
        assertEquals(value, Appointment.create().requestedPeriod(value).build().requestedPeriod());
    }
}
