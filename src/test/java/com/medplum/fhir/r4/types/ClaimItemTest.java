/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ClaimItemTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Claim.ClaimItem(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Claim.ClaimItem.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Claim.ClaimItem x = Claim.ClaimItem.create().build();
        final Claim.ClaimItem y = Claim.ClaimItem.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Claim.ClaimItem.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Claim.ClaimItem.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Claim.ClaimItem.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testSequence() {
        assertEquals(1, Claim.ClaimItem.create().sequence(1).build().sequence());
    }

    @Test
    public void testCareTeamSequence() {
        final java.util.List<Integer> value = java.util.Collections.emptyList();
        assertEquals(value, Claim.ClaimItem.create().careTeamSequence(value).build().careTeamSequence());
    }

    @Test
    public void testDiagnosisSequence() {
        final java.util.List<Integer> value = java.util.Collections.emptyList();
        assertEquals(value, Claim.ClaimItem.create().diagnosisSequence(value).build().diagnosisSequence());
    }

    @Test
    public void testProcedureSequence() {
        final java.util.List<Integer> value = java.util.Collections.emptyList();
        assertEquals(value, Claim.ClaimItem.create().procedureSequence(value).build().procedureSequence());
    }

    @Test
    public void testInformationSequence() {
        final java.util.List<Integer> value = java.util.Collections.emptyList();
        assertEquals(value, Claim.ClaimItem.create().informationSequence(value).build().informationSequence());
    }

    @Test
    public void testRevenue() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Claim.ClaimItem.create().revenue(value).build().revenue());
    }

    @Test
    public void testCategory() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Claim.ClaimItem.create().category(value).build().category());
    }

    @Test
    public void testProductOrService() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Claim.ClaimItem.create().productOrService(value).build().productOrService());
    }

    @Test
    public void testModifier() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Claim.ClaimItem.create().modifier(value).build().modifier());
    }

    @Test
    public void testProgramCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Claim.ClaimItem.create().programCode(value).build().programCode());
    }

    @Test
    public void testServicedDate() {
        assertEquals("x", Claim.ClaimItem.create().servicedDate("x").build().servicedDate());
    }

    @Test
    public void testServicedPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, Claim.ClaimItem.create().servicedPeriod(value).build().servicedPeriod());
    }

    @Test
    public void testLocationCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Claim.ClaimItem.create().locationCodeableConcept(value).build().locationCodeableConcept());
    }

    @Test
    public void testLocationAddress() {
        final Address value = Address.create().build();
        assertEquals(value, Claim.ClaimItem.create().locationAddress(value).build().locationAddress());
    }

    @Test
    public void testLocationReference() {
        final Reference value = Reference.create().build();
        assertEquals(value, Claim.ClaimItem.create().locationReference(value).build().locationReference());
    }

    @Test
    public void testQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, Claim.ClaimItem.create().quantity(value).build().quantity());
    }

    @Test
    public void testUnitPrice() {
        final Money value = Money.create().build();
        assertEquals(value, Claim.ClaimItem.create().unitPrice(value).build().unitPrice());
    }

    @Test
    public void testFactor() {
        assertEquals(1.0, Claim.ClaimItem.create().factor(1.0).build().factor());
    }

    @Test
    public void testNet() {
        final Money value = Money.create().build();
        assertEquals(value, Claim.ClaimItem.create().net(value).build().net());
    }

    @Test
    public void testUdi() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Claim.ClaimItem.create().udi(value).build().udi());
    }

    @Test
    public void testBodySite() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Claim.ClaimItem.create().bodySite(value).build().bodySite());
    }

    @Test
    public void testSubSite() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Claim.ClaimItem.create().subSite(value).build().subSite());
    }

    @Test
    public void testEncounter() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Claim.ClaimItem.create().encounter(value).build().encounter());
    }

    @Test
    public void testDetail() {
        final java.util.List<Claim.ClaimDetail> value = java.util.Collections.emptyList();
        assertEquals(value, Claim.ClaimItem.create().detail(value).build().detail());
    }
}
