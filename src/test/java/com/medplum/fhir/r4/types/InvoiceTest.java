/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class InvoiceTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Invoice(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Invoice.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Invoice x = Invoice.create().build();
        final Invoice y = Invoice.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Invoice.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, Invoice.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, Invoice.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", Invoice.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, Invoice.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, Invoice.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Invoice.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Invoice.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, Invoice.create().identifier(value).build().identifier());
    }

    @Test
    public void testStatus() {
        assertEquals("x", Invoice.create().status("x").build().status());
    }

    @Test
    public void testCancelledReason() {
        assertEquals("x", Invoice.create().cancelledReason("x").build().cancelledReason());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Invoice.create().type(value).build().type());
    }

    @Test
    public void testSubject() {
        final Reference value = Reference.create().build();
        assertEquals(value, Invoice.create().subject(value).build().subject());
    }

    @Test
    public void testRecipient() {
        final Reference value = Reference.create().build();
        assertEquals(value, Invoice.create().recipient(value).build().recipient());
    }

    @Test
    public void testDate() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, Invoice.create().date(value).build().date());
    }

    @Test
    public void testParticipant() {
        final java.util.List<Invoice.InvoiceParticipant> value = java.util.Collections.emptyList();
        assertEquals(value, Invoice.create().participant(value).build().participant());
    }

    @Test
    public void testIssuer() {
        final Reference value = Reference.create().build();
        assertEquals(value, Invoice.create().issuer(value).build().issuer());
    }

    @Test
    public void testAccount() {
        final Reference value = Reference.create().build();
        assertEquals(value, Invoice.create().account(value).build().account());
    }

    @Test
    public void testLineItem() {
        final java.util.List<Invoice.InvoiceLineItem> value = java.util.Collections.emptyList();
        assertEquals(value, Invoice.create().lineItem(value).build().lineItem());
    }

    @Test
    public void testTotalPriceComponent() {
        final java.util.List<Invoice.InvoicePriceComponent> value = java.util.Collections.emptyList();
        assertEquals(value, Invoice.create().totalPriceComponent(value).build().totalPriceComponent());
    }

    @Test
    public void testTotalNet() {
        final Money value = Money.create().build();
        assertEquals(value, Invoice.create().totalNet(value).build().totalNet());
    }

    @Test
    public void testTotalGross() {
        final Money value = Money.create().build();
        assertEquals(value, Invoice.create().totalGross(value).build().totalGross());
    }

    @Test
    public void testPaymentTerms() {
        assertEquals("x", Invoice.create().paymentTerms("x").build().paymentTerms());
    }

    @Test
    public void testNote() {
        final java.util.List<Annotation> value = java.util.Collections.emptyList();
        assertEquals(value, Invoice.create().note(value).build().note());
    }
}
