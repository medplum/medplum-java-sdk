/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class SpecimenTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Specimen(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Specimen.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Specimen x = Specimen.create().build();
        final Specimen y = Specimen.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Specimen.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, Specimen.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, Specimen.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", Specimen.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, Specimen.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, Specimen.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Specimen.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Specimen.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, Specimen.create().identifier(value).build().identifier());
    }

    @Test
    public void testAccessionIdentifier() {
        final Identifier value = Identifier.create().build();
        assertEquals(value, Specimen.create().accessionIdentifier(value).build().accessionIdentifier());
    }

    @Test
    public void testStatus() {
        assertEquals("x", Specimen.create().status("x").build().status());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Specimen.create().type(value).build().type());
    }

    @Test
    public void testSubject() {
        final Reference value = Reference.create().build();
        assertEquals(value, Specimen.create().subject(value).build().subject());
    }

    @Test
    public void testReceivedTime() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, Specimen.create().receivedTime(value).build().receivedTime());
    }

    @Test
    public void testParent() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Specimen.create().parent(value).build().parent());
    }

    @Test
    public void testRequest() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Specimen.create().request(value).build().request());
    }

    @Test
    public void testCollection() {
        final Specimen.SpecimenCollection value = Specimen.SpecimenCollection.create().build();
        assertEquals(value, Specimen.create().collection(value).build().collection());
    }

    @Test
    public void testProcessing() {
        final java.util.List<Specimen.SpecimenProcessing> value = java.util.Collections.emptyList();
        assertEquals(value, Specimen.create().processing(value).build().processing());
    }

    @Test
    public void testContainer() {
        final java.util.List<Specimen.SpecimenContainer> value = java.util.Collections.emptyList();
        assertEquals(value, Specimen.create().container(value).build().container());
    }

    @Test
    public void testCondition() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Specimen.create().condition(value).build().condition());
    }

    @Test
    public void testNote() {
        final java.util.List<Annotation> value = java.util.Collections.emptyList();
        assertEquals(value, Specimen.create().note(value).build().note());
    }
}
