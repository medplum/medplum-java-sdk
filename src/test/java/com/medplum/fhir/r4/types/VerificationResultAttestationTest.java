/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class VerificationResultAttestationTest {

    @Test
    public void testConstructor() {
        assertNotNull(new VerificationResult.VerificationResultAttestation(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(VerificationResult.VerificationResultAttestation.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final VerificationResult.VerificationResultAttestation x = VerificationResult.VerificationResultAttestation.create().build();
        final VerificationResult.VerificationResultAttestation y = VerificationResult.VerificationResultAttestation.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", VerificationResult.VerificationResultAttestation.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, VerificationResult.VerificationResultAttestation.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, VerificationResult.VerificationResultAttestation.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testWho() {
        final Reference value = Reference.create().build();
        assertEquals(value, VerificationResult.VerificationResultAttestation.create().who(value).build().who());
    }

    @Test
    public void testOnBehalfOf() {
        final Reference value = Reference.create().build();
        assertEquals(value, VerificationResult.VerificationResultAttestation.create().onBehalfOf(value).build().onBehalfOf());
    }

    @Test
    public void testCommunicationMethod() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, VerificationResult.VerificationResultAttestation.create().communicationMethod(value).build().communicationMethod());
    }

    @Test
    public void testDate() {
        final java.time.LocalDate value = java.time.LocalDate.now();
        assertEquals(value, VerificationResult.VerificationResultAttestation.create().date(value).build().date());
    }

    @Test
    public void testSourceIdentityCertificate() {
        assertEquals("x", VerificationResult.VerificationResultAttestation.create().sourceIdentityCertificate("x").build().sourceIdentityCertificate());
    }

    @Test
    public void testProxyIdentityCertificate() {
        assertEquals("x", VerificationResult.VerificationResultAttestation.create().proxyIdentityCertificate("x").build().proxyIdentityCertificate());
    }

    @Test
    public void testProxySignature() {
        final Signature value = Signature.create().build();
        assertEquals(value, VerificationResult.VerificationResultAttestation.create().proxySignature(value).build().proxySignature());
    }

    @Test
    public void testSourceSignature() {
        final Signature value = Signature.create().build();
        assertEquals(value, VerificationResult.VerificationResultAttestation.create().sourceSignature(value).build().sourceSignature());
    }
}
