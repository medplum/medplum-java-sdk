/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class MedicinalProductAuthorizationJurisdictionalAuthorizationTest {

    @Test
    public void testConstructor() {
        assertNotNull(new MedicinalProductAuthorization.MedicinalProductAuthorizationJurisdictionalAuthorization(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
    assertNotNull(MedicinalProductAuthorization.MedicinalProductAuthorizationJurisdictionalAuthorization.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
    final MedicinalProductAuthorization.MedicinalProductAuthorizationJurisdictionalAuthorization x =
            MedicinalProductAuthorization.MedicinalProductAuthorizationJurisdictionalAuthorization.create().build();
    final MedicinalProductAuthorization.MedicinalProductAuthorizationJurisdictionalAuthorization y =
            MedicinalProductAuthorization.MedicinalProductAuthorizationJurisdictionalAuthorization.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", MedicinalProductAuthorization.MedicinalProductAuthorizationJurisdictionalAuthorization.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
    assertEquals(value,
            MedicinalProductAuthorization.MedicinalProductAuthorizationJurisdictionalAuthorization.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
    assertEquals(value,
            MedicinalProductAuthorization.MedicinalProductAuthorizationJurisdictionalAuthorization.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
    assertEquals(value,
            MedicinalProductAuthorization.MedicinalProductAuthorizationJurisdictionalAuthorization.create().identifier(value).build().identifier());
    }

    @Test
    public void testCountry() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, MedicinalProductAuthorization.MedicinalProductAuthorizationJurisdictionalAuthorization.create().country(value).build().country());
    }

    @Test
    public void testJurisdiction() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
    assertEquals(value,
            MedicinalProductAuthorization.MedicinalProductAuthorizationJurisdictionalAuthorization.create().jurisdiction(value).build().jurisdiction());
    }

    @Test
    public void testLegalStatusOfSupply() {
        final CodeableConcept value = CodeableConcept.create().build();
    assertEquals(value,
            MedicinalProductAuthorization.MedicinalProductAuthorizationJurisdictionalAuthorization.create().legalStatusOfSupply(value).build().legalStatusOfSupply());
    }

    @Test
    public void testValidityPeriod() {
        final Period value = Period.create().build();
    assertEquals(value,
            MedicinalProductAuthorization.MedicinalProductAuthorizationJurisdictionalAuthorization.create().validityPeriod(value).build().validityPeriod());
    }
}
