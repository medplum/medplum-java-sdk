/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class AuditEventAgentTest {

    @Test
    public void testConstructor() {
        assertNotNull(new AuditEvent.AuditEventAgent(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(AuditEvent.AuditEventAgent.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final AuditEvent.AuditEventAgent x = AuditEvent.AuditEventAgent.create().build();
        final AuditEvent.AuditEventAgent y = AuditEvent.AuditEventAgent.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", AuditEvent.AuditEventAgent.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, AuditEvent.AuditEventAgent.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, AuditEvent.AuditEventAgent.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, AuditEvent.AuditEventAgent.create().type(value).build().type());
    }

    @Test
    public void testRole() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, AuditEvent.AuditEventAgent.create().role(value).build().role());
    }

    @Test
    public void testWho() {
        final Reference value = Reference.create().build();
        assertEquals(value, AuditEvent.AuditEventAgent.create().who(value).build().who());
    }

    @Test
    public void testAltId() {
        assertEquals("x", AuditEvent.AuditEventAgent.create().altId("x").build().altId());
    }

    @Test
    public void testName() {
        assertEquals("x", AuditEvent.AuditEventAgent.create().name("x").build().name());
    }

    @Test
    public void testRequestor() {
        assertEquals(true, AuditEvent.AuditEventAgent.create().requestor(true).build().requestor());
    }

    @Test
    public void testLocation() {
        final Reference value = Reference.create().build();
        assertEquals(value, AuditEvent.AuditEventAgent.create().location(value).build().location());
    }

    @Test
    public void testPolicy() {
        final java.util.List<java.net.URI> value = java.util.Collections.emptyList();
        assertEquals(value, AuditEvent.AuditEventAgent.create().policy(value).build().policy());
    }

    @Test
    public void testMedia() {
        final Coding value = Coding.create().build();
        assertEquals(value, AuditEvent.AuditEventAgent.create().media(value).build().media());
    }

    @Test
    public void testNetwork() {
        final AuditEvent.AuditEventNetwork value = AuditEvent.AuditEventNetwork.create().build();
        assertEquals(value, AuditEvent.AuditEventAgent.create().network(value).build().network());
    }

    @Test
    public void testPurposeOfUse() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, AuditEvent.AuditEventAgent.create().purposeOfUse(value).build().purposeOfUse());
    }
}
