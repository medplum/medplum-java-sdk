/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ConsentProvisionTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Consent.ConsentProvision(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Consent.ConsentProvision.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Consent.ConsentProvision x = Consent.ConsentProvision.create().build();
        final Consent.ConsentProvision y = Consent.ConsentProvision.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Consent.ConsentProvision.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Consent.ConsentProvision.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Consent.ConsentProvision.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testType() {
        assertEquals("x", Consent.ConsentProvision.create().type("x").build().type());
    }

    @Test
    public void testPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, Consent.ConsentProvision.create().period(value).build().period());
    }

    @Test
    public void testActor() {
        final java.util.List<Consent.ConsentActor> value = java.util.Collections.emptyList();
        assertEquals(value, Consent.ConsentProvision.create().actor(value).build().actor());
    }

    @Test
    public void testAction() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Consent.ConsentProvision.create().action(value).build().action());
    }

    @Test
    public void testSecurityLabel() {
        final java.util.List<Coding> value = java.util.Collections.emptyList();
        assertEquals(value, Consent.ConsentProvision.create().securityLabel(value).build().securityLabel());
    }

    @Test
    public void testPurpose() {
        final java.util.List<Coding> value = java.util.Collections.emptyList();
        assertEquals(value, Consent.ConsentProvision.create().purpose(value).build().purpose());
    }

    @Test
    public void testClassValue() {
        final java.util.List<Coding> value = java.util.Collections.emptyList();
        assertEquals(value, Consent.ConsentProvision.create().classValue(value).build().classValue());
    }

    @Test
    public void testCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Consent.ConsentProvision.create().code(value).build().code());
    }

    @Test
    public void testDataPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, Consent.ConsentProvision.create().dataPeriod(value).build().dataPeriod());
    }

    @Test
    public void testData() {
        final java.util.List<Consent.ConsentData> value = java.util.Collections.emptyList();
        assertEquals(value, Consent.ConsentProvision.create().data(value).build().data());
    }

    @Test
    public void testProvision() {
        final java.util.List<Consent.ConsentProvision> value = java.util.Collections.emptyList();
        assertEquals(value, Consent.ConsentProvision.create().provision(value).build().provision());
    }
}
