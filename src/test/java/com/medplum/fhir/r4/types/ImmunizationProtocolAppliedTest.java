/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ImmunizationProtocolAppliedTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Immunization.ImmunizationProtocolApplied(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Immunization.ImmunizationProtocolApplied.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Immunization.ImmunizationProtocolApplied x = Immunization.ImmunizationProtocolApplied.create().build();
        final Immunization.ImmunizationProtocolApplied y = Immunization.ImmunizationProtocolApplied.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Immunization.ImmunizationProtocolApplied.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Immunization.ImmunizationProtocolApplied.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Immunization.ImmunizationProtocolApplied.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testSeries() {
        assertEquals("x", Immunization.ImmunizationProtocolApplied.create().series("x").build().series());
    }

    @Test
    public void testAuthority() {
        final Reference value = Reference.create().build();
        assertEquals(value, Immunization.ImmunizationProtocolApplied.create().authority(value).build().authority());
    }

    @Test
    public void testTargetDisease() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Immunization.ImmunizationProtocolApplied.create().targetDisease(value).build().targetDisease());
    }

    @Test
    public void testDoseNumberPositiveInt() {
        assertEquals(1, Immunization.ImmunizationProtocolApplied.create().doseNumberPositiveInt(1).build().doseNumberPositiveInt());
    }

    @Test
    public void testDoseNumberString() {
        assertEquals("x", Immunization.ImmunizationProtocolApplied.create().doseNumberString("x").build().doseNumberString());
    }

    @Test
    public void testSeriesDosesPositiveInt() {
        assertEquals(1, Immunization.ImmunizationProtocolApplied.create().seriesDosesPositiveInt(1).build().seriesDosesPositiveInt());
    }

    @Test
    public void testSeriesDosesString() {
        assertEquals("x", Immunization.ImmunizationProtocolApplied.create().seriesDosesString("x").build().seriesDosesString());
    }
}
