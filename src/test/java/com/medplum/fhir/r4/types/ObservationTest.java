/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ObservationTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Observation(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Observation.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Observation x = Observation.create().build();
        final Observation y = Observation.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Observation.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, Observation.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, Observation.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", Observation.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, Observation.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.create().identifier(value).build().identifier());
    }

    @Test
    public void testBasedOn() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.create().basedOn(value).build().basedOn());
    }

    @Test
    public void testPartOf() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.create().partOf(value).build().partOf());
    }

    @Test
    public void testStatus() {
        assertEquals("x", Observation.create().status("x").build().status());
    }

    @Test
    public void testCategory() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.create().category(value).build().category());
    }

    @Test
    public void testCode() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Observation.create().code(value).build().code());
    }

    @Test
    public void testSubject() {
        final Reference value = Reference.create().build();
        assertEquals(value, Observation.create().subject(value).build().subject());
    }

    @Test
    public void testFocus() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.create().focus(value).build().focus());
    }

    @Test
    public void testEncounter() {
        final Reference value = Reference.create().build();
        assertEquals(value, Observation.create().encounter(value).build().encounter());
    }

    @Test
    public void testEffectiveDateTime() {
        assertEquals("x", Observation.create().effectiveDateTime("x").build().effectiveDateTime());
    }

    @Test
    public void testEffectivePeriod() {
        final Period value = Period.create().build();
        assertEquals(value, Observation.create().effectivePeriod(value).build().effectivePeriod());
    }

    @Test
    public void testEffectiveTiming() {
        final Timing value = Timing.create().build();
        assertEquals(value, Observation.create().effectiveTiming(value).build().effectiveTiming());
    }

    @Test
    public void testEffectiveInstant() {
        assertEquals("x", Observation.create().effectiveInstant("x").build().effectiveInstant());
    }

    @Test
    public void testIssued() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, Observation.create().issued(value).build().issued());
    }

    @Test
    public void testPerformer() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.create().performer(value).build().performer());
    }

    @Test
    public void testValueQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, Observation.create().valueQuantity(value).build().valueQuantity());
    }

    @Test
    public void testValueCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Observation.create().valueCodeableConcept(value).build().valueCodeableConcept());
    }

    @Test
    public void testValueString() {
        assertEquals("x", Observation.create().valueString("x").build().valueString());
    }

    @Test
    public void testValueBoolean() {
        assertEquals(true, Observation.create().valueBoolean(true).build().valueBoolean());
    }

    @Test
    public void testValueInteger() {
        assertEquals(1, Observation.create().valueInteger(1).build().valueInteger());
    }

    @Test
    public void testValueRange() {
        final Range value = Range.create().build();
        assertEquals(value, Observation.create().valueRange(value).build().valueRange());
    }

    @Test
    public void testValueRatio() {
        final Ratio value = Ratio.create().build();
        assertEquals(value, Observation.create().valueRatio(value).build().valueRatio());
    }

    @Test
    public void testValueSampledData() {
        final SampledData value = SampledData.create().build();
        assertEquals(value, Observation.create().valueSampledData(value).build().valueSampledData());
    }

    @Test
    public void testValueTime() {
        assertEquals("x", Observation.create().valueTime("x").build().valueTime());
    }

    @Test
    public void testValueDateTime() {
        assertEquals("x", Observation.create().valueDateTime("x").build().valueDateTime());
    }

    @Test
    public void testValuePeriod() {
        final Period value = Period.create().build();
        assertEquals(value, Observation.create().valuePeriod(value).build().valuePeriod());
    }

    @Test
    public void testDataAbsentReason() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Observation.create().dataAbsentReason(value).build().dataAbsentReason());
    }

    @Test
    public void testInterpretation() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.create().interpretation(value).build().interpretation());
    }

    @Test
    public void testNote() {
        final java.util.List<Annotation> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.create().note(value).build().note());
    }

    @Test
    public void testBodySite() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Observation.create().bodySite(value).build().bodySite());
    }

    @Test
    public void testMethod() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Observation.create().method(value).build().method());
    }

    @Test
    public void testSpecimen() {
        final Reference value = Reference.create().build();
        assertEquals(value, Observation.create().specimen(value).build().specimen());
    }

    @Test
    public void testDevice() {
        final Reference value = Reference.create().build();
        assertEquals(value, Observation.create().device(value).build().device());
    }

    @Test
    public void testReferenceRange() {
        final java.util.List<Observation.ObservationReferenceRange> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.create().referenceRange(value).build().referenceRange());
    }

    @Test
    public void testHasMember() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.create().hasMember(value).build().hasMember());
    }

    @Test
    public void testDerivedFrom() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.create().derivedFrom(value).build().derivedFrom());
    }

    @Test
    public void testComponent() {
        final java.util.List<Observation.ObservationComponent> value = java.util.Collections.emptyList();
        assertEquals(value, Observation.create().component(value).build().component());
    }
}
