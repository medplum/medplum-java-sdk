/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ProcedureTest {

    @Test
    public void testConstructor() {
        assertNotNull(new Procedure(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(Procedure.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final Procedure x = Procedure.create().build();
        final Procedure y = Procedure.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", Procedure.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, Procedure.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        final java.net.URI value = java.net.URI.create("https://www.example.com");
        assertEquals(value, Procedure.create().implicitRules(value).build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", Procedure.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, Procedure.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().contained(value).build().contained());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().identifier(value).build().identifier());
    }

    @Test
    public void testInstantiatesCanonical() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().instantiatesCanonical(value).build().instantiatesCanonical());
    }

    @Test
    public void testInstantiatesUri() {
        final java.util.List<java.net.URI> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().instantiatesUri(value).build().instantiatesUri());
    }

    @Test
    public void testBasedOn() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().basedOn(value).build().basedOn());
    }

    @Test
    public void testPartOf() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().partOf(value).build().partOf());
    }

    @Test
    public void testStatus() {
        assertEquals("x", Procedure.create().status("x").build().status());
    }

    @Test
    public void testStatusReason() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Procedure.create().statusReason(value).build().statusReason());
    }

    @Test
    public void testCategory() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Procedure.create().category(value).build().category());
    }

    @Test
    public void testCode() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Procedure.create().code(value).build().code());
    }

    @Test
    public void testSubject() {
        final Reference value = Reference.create().build();
        assertEquals(value, Procedure.create().subject(value).build().subject());
    }

    @Test
    public void testEncounter() {
        final Reference value = Reference.create().build();
        assertEquals(value, Procedure.create().encounter(value).build().encounter());
    }

    @Test
    public void testPerformedDateTime() {
        assertEquals("x", Procedure.create().performedDateTime("x").build().performedDateTime());
    }

    @Test
    public void testPerformedPeriod() {
        final Period value = Period.create().build();
        assertEquals(value, Procedure.create().performedPeriod(value).build().performedPeriod());
    }

    @Test
    public void testPerformedString() {
        assertEquals("x", Procedure.create().performedString("x").build().performedString());
    }

    @Test
    public void testPerformedAge() {
        final Age value = Age.create().build();
        assertEquals(value, Procedure.create().performedAge(value).build().performedAge());
    }

    @Test
    public void testPerformedRange() {
        final Range value = Range.create().build();
        assertEquals(value, Procedure.create().performedRange(value).build().performedRange());
    }

    @Test
    public void testRecorder() {
        final Reference value = Reference.create().build();
        assertEquals(value, Procedure.create().recorder(value).build().recorder());
    }

    @Test
    public void testAsserter() {
        final Reference value = Reference.create().build();
        assertEquals(value, Procedure.create().asserter(value).build().asserter());
    }

    @Test
    public void testPerformer() {
        final java.util.List<Procedure.ProcedurePerformer> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().performer(value).build().performer());
    }

    @Test
    public void testLocation() {
        final Reference value = Reference.create().build();
        assertEquals(value, Procedure.create().location(value).build().location());
    }

    @Test
    public void testReasonCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().reasonCode(value).build().reasonCode());
    }

    @Test
    public void testReasonReference() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().reasonReference(value).build().reasonReference());
    }

    @Test
    public void testBodySite() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().bodySite(value).build().bodySite());
    }

    @Test
    public void testOutcome() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, Procedure.create().outcome(value).build().outcome());
    }

    @Test
    public void testReport() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().report(value).build().report());
    }

    @Test
    public void testComplication() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().complication(value).build().complication());
    }

    @Test
    public void testComplicationDetail() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().complicationDetail(value).build().complicationDetail());
    }

    @Test
    public void testFollowUp() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().followUp(value).build().followUp());
    }

    @Test
    public void testNote() {
        final java.util.List<Annotation> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().note(value).build().note());
    }

    @Test
    public void testFocalDevice() {
        final java.util.List<Procedure.ProcedureFocalDevice> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().focalDevice(value).build().focalDevice());
    }

    @Test
    public void testUsedReference() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().usedReference(value).build().usedReference());
    }

    @Test
    public void testUsedCode() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, Procedure.create().usedCode(value).build().usedCode());
    }
}
