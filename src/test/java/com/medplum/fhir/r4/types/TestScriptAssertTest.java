/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class TestScriptAssertTest {

    @Test
    public void testConstructor() {
        assertNotNull(new TestScript.TestScriptAssert(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(TestScript.TestScriptAssert.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final TestScript.TestScriptAssert x = TestScript.TestScriptAssert.create().build();
        final TestScript.TestScriptAssert y = TestScript.TestScriptAssert.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", TestScript.TestScriptAssert.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, TestScript.TestScriptAssert.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, TestScript.TestScriptAssert.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testLabel() {
        assertEquals("x", TestScript.TestScriptAssert.create().label("x").build().label());
    }

    @Test
    public void testDescription() {
        assertEquals("x", TestScript.TestScriptAssert.create().description("x").build().description());
    }

    @Test
    public void testDirection() {
        assertEquals("x", TestScript.TestScriptAssert.create().direction("x").build().direction());
    }

    @Test
    public void testCompareToSourceId() {
        assertEquals("x", TestScript.TestScriptAssert.create().compareToSourceId("x").build().compareToSourceId());
    }

    @Test
    public void testCompareToSourceExpression() {
        assertEquals("x", TestScript.TestScriptAssert.create().compareToSourceExpression("x").build().compareToSourceExpression());
    }

    @Test
    public void testCompareToSourcePath() {
        assertEquals("x", TestScript.TestScriptAssert.create().compareToSourcePath("x").build().compareToSourcePath());
    }

    @Test
    public void testContentType() {
        assertEquals("x", TestScript.TestScriptAssert.create().contentType("x").build().contentType());
    }

    @Test
    public void testExpression() {
        assertEquals("x", TestScript.TestScriptAssert.create().expression("x").build().expression());
    }

    @Test
    public void testHeaderField() {
        assertEquals("x", TestScript.TestScriptAssert.create().headerField("x").build().headerField());
    }

    @Test
    public void testMinimumId() {
        assertEquals("x", TestScript.TestScriptAssert.create().minimumId("x").build().minimumId());
    }

    @Test
    public void testNavigationLinks() {
        assertEquals(true, TestScript.TestScriptAssert.create().navigationLinks(true).build().navigationLinks());
    }

    @Test
    public void testOperator() {
        assertEquals("x", TestScript.TestScriptAssert.create().operator("x").build().operator());
    }

    @Test
    public void testPath() {
        assertEquals("x", TestScript.TestScriptAssert.create().path("x").build().path());
    }

    @Test
    public void testRequestMethod() {
        assertEquals("x", TestScript.TestScriptAssert.create().requestMethod("x").build().requestMethod());
    }

    @Test
    public void testRequestURL() {
        assertEquals("x", TestScript.TestScriptAssert.create().requestURL("x").build().requestURL());
    }

    @Test
    public void testResource() {
        assertEquals("x", TestScript.TestScriptAssert.create().resource("x").build().resource());
    }

    @Test
    public void testResponse() {
        assertEquals("x", TestScript.TestScriptAssert.create().response("x").build().response());
    }

    @Test
    public void testResponseCode() {
        assertEquals("x", TestScript.TestScriptAssert.create().responseCode("x").build().responseCode());
    }

    @Test
    public void testSourceId() {
        assertEquals("x", TestScript.TestScriptAssert.create().sourceId("x").build().sourceId());
    }

    @Test
    public void testValidateProfileId() {
        assertEquals("x", TestScript.TestScriptAssert.create().validateProfileId("x").build().validateProfileId());
    }

    @Test
    public void testValue() {
        assertEquals("x", TestScript.TestScriptAssert.create().value("x").build().value());
    }

    @Test
    public void testWarningOnly() {
        assertEquals(true, TestScript.TestScriptAssert.create().warningOnly(true).build().warningOnly());
    }
}
