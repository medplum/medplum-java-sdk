/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class SubstanceSpecificationPropertyTest {

    @Test
    public void testConstructor() {
        assertNotNull(new SubstanceSpecification.SubstanceSpecificationProperty(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(SubstanceSpecification.SubstanceSpecificationProperty.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final SubstanceSpecification.SubstanceSpecificationProperty x = SubstanceSpecification.SubstanceSpecificationProperty.create().build();
        final SubstanceSpecification.SubstanceSpecificationProperty y = SubstanceSpecification.SubstanceSpecificationProperty.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", SubstanceSpecification.SubstanceSpecificationProperty.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationProperty.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationProperty.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testCategory() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationProperty.create().category(value).build().category());
    }

    @Test
    public void testCode() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationProperty.create().code(value).build().code());
    }

    @Test
    public void testParameters() {
        assertEquals("x", SubstanceSpecification.SubstanceSpecificationProperty.create().parameters("x").build().parameters());
    }

    @Test
    public void testDefiningSubstanceReference() {
        final Reference value = Reference.create().build();
    assertEquals(value,
            SubstanceSpecification.SubstanceSpecificationProperty.create().definingSubstanceReference(value).build().definingSubstanceReference());
    }

    @Test
    public void testDefiningSubstanceCodeableConcept() {
        final CodeableConcept value = CodeableConcept.create().build();
    assertEquals(value,
            SubstanceSpecification.SubstanceSpecificationProperty.create().definingSubstanceCodeableConcept(value).build().definingSubstanceCodeableConcept());
    }

    @Test
    public void testAmountQuantity() {
        final Quantity value = Quantity.create().build();
        assertEquals(value, SubstanceSpecification.SubstanceSpecificationProperty.create().amountQuantity(value).build().amountQuantity());
    }

    @Test
    public void testAmountString() {
        assertEquals("x", SubstanceSpecification.SubstanceSpecificationProperty.create().amountString("x").build().amountString());
    }
}
