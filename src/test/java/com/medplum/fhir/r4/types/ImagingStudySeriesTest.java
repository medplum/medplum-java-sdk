/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class ImagingStudySeriesTest {

    @Test
    public void testConstructor() {
        assertNotNull(new ImagingStudy.ImagingStudySeries(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(ImagingStudy.ImagingStudySeries.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testCopyAll() {
        final ImagingStudy.ImagingStudySeries x = ImagingStudy.ImagingStudySeries.create().build();
        final ImagingStudy.ImagingStudySeries y = ImagingStudy.ImagingStudySeries.create().copyAll(x).build();
        assertEquals(x, y);
    }

    @Test
    public void testId() {
        assertEquals("x", ImagingStudy.ImagingStudySeries.create().id("x").build().id());
    }

    @Test
    public void testExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.ImagingStudySeries.create().extension(value).build().extension());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.ImagingStudySeries.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testUid() {
        assertEquals("x", ImagingStudy.ImagingStudySeries.create().uid("x").build().uid());
    }

    @Test
    public void testNumber() {
        assertEquals(1, ImagingStudy.ImagingStudySeries.create().number(1).build().number());
    }

    @Test
    public void testModality() {
        final Coding value = Coding.create().build();
        assertEquals(value, ImagingStudy.ImagingStudySeries.create().modality(value).build().modality());
    }

    @Test
    public void testDescription() {
        assertEquals("x", ImagingStudy.ImagingStudySeries.create().description("x").build().description());
    }

    @Test
    public void testNumberOfInstances() {
        assertEquals(1, ImagingStudy.ImagingStudySeries.create().numberOfInstances(1).build().numberOfInstances());
    }

    @Test
    public void testEndpoint() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.ImagingStudySeries.create().endpoint(value).build().endpoint());
    }

    @Test
    public void testBodySite() {
        final Coding value = Coding.create().build();
        assertEquals(value, ImagingStudy.ImagingStudySeries.create().bodySite(value).build().bodySite());
    }

    @Test
    public void testLaterality() {
        final Coding value = Coding.create().build();
        assertEquals(value, ImagingStudy.ImagingStudySeries.create().laterality(value).build().laterality());
    }

    @Test
    public void testSpecimen() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.ImagingStudySeries.create().specimen(value).build().specimen());
    }

    @Test
    public void testStarted() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, ImagingStudy.ImagingStudySeries.create().started(value).build().started());
    }

    @Test
    public void testPerformer() {
        final java.util.List<ImagingStudy.ImagingStudyPerformer> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.ImagingStudySeries.create().performer(value).build().performer());
    }

    @Test
    public void testInstance() {
        final java.util.List<ImagingStudy.ImagingStudyInstance> value = java.util.Collections.emptyList();
        assertEquals(value, ImagingStudy.ImagingStudySeries.create().instance(value).build().instance());
    }
}
