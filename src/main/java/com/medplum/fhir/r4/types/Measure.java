/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * The Measure resource provides the definition of a quality measure.
 */
public class Measure extends DomainResource {
    public static final String RESOURCE_TYPE = "Measure";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Measure(final JsonObject data) {
        super(data);
    }

    /**
     * An absolute URI that is used to identify this measure when it is
     * referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative
     * instance of this measure is (or will be) published. This URL can be
     * the target of a canonical reference. It SHALL remain the same when the
     * measure is stored on different servers.
     */
    public java.net.URI url() {
        return getUri(FhirPropertyNames.PROPERTY_URL);
    }

    /**
     * A formal identifier that is used to identify this measure when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The identifier that is used to identify this version of the measure
     * when it is referenced in a specification, model, design or instance.
     * This is an arbitrary value managed by the measure author and is not
     * expected to be globally unique. For example, it might be a timestamp
     * (e.g. yyyymmdd) if a managed version is not available. There is also
     * no expectation that versions can be placed in a lexicographical
     * sequence. To provide a version consistent with the Decision Support
     * Service specification, use the format Major.Minor.Revision (e.g.
     * 1.0.0). For more information on versioning knowledge assets, refer to
     * the Decision Support Service specification. Note that a version is
     * required for non-experimental active artifacts.
     */
    public String version() {
        return getString(FhirPropertyNames.PROPERTY_VERSION);
    }

    /**
     * A natural language name identifying the measure. This name should be
     * usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    public String name() {
        return getString(FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * A short, descriptive, user-friendly title for the measure.
     */
    public String title() {
        return getString(FhirPropertyNames.PROPERTY_TITLE);
    }

    /**
     * An explanatory or alternate title for the measure giving additional
     * information about its content.
     */
    public String subtitle() {
        return getString(FhirPropertyNames.PROPERTY_SUBTITLE);
    }

    /**
     * The status of this measure. Enables tracking the life-cycle of the
     * content.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * A Boolean value to indicate that this measure is authored for testing
     * purposes (or education/evaluation/marketing) and is not intended to be
     * used for genuine usage.
     */
    public Boolean experimental() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_EXPERIMENTAL);
    }

    /**
     * The intended subjects for the measure. If this element is not
     * provided, a Patient subject is assumed, but the subject of the measure
     * can be anything.
     */
    public CodeableConcept subjectCodeableConcept() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_SUBJECT_CODEABLE_CONCEPT);
    }

    /**
     * The intended subjects for the measure. If this element is not
     * provided, a Patient subject is assumed, but the subject of the measure
     * can be anything.
     */
    public Reference subjectReference() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT_REFERENCE);
    }

    /**
     * The date  (and optionally time) when the measure was published. The
     * date must change when the business version changes and it must change
     * if the status code changes. In addition, it should change when the
     * substantive content of the measure changes.
     */
    public java.time.Instant date() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE);
    }

    /**
     * The name of the organization or individual that published the measure.
     */
    public String publisher() {
        return getString(FhirPropertyNames.PROPERTY_PUBLISHER);
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_CONTACT);
    }

    /**
     * A free text natural language description of the measure from a
     * consumer's perspective.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs
     * (insurance plans, studies, ...) and may be used to assist with
     * indexing and searching for appropriate measure instances.
     */
    public java.util.List<UsageContext> useContext() {
        return getList(UsageContext.class, FhirPropertyNames.PROPERTY_USE_CONTEXT);
    }

    /**
     * A legal or geographic region in which the measure is intended to be
     * used.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_JURISDICTION);
    }

    /**
     * Explanation of why this measure is needed and why it has been designed
     * as it has.
     */
    public String purpose() {
        return getString(FhirPropertyNames.PROPERTY_PURPOSE);
    }

    /**
     * A detailed description, from a clinical perspective, of how the
     * measure is used.
     */
    public String usage() {
        return getString(FhirPropertyNames.PROPERTY_USAGE);
    }

    /**
     * A copyright statement relating to the measure and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the measure.
     */
    public String copyright() {
        return getString(FhirPropertyNames.PROPERTY_COPYRIGHT);
    }

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for
     * usage.
     */
    public java.time.LocalDate approvalDate() {
        return getLocalDate(FhirPropertyNames.PROPERTY_APPROVAL_DATE);
    }

    /**
     * The date on which the resource content was last reviewed. Review
     * happens periodically after approval but does not change the original
     * approval date.
     */
    public java.time.LocalDate lastReviewDate() {
        return getLocalDate(FhirPropertyNames.PROPERTY_LAST_REVIEW_DATE);
    }

    /**
     * The period during which the measure content was or is planned to be in
     * active use.
     */
    public Period effectivePeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD);
    }

    /**
     * Descriptive topics related to the content of the measure. Topics
     * provide a high-level categorization grouping types of measures that
     * can be useful for filtering and searching.
     */
    public java.util.List<CodeableConcept> topic() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_TOPIC);
    }

    /**
     * An individiual or organization primarily involved in the creation and
     * maintenance of the content.
     */
    public java.util.List<ContactDetail> author() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_AUTHOR);
    }

    /**
     * An individual or organization primarily responsible for internal
     * coherence of the content.
     */
    public java.util.List<ContactDetail> editor() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_EDITOR);
    }

    /**
     * An individual or organization primarily responsible for review of some
     * aspect of the content.
     */
    public java.util.List<ContactDetail> reviewer() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_REVIEWER);
    }

    /**
     * An individual or organization responsible for officially endorsing the
     * content for use in some setting.
     */
    public java.util.List<ContactDetail> endorser() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_ENDORSER);
    }

    /**
     * Related artifacts such as additional documentation, justification, or
     * bibliographic references.
     */
    public java.util.List<RelatedArtifact> relatedArtifact() {
        return getList(RelatedArtifact.class, FhirPropertyNames.PROPERTY_RELATED_ARTIFACT);
    }

    /**
     * A reference to a Library resource containing the formal logic used by
     * the measure.
     */
    public java.util.List<String> library() {
        return getList(String.class, FhirPropertyNames.PROPERTY_LIBRARY);
    }

    /**
     * Notices and disclaimers regarding the use of the measure or related to
     * intellectual property (such as code systems) referenced by the
     * measure.
     */
    public String disclaimer() {
        return getString(FhirPropertyNames.PROPERTY_DISCLAIMER);
    }

    /**
     * Indicates how the calculation is performed for the measure, including
     * proportion, ratio, continuous-variable, and cohort. The value set is
     * extensible, allowing additional measure scoring types to be
     * represented.
     */
    public CodeableConcept scoring() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_SCORING);
    }

    /**
     * If this is a composite measure, the scoring method used to combine the
     * component measures to determine the composite score.
     */
    public CodeableConcept compositeScoring() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_COMPOSITE_SCORING);
    }

    /**
     * Indicates whether the measure is used to examine a process, an outcome
     * over time, a patient-reported outcome, or a structure measure such as
     * utilization.
     */
    public java.util.List<CodeableConcept> type() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * A description of the risk adjustment factors that may impact the
     * resulting score for the measure and how they may be accounted for when
     * computing and reporting measure results.
     */
    public String riskAdjustment() {
        return getString(FhirPropertyNames.PROPERTY_RISK_ADJUSTMENT);
    }

    /**
     * Describes how to combine the information calculated, based on logic in
     * each of several populations, into one summarized result.
     */
    public String rateAggregation() {
        return getString(FhirPropertyNames.PROPERTY_RATE_AGGREGATION);
    }

    /**
     * Provides a succinct statement of the need for the measure. Usually
     * includes statements pertaining to importance criterion: impact, gap in
     * care, and evidence.
     */
    public String rationale() {
        return getString(FhirPropertyNames.PROPERTY_RATIONALE);
    }

    /**
     * Provides a summary of relevant clinical guidelines or other clinical
     * recommendations supporting the measure.
     */
    public String clinicalRecommendationStatement() {
        return getString(FhirPropertyNames.PROPERTY_CLINICAL_RECOMMENDATION_STATEMENT);
    }

    /**
     * Information on whether an increase or decrease in score is the
     * preferred result (e.g., a higher score indicates better quality OR a
     * lower score indicates better quality OR quality is within a range).
     */
    public CodeableConcept improvementNotation() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_IMPROVEMENT_NOTATION);
    }

    /**
     * Provides a description of an individual term used within the measure.
     */
    public java.util.List<String> definition() {
        return getList(String.class, FhirPropertyNames.PROPERTY_DEFINITION);
    }

    /**
     * Additional guidance for the measure including how it can be used in a
     * clinical context, and the intent of the measure.
     */
    public String guidance() {
        return getString(FhirPropertyNames.PROPERTY_GUIDANCE);
    }

    /**
     * A group of population criteria for the measure.
     */
    public java.util.List<MeasureGroup> group() {
        return getList(MeasureGroup.class, FhirPropertyNames.PROPERTY_GROUP);
    }

    /**
     * The supplemental data criteria for the measure report, specified as
     * either the name of a valid CQL expression within a referenced library,
     * or a valid FHIR Resource Path.
     */
    public java.util.List<MeasureSupplementalData> supplementalData() {
        return getList(MeasureSupplementalData.class, FhirPropertyNames.PROPERTY_SUPPLEMENTAL_DATA);
    }

    public static final class Builder extends DomainResource.Builder<Measure, Measure.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder url(final java.net.URI url) {
            b.add(FhirPropertyNames.PROPERTY_URL, url.toString());
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder version(final String version) {
            b.add(FhirPropertyNames.PROPERTY_VERSION, version);
            return this;
        }

        public Builder name(final String name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, name);
            return this;
        }

        public Builder title(final String title) {
            b.add(FhirPropertyNames.PROPERTY_TITLE, title);
            return this;
        }

        public Builder subtitle(final String subtitle) {
            b.add(FhirPropertyNames.PROPERTY_SUBTITLE, subtitle);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder experimental(final Boolean experimental) {
            b.add(FhirPropertyNames.PROPERTY_EXPERIMENTAL, experimental);
            return this;
        }

        public Builder subjectCodeableConcept(final CodeableConcept subjectCodeableConcept) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT_CODEABLE_CONCEPT, subjectCodeableConcept);
            return this;
        }

        public Builder subjectReference(final Reference subjectReference) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT_REFERENCE, subjectReference);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder publisher(final String publisher) {
            b.add(FhirPropertyNames.PROPERTY_PUBLISHER, publisher);
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(FhirPropertyNames.PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder useContext(final java.util.List<UsageContext> useContext) {
            b.add(FhirPropertyNames.PROPERTY_USE_CONTEXT, FhirObject.toArray(useContext));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(FhirPropertyNames.PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder purpose(final String purpose) {
            b.add(FhirPropertyNames.PROPERTY_PURPOSE, purpose);
            return this;
        }

        public Builder usage(final String usage) {
            b.add(FhirPropertyNames.PROPERTY_USAGE, usage);
            return this;
        }

        public Builder copyright(final String copyright) {
            b.add(FhirPropertyNames.PROPERTY_COPYRIGHT, copyright);
            return this;
        }

        public Builder approvalDate(final java.time.LocalDate approvalDate) {
            b.add(FhirPropertyNames.PROPERTY_APPROVAL_DATE, approvalDate.toString());
            return this;
        }

        public Builder lastReviewDate(final java.time.LocalDate lastReviewDate) {
            b.add(FhirPropertyNames.PROPERTY_LAST_REVIEW_DATE, lastReviewDate.toString());
            return this;
        }

        public Builder effectivePeriod(final Period effectivePeriod) {
            b.add(FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD, effectivePeriod);
            return this;
        }

        public Builder topic(final java.util.List<CodeableConcept> topic) {
            b.add(FhirPropertyNames.PROPERTY_TOPIC, FhirObject.toArray(topic));
            return this;
        }

        public Builder author(final java.util.List<ContactDetail> author) {
            b.add(FhirPropertyNames.PROPERTY_AUTHOR, FhirObject.toArray(author));
            return this;
        }

        public Builder editor(final java.util.List<ContactDetail> editor) {
            b.add(FhirPropertyNames.PROPERTY_EDITOR, FhirObject.toArray(editor));
            return this;
        }

        public Builder reviewer(final java.util.List<ContactDetail> reviewer) {
            b.add(FhirPropertyNames.PROPERTY_REVIEWER, FhirObject.toArray(reviewer));
            return this;
        }

        public Builder endorser(final java.util.List<ContactDetail> endorser) {
            b.add(FhirPropertyNames.PROPERTY_ENDORSER, FhirObject.toArray(endorser));
            return this;
        }

        public Builder relatedArtifact(final java.util.List<RelatedArtifact> relatedArtifact) {
            b.add(FhirPropertyNames.PROPERTY_RELATED_ARTIFACT, FhirObject.toArray(relatedArtifact));
            return this;
        }

        public Builder library(final java.util.List<String> library) {
            b.add(FhirPropertyNames.PROPERTY_LIBRARY, FhirObject.toStringArray(library));
            return this;
        }

        public Builder disclaimer(final String disclaimer) {
            b.add(FhirPropertyNames.PROPERTY_DISCLAIMER, disclaimer);
            return this;
        }

        public Builder scoring(final CodeableConcept scoring) {
            b.add(FhirPropertyNames.PROPERTY_SCORING, scoring);
            return this;
        }

        public Builder compositeScoring(final CodeableConcept compositeScoring) {
            b.add(FhirPropertyNames.PROPERTY_COMPOSITE_SCORING, compositeScoring);
            return this;
        }

        public Builder type(final java.util.List<CodeableConcept> type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, FhirObject.toArray(type));
            return this;
        }

        public Builder riskAdjustment(final String riskAdjustment) {
            b.add(FhirPropertyNames.PROPERTY_RISK_ADJUSTMENT, riskAdjustment);
            return this;
        }

        public Builder rateAggregation(final String rateAggregation) {
            b.add(FhirPropertyNames.PROPERTY_RATE_AGGREGATION, rateAggregation);
            return this;
        }

        public Builder rationale(final String rationale) {
            b.add(FhirPropertyNames.PROPERTY_RATIONALE, rationale);
            return this;
        }

        public Builder clinicalRecommendationStatement(final String clinicalRecommendationStatement) {
            b.add(FhirPropertyNames.PROPERTY_CLINICAL_RECOMMENDATION_STATEMENT, clinicalRecommendationStatement);
            return this;
        }

        public Builder improvementNotation(final CodeableConcept improvementNotation) {
            b.add(FhirPropertyNames.PROPERTY_IMPROVEMENT_NOTATION, improvementNotation);
            return this;
        }

        public Builder definition(final java.util.List<String> definition) {
            b.add(FhirPropertyNames.PROPERTY_DEFINITION, FhirObject.toStringArray(definition));
            return this;
        }

        public Builder guidance(final String guidance) {
            b.add(FhirPropertyNames.PROPERTY_GUIDANCE, guidance);
            return this;
        }

        public Builder group(final java.util.List<MeasureGroup> group) {
            b.add(FhirPropertyNames.PROPERTY_GROUP, FhirObject.toArray(group));
            return this;
        }

        public Builder supplementalData(final java.util.List<MeasureSupplementalData> supplementalData) {
            b.add(FhirPropertyNames.PROPERTY_SUPPLEMENTAL_DATA, FhirObject.toArray(supplementalData));
            return this;
        }

        public Measure build() {
            return new Measure(b.build());
        }
    }

    /**
     * The Measure resource provides the definition of a quality measure.
     */
    public static class MeasureComponent extends FhirObject {
        public static final String RESOURCE_TYPE = "MeasureComponent";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MeasureComponent(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Indicates a meaning for the stratifier component. This can be as
         * simple as a unique identifier, or it can establish meaning in a
         * broader context by drawing from a terminology, allowing stratifiers to
         * be correlated across measures.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * The human readable description of this stratifier criteria component.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * An expression that specifies the criteria for this component of the
         * stratifier. This is typically the name of an expression defined within
         * a referenced library, but it may also be a path to a stratifier
         * element.
         */
        public Expression criteria() {
            return getObject(Expression.class, FhirPropertyNames.PROPERTY_CRITERIA);
        }

        public static final class Builder extends FhirObject.Builder<MeasureComponent, MeasureComponent.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder criteria(final Expression criteria) {
                b.add(FhirPropertyNames.PROPERTY_CRITERIA, criteria);
                return this;
            }

            public MeasureComponent build() {
                return new MeasureComponent(b.build());
            }
        }
    }

    /**
     * The Measure resource provides the definition of a quality measure.
     */
    public static class MeasureGroup extends FhirObject {
        public static final String RESOURCE_TYPE = "MeasureGroup";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MeasureGroup(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Indicates a meaning for the group. This can be as simple as a unique
         * identifier, or it can establish meaning in a broader context by
         * drawing from a terminology, allowing groups to be correlated across
         * measures.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * The human readable description of this population group.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * A population criteria for the measure.
         */
        public java.util.List<MeasurePopulation> population() {
            return getList(MeasurePopulation.class, FhirPropertyNames.PROPERTY_POPULATION);
        }

        /**
         * The stratifier criteria for the measure report, specified as either
         * the name of a valid CQL expression defined within a referenced library
         * or a valid FHIR Resource Path.
         */
        public java.util.List<MeasureStratifier> stratifier() {
            return getList(MeasureStratifier.class, FhirPropertyNames.PROPERTY_STRATIFIER);
        }

        public static final class Builder extends FhirObject.Builder<MeasureGroup, MeasureGroup.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder population(final java.util.List<MeasurePopulation> population) {
                b.add(FhirPropertyNames.PROPERTY_POPULATION, FhirObject.toArray(population));
                return this;
            }

            public Builder stratifier(final java.util.List<MeasureStratifier> stratifier) {
                b.add(FhirPropertyNames.PROPERTY_STRATIFIER, FhirObject.toArray(stratifier));
                return this;
            }

            public MeasureGroup build() {
                return new MeasureGroup(b.build());
            }
        }
    }

    /**
     * The Measure resource provides the definition of a quality measure.
     */
    public static class MeasurePopulation extends FhirObject {
        public static final String RESOURCE_TYPE = "MeasurePopulation";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MeasurePopulation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The type of population criteria.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * The human readable description of this population criteria.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * An expression that specifies the criteria for the population,
         * typically the name of an expression in a library.
         */
        public Expression criteria() {
            return getObject(Expression.class, FhirPropertyNames.PROPERTY_CRITERIA);
        }

        public static final class Builder extends FhirObject.Builder<MeasurePopulation, MeasurePopulation.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder criteria(final Expression criteria) {
                b.add(FhirPropertyNames.PROPERTY_CRITERIA, criteria);
                return this;
            }

            public MeasurePopulation build() {
                return new MeasurePopulation(b.build());
            }
        }
    }

    /**
     * The Measure resource provides the definition of a quality measure.
     */
    public static class MeasureStratifier extends FhirObject {
        public static final String RESOURCE_TYPE = "MeasureStratifier";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MeasureStratifier(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Indicates a meaning for the stratifier. This can be as simple as a
         * unique identifier, or it can establish meaning in a broader context by
         * drawing from a terminology, allowing stratifiers to be correlated
         * across measures.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * The human readable description of this stratifier criteria.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * An expression that specifies the criteria for the stratifier. This is
         * typically the name of an expression defined within a referenced
         * library, but it may also be a path to a stratifier element.
         */
        public Expression criteria() {
            return getObject(Expression.class, FhirPropertyNames.PROPERTY_CRITERIA);
        }

        /**
         * A component of the stratifier criteria for the measure report,
         * specified as either the name of a valid CQL expression defined within
         * a referenced library or a valid FHIR Resource Path.
         */
        public java.util.List<MeasureComponent> component() {
            return getList(MeasureComponent.class, FhirPropertyNames.PROPERTY_COMPONENT);
        }

        public static final class Builder extends FhirObject.Builder<MeasureStratifier, MeasureStratifier.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder criteria(final Expression criteria) {
                b.add(FhirPropertyNames.PROPERTY_CRITERIA, criteria);
                return this;
            }

            public Builder component(final java.util.List<MeasureComponent> component) {
                b.add(FhirPropertyNames.PROPERTY_COMPONENT, FhirObject.toArray(component));
                return this;
            }

            public MeasureStratifier build() {
                return new MeasureStratifier(b.build());
            }
        }
    }

    /**
     * The Measure resource provides the definition of a quality measure.
     */
    public static class MeasureSupplementalData extends FhirObject {
        public static final String RESOURCE_TYPE = "MeasureSupplementalData";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MeasureSupplementalData(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Indicates a meaning for the supplemental data. This can be as simple
         * as a unique identifier, or it can establish meaning in a broader
         * context by drawing from a terminology, allowing supplemental data to
         * be correlated across measures.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * An indicator of the intended usage for the supplemental data element.
         * Supplemental data indicates the data is additional information
         * requested to augment the measure information. Risk adjustment factor
         * indicates the data is additional information used to calculate risk
         * adjustment factors when applying a risk model to the measure
         * calculation.
         */
        public java.util.List<CodeableConcept> usage() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_USAGE);
        }

        /**
         * The human readable description of this supplemental data.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * The criteria for the supplemental data. This is typically the name of
         * a valid expression defined within a referenced library, but it may
         * also be a path to a specific data element. The criteria defines the
         * data to be returned for this element.
         */
        public Expression criteria() {
            return getObject(Expression.class, FhirPropertyNames.PROPERTY_CRITERIA);
        }

        public static final class Builder extends FhirObject.Builder<MeasureSupplementalData, MeasureSupplementalData.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder usage(final java.util.List<CodeableConcept> usage) {
                b.add(FhirPropertyNames.PROPERTY_USAGE, FhirObject.toArray(usage));
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder criteria(final Expression criteria) {
                b.add(FhirPropertyNames.PROPERTY_CRITERIA, criteria);
                return this;
            }

            public MeasureSupplementalData build() {
                return new MeasureSupplementalData(b.build());
            }
        }
    }
}
