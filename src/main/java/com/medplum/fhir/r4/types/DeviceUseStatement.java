/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A record of a device being used by a patient where the record is the
 * result of a report from the patient or another clinician.
 */
public class DeviceUseStatement extends DomainResource {
    public static final String RESOURCE_TYPE = "DeviceUseStatement";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public DeviceUseStatement(final JsonObject data) {
        super(data);
    }

    /**
     * An external identifier for this statement such as an IRI.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * A plan, proposal or order that is fulfilled in whole or in part by
     * this DeviceUseStatement.
     */
    public java.util.List<Reference> basedOn() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_BASED_ON);
    }

    /**
     * A code representing the patient or other source's judgment about the
     * state of the device used that this statement is about.  Generally this
     * will be active or completed.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * The patient who used the device.
     */
    public Reference subject() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * Allows linking the DeviceUseStatement to the underlying Request, or to
     * other information that supports or is used to derive the
     * DeviceUseStatement.
     */
    public java.util.List<Reference> derivedFrom() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_DERIVED_FROM);
    }

    /**
     * How often the device was used.
     */
    public Timing timingTiming() {
        return getObject(Timing.class, FhirPropertyNames.PROPERTY_TIMING_TIMING);
    }

    /**
     * How often the device was used.
     */
    public Period timingPeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_TIMING_PERIOD);
    }

    /**
     * How often the device was used.
     */
    public String timingDateTime() {
        return getString(FhirPropertyNames.PROPERTY_TIMING_DATE_TIME);
    }

    /**
     * The time at which the statement was made/recorded.
     */
    public java.time.Instant recordedOn() {
        return getInstant(FhirPropertyNames.PROPERTY_RECORDED_ON);
    }

    /**
     * Who reported the device was being used by the patient.
     */
    public Reference source() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SOURCE);
    }

    /**
     * The details of the device used.
     */
    public Reference device() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_DEVICE);
    }

    /**
     * Reason or justification for the use of the device.
     */
    public java.util.List<CodeableConcept> reasonCode() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_REASON_CODE);
    }

    /**
     * Indicates another resource whose existence justifies this
     * DeviceUseStatement.
     */
    public java.util.List<Reference> reasonReference() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_REASON_REFERENCE);
    }

    /**
     * Indicates the anotomic location on the subject's body where the device
     * was used ( i.e. the target).
     */
    public CodeableConcept bodySite() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_BODY_SITE);
    }

    /**
     * Details about the device statement that were not represented at all or
     * sufficiently in one of the attributes provided in a class. These may
     * include for example a comment, an instruction, or a note associated
     * with the statement.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    public static final class Builder extends DomainResource.Builder<DeviceUseStatement, DeviceUseStatement.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder basedOn(final java.util.List<Reference> basedOn) {
            b.add(FhirPropertyNames.PROPERTY_BASED_ON, FhirObject.toArray(basedOn));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder derivedFrom(final java.util.List<Reference> derivedFrom) {
            b.add(FhirPropertyNames.PROPERTY_DERIVED_FROM, FhirObject.toArray(derivedFrom));
            return this;
        }

        public Builder timingTiming(final Timing timingTiming) {
            b.add(FhirPropertyNames.PROPERTY_TIMING_TIMING, timingTiming);
            return this;
        }

        public Builder timingPeriod(final Period timingPeriod) {
            b.add(FhirPropertyNames.PROPERTY_TIMING_PERIOD, timingPeriod);
            return this;
        }

        public Builder timingDateTime(final String timingDateTime) {
            b.add(FhirPropertyNames.PROPERTY_TIMING_DATE_TIME, timingDateTime);
            return this;
        }

        public Builder recordedOn(final java.time.Instant recordedOn) {
            b.add(FhirPropertyNames.PROPERTY_RECORDED_ON, recordedOn.toString());
            return this;
        }

        public Builder source(final Reference source) {
            b.add(FhirPropertyNames.PROPERTY_SOURCE, source);
            return this;
        }

        public Builder device(final Reference device) {
            b.add(FhirPropertyNames.PROPERTY_DEVICE, device);
            return this;
        }

        public Builder reasonCode(final java.util.List<CodeableConcept> reasonCode) {
            b.add(FhirPropertyNames.PROPERTY_REASON_CODE, FhirObject.toArray(reasonCode));
            return this;
        }

        public Builder reasonReference(final java.util.List<Reference> reasonReference) {
            b.add(FhirPropertyNames.PROPERTY_REASON_REFERENCE, FhirObject.toArray(reasonReference));
            return this;
        }

        public Builder bodySite(final CodeableConcept bodySite) {
            b.add(FhirPropertyNames.PROPERTY_BODY_SITE, bodySite);
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public DeviceUseStatement build() {
            return new DeviceUseStatement(b.build());
        }
    }
}
