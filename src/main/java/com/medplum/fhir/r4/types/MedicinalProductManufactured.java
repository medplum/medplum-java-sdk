/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * The manufactured item as contained in the packaged medicinal product.
 */
public class MedicinalProductManufactured extends DomainResource {
    public static final String RESOURCE_TYPE = "MedicinalProductManufactured";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public MedicinalProductManufactured(final JsonObject data) {
        super(data);
    }

    /**
     * Dose form as manufactured and before any transformation into the
     * pharmaceutical product.
     */
    public CodeableConcept manufacturedDoseForm() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_MANUFACTURED_DOSE_FORM);
    }

    /**
     * The &ldquo;real world&rdquo; units in which the quantity of the manufactured item
     * is described.
     */
    public CodeableConcept unitOfPresentation() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_UNIT_OF_PRESENTATION);
    }

    /**
     * The quantity or &quot;count number&quot; of the manufactured item.
     */
    public Quantity quantity() {
        return getObject(Quantity.class, FhirPropertyNames.PROPERTY_QUANTITY);
    }

    /**
     * Manufacturer of the item (Note that this should be named
     * &quot;manufacturer&quot; but it currently causes technical issues).
     */
    public java.util.List<Reference> manufacturer() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_MANUFACTURER);
    }

    /**
     * Ingredient.
     */
    public java.util.List<Reference> ingredient() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_INGREDIENT);
    }

    /**
     * Dimensions, color etc.
     */
    public ProdCharacteristic physicalCharacteristics() {
        return getObject(ProdCharacteristic.class, FhirPropertyNames.PROPERTY_PHYSICAL_CHARACTERISTICS);
    }

    /**
     * Other codeable characteristics.
     */
    public java.util.List<CodeableConcept> otherCharacteristics() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_OTHER_CHARACTERISTICS);
    }

    public static final class Builder extends DomainResource.Builder<MedicinalProductManufactured, MedicinalProductManufactured.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder manufacturedDoseForm(final CodeableConcept manufacturedDoseForm) {
            b.add(FhirPropertyNames.PROPERTY_MANUFACTURED_DOSE_FORM, manufacturedDoseForm);
            return this;
        }

        public Builder unitOfPresentation(final CodeableConcept unitOfPresentation) {
            b.add(FhirPropertyNames.PROPERTY_UNIT_OF_PRESENTATION, unitOfPresentation);
            return this;
        }

        public Builder quantity(final Quantity quantity) {
            b.add(FhirPropertyNames.PROPERTY_QUANTITY, quantity);
            return this;
        }

        public Builder manufacturer(final java.util.List<Reference> manufacturer) {
            b.add(FhirPropertyNames.PROPERTY_MANUFACTURER, FhirObject.toArray(manufacturer));
            return this;
        }

        public Builder ingredient(final java.util.List<Reference> ingredient) {
            b.add(FhirPropertyNames.PROPERTY_INGREDIENT, FhirObject.toArray(ingredient));
            return this;
        }

        public Builder physicalCharacteristics(final ProdCharacteristic physicalCharacteristics) {
            b.add(FhirPropertyNames.PROPERTY_PHYSICAL_CHARACTERISTICS, physicalCharacteristics);
            return this;
        }

        public Builder otherCharacteristics(final java.util.List<CodeableConcept> otherCharacteristics) {
            b.add(FhirPropertyNames.PROPERTY_OTHER_CHARACTERISTICS, FhirObject.toArray(otherCharacteristics));
            return this;
        }

        public MedicinalProductManufactured build() {
            return new MedicinalProductManufactured(b.build());
        }
    }
}
