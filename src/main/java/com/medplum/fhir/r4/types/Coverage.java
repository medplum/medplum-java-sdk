/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Financial instrument which may be used to reimburse or pay for health
 * care products and services. Includes both insurance and self-payment.
 */
public class Coverage extends DomainResource {
    public static final String RESOURCE_TYPE = "Coverage";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Coverage(final JsonObject data) {
        super(data);
    }

    /**
     * A unique identifier assigned to this coverage.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The status of the resource instance.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * The type of coverage: social program, medical plan, accident coverage
     * (workers compensation, auto), group health or payment by an individual
     * or organization.
     */
    public CodeableConcept type() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * The party who 'owns' the insurance policy.
     */
    public Reference policyHolder() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_POLICY_HOLDER);
    }

    /**
     * The party who has signed-up for or 'owns' the contractual relationship
     * to the policy or to whom the benefit of the policy for services
     * rendered to them or their family is due.
     */
    public Reference subscriber() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBSCRIBER);
    }

    /**
     * The insurer assigned ID for the Subscriber.
     */
    public String subscriberId() {
        return getString(FhirPropertyNames.PROPERTY_SUBSCRIBER_ID);
    }

    /**
     * The party who benefits from the insurance coverage; the patient when
     * products and/or services are provided.
     */
    public Reference beneficiary() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_BENEFICIARY);
    }

    /**
     * A unique identifier for a dependent under the coverage.
     */
    public String dependent() {
        return getString(FhirPropertyNames.PROPERTY_DEPENDENT);
    }

    /**
     * The relationship of beneficiary (patient) to the subscriber.
     */
    public CodeableConcept relationship() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_RELATIONSHIP);
    }

    /**
     * Time period during which the coverage is in force. A missing start
     * date indicates the start date isn't known, a missing end date means
     * the coverage is continuing to be in force.
     */
    public Period period() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_PERIOD);
    }

    /**
     * The program or plan underwriter or payor including both insurance and
     * non-insurance agreements, such as patient-pay agreements.
     */
    public java.util.List<Reference> payor() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_PAYOR);
    }

    /**
     * A suite of underwriter specific classifiers.
     */
    public java.util.List<CoverageClass> classValue() {
        return getList(CoverageClass.class, FhirPropertyNames.PROPERTY_CLASS);
    }

    /**
     * The order of applicability of this coverage relative to other
     * coverages which are currently in force. Note, there may be gaps in the
     * numbering and this does not imply primary, secondary etc. as the
     * specific positioning of coverages depends upon the episode of care.
     */
    public Integer order() {
        return data.getInt(FhirPropertyNames.PROPERTY_ORDER);
    }

    /**
     * The insurer-specific identifier for the insurer-defined network of
     * providers to which the beneficiary may seek treatment which will be
     * covered at the 'in-network' rate, otherwise 'out of network' terms and
     * conditions apply.
     */
    public String network() {
        return getString(FhirPropertyNames.PROPERTY_NETWORK);
    }

    /**
     * A suite of codes indicating the cost category and associated amount
     * which have been detailed in the policy and may have been  included on
     * the health card.
     */
    public java.util.List<CoverageCostToBeneficiary> costToBeneficiary() {
        return getList(CoverageCostToBeneficiary.class, FhirPropertyNames.PROPERTY_COST_TO_BENEFICIARY);
    }

    /**
     * When 'subrogation=true' this insurance instance has been included not
     * for adjudication but to provide insurers with the details to recover
     * costs.
     */
    public Boolean subrogation() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_SUBROGATION);
    }

    /**
     * The policy(s) which constitute this insurance coverage.
     */
    public java.util.List<Reference> contract() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_CONTRACT);
    }

    public static final class Builder extends DomainResource.Builder<Coverage, Coverage.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder type(final CodeableConcept type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, type);
            return this;
        }

        public Builder policyHolder(final Reference policyHolder) {
            b.add(FhirPropertyNames.PROPERTY_POLICY_HOLDER, policyHolder);
            return this;
        }

        public Builder subscriber(final Reference subscriber) {
            b.add(FhirPropertyNames.PROPERTY_SUBSCRIBER, subscriber);
            return this;
        }

        public Builder subscriberId(final String subscriberId) {
            b.add(FhirPropertyNames.PROPERTY_SUBSCRIBER_ID, subscriberId);
            return this;
        }

        public Builder beneficiary(final Reference beneficiary) {
            b.add(FhirPropertyNames.PROPERTY_BENEFICIARY, beneficiary);
            return this;
        }

        public Builder dependent(final String dependent) {
            b.add(FhirPropertyNames.PROPERTY_DEPENDENT, dependent);
            return this;
        }

        public Builder relationship(final CodeableConcept relationship) {
            b.add(FhirPropertyNames.PROPERTY_RELATIONSHIP, relationship);
            return this;
        }

        public Builder period(final Period period) {
            b.add(FhirPropertyNames.PROPERTY_PERIOD, period);
            return this;
        }

        public Builder payor(final java.util.List<Reference> payor) {
            b.add(FhirPropertyNames.PROPERTY_PAYOR, FhirObject.toArray(payor));
            return this;
        }

        public Builder classValue(final java.util.List<CoverageClass> classValue) {
            b.add(FhirPropertyNames.PROPERTY_CLASS, FhirObject.toArray(classValue));
            return this;
        }

        public Builder order(final Integer order) {
            b.add(FhirPropertyNames.PROPERTY_ORDER, order);
            return this;
        }

        public Builder network(final String network) {
            b.add(FhirPropertyNames.PROPERTY_NETWORK, network);
            return this;
        }

        public Builder costToBeneficiary(final java.util.List<CoverageCostToBeneficiary> costToBeneficiary) {
            b.add(FhirPropertyNames.PROPERTY_COST_TO_BENEFICIARY, FhirObject.toArray(costToBeneficiary));
            return this;
        }

        public Builder subrogation(final Boolean subrogation) {
            b.add(FhirPropertyNames.PROPERTY_SUBROGATION, subrogation);
            return this;
        }

        public Builder contract(final java.util.List<Reference> contract) {
            b.add(FhirPropertyNames.PROPERTY_CONTRACT, FhirObject.toArray(contract));
            return this;
        }

        public Coverage build() {
            return new Coverage(b.build());
        }
    }

    /**
     * Financial instrument which may be used to reimburse or pay for health
     * care products and services. Includes both insurance and self-payment.
     */
    public static class CoverageClass extends FhirObject {
        public static final String RESOURCE_TYPE = "CoverageClass";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public CoverageClass(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The type of classification for which an insurer-specific class label
         * or number and optional name is provided, for example may be used to
         * identify a class of coverage or employer group, Policy, Plan.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The alphanumeric string value associated with the insurer issued
         * label.
         */
        public String value() {
            return getString(FhirPropertyNames.PROPERTY_VALUE);
        }

        /**
         * A short description for the class.
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        public static final class Builder extends FhirObject.Builder<CoverageClass, CoverageClass.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder value(final String value) {
                b.add(FhirPropertyNames.PROPERTY_VALUE, value);
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public CoverageClass build() {
                return new CoverageClass(b.build());
            }
        }
    }

    /**
     * Financial instrument which may be used to reimburse or pay for health
     * care products and services. Includes both insurance and self-payment.
     */
    public static class CoverageCostToBeneficiary extends FhirObject {
        public static final String RESOURCE_TYPE = "CoverageCostToBeneficiary";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public CoverageCostToBeneficiary(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The category of patient centric costs associated with treatment.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The amount due from the patient for the cost category.
         */
        public Quantity valueQuantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_VALUE_QUANTITY);
        }

        /**
         * The amount due from the patient for the cost category.
         */
        public Money valueMoney() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_VALUE_MONEY);
        }

        /**
         * A suite of codes indicating exceptions or reductions to patient costs
         * and their effective periods.
         */
        public java.util.List<CoverageException> exception() {
            return getList(CoverageException.class, FhirPropertyNames.PROPERTY_EXCEPTION);
        }

        public static final class Builder extends FhirObject.Builder<CoverageCostToBeneficiary, CoverageCostToBeneficiary.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder valueQuantity(final Quantity valueQuantity) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_QUANTITY, valueQuantity);
                return this;
            }

            public Builder valueMoney(final Money valueMoney) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_MONEY, valueMoney);
                return this;
            }

            public Builder exception(final java.util.List<CoverageException> exception) {
                b.add(FhirPropertyNames.PROPERTY_EXCEPTION, FhirObject.toArray(exception));
                return this;
            }

            public CoverageCostToBeneficiary build() {
                return new CoverageCostToBeneficiary(b.build());
            }
        }
    }

    /**
     * Financial instrument which may be used to reimburse or pay for health
     * care products and services. Includes both insurance and self-payment.
     */
    public static class CoverageException extends FhirObject {
        public static final String RESOURCE_TYPE = "CoverageException";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public CoverageException(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The code for the specific exception.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The timeframe during when the exception is in force.
         */
        public Period period() {
            return getObject(Period.class, FhirPropertyNames.PROPERTY_PERIOD);
        }

        public static final class Builder extends FhirObject.Builder<CoverageException, CoverageException.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder period(final Period period) {
                b.add(FhirPropertyNames.PROPERTY_PERIOD, period);
                return this;
            }

            public CoverageException build() {
                return new CoverageException(b.build());
            }
        }
    }
}
