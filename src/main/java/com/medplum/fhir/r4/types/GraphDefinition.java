/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A formal computable definition of a graph of resources - that is, a
 * coherent set of resources that form a graph by following references.
 * The Graph Definition resource defines a set and makes rules about the
 * set.
 */
public class GraphDefinition extends DomainResource {
    public static final String RESOURCE_TYPE = "GraphDefinition";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public GraphDefinition(final JsonObject data) {
        super(data);
    }

    /**
     * An absolute URI that is used to identify this graph definition when it
     * is referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative
     * instance of this graph definition is (or will be) published. This URL
     * can be the target of a canonical reference. It SHALL remain the same
     * when the graph definition is stored on different servers.
     */
    public java.net.URI url() {
        return getUri(FhirPropertyNames.PROPERTY_URL);
    }

    /**
     * The identifier that is used to identify this version of the graph
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the graph definition
     * author and is not expected to be globally unique. For example, it
     * might be a timestamp (e.g. yyyymmdd) if a managed version is not
     * available. There is also no expectation that versions can be placed in
     * a lexicographical sequence.
     */
    public String version() {
        return getString(FhirPropertyNames.PROPERTY_VERSION);
    }

    /**
     * A natural language name identifying the graph definition. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    public String name() {
        return getString(FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * The status of this graph definition. Enables tracking the life-cycle
     * of the content.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * A Boolean value to indicate that this graph definition is authored for
     * testing purposes (or education/evaluation/marketing) and is not
     * intended to be used for genuine usage.
     */
    public Boolean experimental() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_EXPERIMENTAL);
    }

    /**
     * The date  (and optionally time) when the graph definition was
     * published. The date must change when the business version changes and
     * it must change if the status code changes. In addition, it should
     * change when the substantive content of the graph definition changes.
     */
    public java.time.Instant date() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE);
    }

    /**
     * The name of the organization or individual that published the graph
     * definition.
     */
    public String publisher() {
        return getString(FhirPropertyNames.PROPERTY_PUBLISHER);
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_CONTACT);
    }

    /**
     * A free text natural language description of the graph definition from
     * a consumer's perspective.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs
     * (insurance plans, studies, ...) and may be used to assist with
     * indexing and searching for appropriate graph definition instances.
     */
    public java.util.List<UsageContext> useContext() {
        return getList(UsageContext.class, FhirPropertyNames.PROPERTY_USE_CONTEXT);
    }

    /**
     * A legal or geographic region in which the graph definition is intended
     * to be used.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_JURISDICTION);
    }

    /**
     * Explanation of why this graph definition is needed and why it has been
     * designed as it has.
     */
    public String purpose() {
        return getString(FhirPropertyNames.PROPERTY_PURPOSE);
    }

    /**
     * The type of FHIR resource at which instances of this graph start.
     */
    public String start() {
        return getString(FhirPropertyNames.PROPERTY_START);
    }

    /**
     * The profile that describes the use of the base resource.
     */
    public String profile() {
        return getString(FhirPropertyNames.PROPERTY_PROFILE);
    }

    /**
     * Links this graph makes rules about.
     */
    public java.util.List<GraphDefinitionLink> link() {
        return getList(GraphDefinitionLink.class, FhirPropertyNames.PROPERTY_LINK);
    }

    public static final class Builder extends DomainResource.Builder<GraphDefinition, GraphDefinition.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder url(final java.net.URI url) {
            b.add(FhirPropertyNames.PROPERTY_URL, url.toString());
            return this;
        }

        public Builder version(final String version) {
            b.add(FhirPropertyNames.PROPERTY_VERSION, version);
            return this;
        }

        public Builder name(final String name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, name);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder experimental(final Boolean experimental) {
            b.add(FhirPropertyNames.PROPERTY_EXPERIMENTAL, experimental);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder publisher(final String publisher) {
            b.add(FhirPropertyNames.PROPERTY_PUBLISHER, publisher);
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(FhirPropertyNames.PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder useContext(final java.util.List<UsageContext> useContext) {
            b.add(FhirPropertyNames.PROPERTY_USE_CONTEXT, FhirObject.toArray(useContext));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(FhirPropertyNames.PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder purpose(final String purpose) {
            b.add(FhirPropertyNames.PROPERTY_PURPOSE, purpose);
            return this;
        }

        public Builder start(final String start) {
            b.add(FhirPropertyNames.PROPERTY_START, start);
            return this;
        }

        public Builder profile(final String profile) {
            b.add(FhirPropertyNames.PROPERTY_PROFILE, profile);
            return this;
        }

        public Builder link(final java.util.List<GraphDefinitionLink> link) {
            b.add(FhirPropertyNames.PROPERTY_LINK, FhirObject.toArray(link));
            return this;
        }

        public GraphDefinition build() {
            return new GraphDefinition(b.build());
        }
    }

    /**
     * A formal computable definition of a graph of resources - that is, a
     * coherent set of resources that form a graph by following references.
     * The Graph Definition resource defines a set and makes rules about the
     * set.
     */
    public static class GraphDefinitionCompartment extends FhirObject {
        public static final String RESOURCE_TYPE = "GraphDefinitionCompartment";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public GraphDefinitionCompartment(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Defines how the compartment rule is used - whether it it is used to
         * test whether resources are subject to the rule, or whether it is a
         * rule that must be followed.
         */
        public String use() {
            return getString(FhirPropertyNames.PROPERTY_USE);
        }

        /**
         * Identifies the compartment.
         */
        public String code() {
            return getString(FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * identical | matching | different | no-rule | custom.
         */
        public String rule() {
            return getString(FhirPropertyNames.PROPERTY_RULE);
        }

        /**
         * Custom rule, as a FHIRPath expression.
         */
        public String expression() {
            return getString(FhirPropertyNames.PROPERTY_EXPRESSION);
        }

        /**
         * Documentation for FHIRPath expression.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        public static final class Builder extends FhirObject.Builder<GraphDefinitionCompartment, GraphDefinitionCompartment.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder use(final String use) {
                b.add(FhirPropertyNames.PROPERTY_USE, use);
                return this;
            }

            public Builder code(final String code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder rule(final String rule) {
                b.add(FhirPropertyNames.PROPERTY_RULE, rule);
                return this;
            }

            public Builder expression(final String expression) {
                b.add(FhirPropertyNames.PROPERTY_EXPRESSION, expression);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public GraphDefinitionCompartment build() {
                return new GraphDefinitionCompartment(b.build());
            }
        }
    }

    /**
     * A formal computable definition of a graph of resources - that is, a
     * coherent set of resources that form a graph by following references.
     * The Graph Definition resource defines a set and makes rules about the
     * set.
     */
    public static class GraphDefinitionLink extends FhirObject {
        public static final String RESOURCE_TYPE = "GraphDefinitionLink";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public GraphDefinitionLink(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A FHIR expression that identifies one of FHIR References to other
         * resources.
         */
        public String path() {
            return getString(FhirPropertyNames.PROPERTY_PATH);
        }

        /**
         * Which slice (if profiled).
         */
        public String sliceName() {
            return getString(FhirPropertyNames.PROPERTY_SLICE_NAME);
        }

        /**
         * Minimum occurrences for this link.
         */
        public Integer min() {
            return data.getInt(FhirPropertyNames.PROPERTY_MIN);
        }

        /**
         * Maximum occurrences for this link.
         */
        public String max() {
            return getString(FhirPropertyNames.PROPERTY_MAX);
        }

        /**
         * Information about why this link is of interest in this graph
         * definition.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * Potential target for the link.
         */
        public java.util.List<GraphDefinitionTarget> target() {
            return getList(GraphDefinitionTarget.class, FhirPropertyNames.PROPERTY_TARGET);
        }

        public static final class Builder extends FhirObject.Builder<GraphDefinitionLink, GraphDefinitionLink.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder path(final String path) {
                b.add(FhirPropertyNames.PROPERTY_PATH, path);
                return this;
            }

            public Builder sliceName(final String sliceName) {
                b.add(FhirPropertyNames.PROPERTY_SLICE_NAME, sliceName);
                return this;
            }

            public Builder min(final Integer min) {
                b.add(FhirPropertyNames.PROPERTY_MIN, min);
                return this;
            }

            public Builder max(final String max) {
                b.add(FhirPropertyNames.PROPERTY_MAX, max);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder target(final java.util.List<GraphDefinitionTarget> target) {
                b.add(FhirPropertyNames.PROPERTY_TARGET, FhirObject.toArray(target));
                return this;
            }

            public GraphDefinitionLink build() {
                return new GraphDefinitionLink(b.build());
            }
        }
    }

    /**
     * A formal computable definition of a graph of resources - that is, a
     * coherent set of resources that form a graph by following references.
     * The Graph Definition resource defines a set and makes rules about the
     * set.
     */
    public static class GraphDefinitionTarget extends FhirObject {
        public static final String RESOURCE_TYPE = "GraphDefinitionTarget";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public GraphDefinitionTarget(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Type of resource this link refers to.
         */
        public String type() {
            return getString(FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * A set of parameters to look up.
         */
        public String params() {
            return getString(FhirPropertyNames.PROPERTY_PARAMS);
        }

        /**
         * Profile for the target resource.
         */
        public String profile() {
            return getString(FhirPropertyNames.PROPERTY_PROFILE);
        }

        /**
         * Compartment Consistency Rules.
         */
        public java.util.List<GraphDefinitionCompartment> compartment() {
            return getList(GraphDefinitionCompartment.class, FhirPropertyNames.PROPERTY_COMPARTMENT);
        }

        /**
         * Additional links from target resource.
         */
        public java.util.List<GraphDefinitionLink> link() {
            return getList(GraphDefinitionLink.class, FhirPropertyNames.PROPERTY_LINK);
        }

        public static final class Builder extends FhirObject.Builder<GraphDefinitionTarget, GraphDefinitionTarget.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final String type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder params(final String params) {
                b.add(FhirPropertyNames.PROPERTY_PARAMS, params);
                return this;
            }

            public Builder profile(final String profile) {
                b.add(FhirPropertyNames.PROPERTY_PROFILE, profile);
                return this;
            }

            public Builder compartment(final java.util.List<GraphDefinitionCompartment> compartment) {
                b.add(FhirPropertyNames.PROPERTY_COMPARTMENT, FhirObject.toArray(compartment));
                return this;
            }

            public Builder link(final java.util.List<GraphDefinitionLink> link) {
                b.add(FhirPropertyNames.PROPERTY_LINK, FhirObject.toArray(link));
                return this;
            }

            public GraphDefinitionTarget build() {
                return new GraphDefinitionTarget(b.build());
            }
        }
    }
}
