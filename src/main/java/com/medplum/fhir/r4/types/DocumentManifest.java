/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A collection of documents compiled for a purpose together with
 * metadata that applies to the collection.
 */
public class DocumentManifest extends DomainResource {
    public static final String RESOURCE_TYPE = "DocumentManifest";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public DocumentManifest(final JsonObject data) {
        super(data);
    }

    /**
     * A single identifier that uniquely identifies this manifest.
     * Principally used to refer to the manifest in non-FHIR contexts.
     */
    public Identifier masterIdentifier() {
        return getObject(Identifier.class, FhirPropertyNames.PROPERTY_MASTER_IDENTIFIER);
    }

    /**
     * Other identifiers associated with the document manifest, including
     * version independent  identifiers.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The status of this document manifest.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * The code specifying the type of clinical activity that resulted in
     * placing the associated content into the DocumentManifest.
     */
    public CodeableConcept type() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * Who or what the set of documents is about. The documents can be about
     * a person, (patient or healthcare practitioner), a device (i.e.
     * machine) or even a group of subjects (such as a document about a herd
     * of farm animals, or a set of patients that share a common exposure).
     * If the documents cross more than one subject, then more than one
     * subject is allowed here (unusual use case).
     */
    public Reference subject() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * When the document manifest was created for submission to the server
     * (not necessarily the same thing as the actual resource last modified
     * time, since it may be modified, replicated, etc.).
     */
    public java.time.Instant created() {
        return getInstant(FhirPropertyNames.PROPERTY_CREATED);
    }

    /**
     * Identifies who is the author of the manifest. Manifest author is not
     * necessarly the author of the references included.
     */
    public java.util.List<Reference> author() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_AUTHOR);
    }

    /**
     * A patient, practitioner, or organization for which this set of
     * documents is intended.
     */
    public java.util.List<Reference> recipient() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_RECIPIENT);
    }

    /**
     * Identifies the source system, application, or software that produced
     * the document manifest.
     */
    public java.net.URI source() {
        return getUri(FhirPropertyNames.PROPERTY_SOURCE);
    }

    /**
     * Human-readable description of the source document. This is sometimes
     * known as the &quot;title&quot;.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * The list of Resources that consist of the parts of this manifest.
     */
    public java.util.List<Reference> content() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_CONTENT);
    }

    /**
     * Related identifiers or resources associated with the DocumentManifest.
     */
    public java.util.List<DocumentManifestRelated> related() {
        return getList(DocumentManifestRelated.class, FhirPropertyNames.PROPERTY_RELATED);
    }

    public static final class Builder extends DomainResource.Builder<DocumentManifest, DocumentManifest.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder masterIdentifier(final Identifier masterIdentifier) {
            b.add(FhirPropertyNames.PROPERTY_MASTER_IDENTIFIER, masterIdentifier);
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder type(final CodeableConcept type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, type);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder created(final java.time.Instant created) {
            b.add(FhirPropertyNames.PROPERTY_CREATED, created.toString());
            return this;
        }

        public Builder author(final java.util.List<Reference> author) {
            b.add(FhirPropertyNames.PROPERTY_AUTHOR, FhirObject.toArray(author));
            return this;
        }

        public Builder recipient(final java.util.List<Reference> recipient) {
            b.add(FhirPropertyNames.PROPERTY_RECIPIENT, FhirObject.toArray(recipient));
            return this;
        }

        public Builder source(final java.net.URI source) {
            b.add(FhirPropertyNames.PROPERTY_SOURCE, source.toString());
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder content(final java.util.List<Reference> content) {
            b.add(FhirPropertyNames.PROPERTY_CONTENT, FhirObject.toArray(content));
            return this;
        }

        public Builder related(final java.util.List<DocumentManifestRelated> related) {
            b.add(FhirPropertyNames.PROPERTY_RELATED, FhirObject.toArray(related));
            return this;
        }

        public DocumentManifest build() {
            return new DocumentManifest(b.build());
        }
    }

    /**
     * A collection of documents compiled for a purpose together with
     * metadata that applies to the collection.
     */
    public static class DocumentManifestRelated extends FhirObject {
        public static final String RESOURCE_TYPE = "DocumentManifestRelated";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public DocumentManifestRelated(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Related identifier to this DocumentManifest.  For example, Order
         * numbers, accession numbers, XDW workflow numbers.
         */
        public Identifier identifier() {
            return getObject(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
        }

        /**
         * Related Resource to this DocumentManifest. For example, Order,
         * ServiceRequest,  Procedure, EligibilityRequest, etc.
         */
        public Reference ref() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_REF);
        }

        public static final class Builder extends FhirObject.Builder<DocumentManifestRelated, DocumentManifestRelated.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder identifier(final Identifier identifier) {
                b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, identifier);
                return this;
            }

            public Builder ref(final Reference ref) {
                b.add(FhirPropertyNames.PROPERTY_REF, ref);
                return this;
            }

            public DocumentManifestRelated build() {
                return new DocumentManifestRelated(b.build());
            }
        }
    }
}
