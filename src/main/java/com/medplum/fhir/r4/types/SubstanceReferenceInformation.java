/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Todo.
 */
public class SubstanceReferenceInformation extends DomainResource {
    public static final String RESOURCE_TYPE = "SubstanceReferenceInformation";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public SubstanceReferenceInformation(final JsonObject data) {
        super(data);
    }

    /**
     * Todo.
     */
    public String comment() {
        return getString(FhirPropertyNames.PROPERTY_COMMENT);
    }

    /**
     * Todo.
     */
    public java.util.List<SubstanceReferenceInformationGene> gene() {
        return getList(SubstanceReferenceInformationGene.class, FhirPropertyNames.PROPERTY_GENE);
    }

    /**
     * Todo.
     */
    public java.util.List<SubstanceReferenceInformationGeneElement> geneElement() {
        return getList(SubstanceReferenceInformationGeneElement.class, FhirPropertyNames.PROPERTY_GENE_ELEMENT);
    }

    /**
     * Todo.
     */
    public java.util.List<SubstanceReferenceInformationClassification> classification() {
        return getList(SubstanceReferenceInformationClassification.class, FhirPropertyNames.PROPERTY_CLASSIFICATION);
    }

    /**
     * Todo.
     */
    public java.util.List<SubstanceReferenceInformationTarget> target() {
        return getList(SubstanceReferenceInformationTarget.class, FhirPropertyNames.PROPERTY_TARGET);
    }

    public static final class Builder extends DomainResource.Builder<SubstanceReferenceInformation, SubstanceReferenceInformation.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder comment(final String comment) {
            b.add(FhirPropertyNames.PROPERTY_COMMENT, comment);
            return this;
        }

        public Builder gene(final java.util.List<SubstanceReferenceInformationGene> gene) {
            b.add(FhirPropertyNames.PROPERTY_GENE, FhirObject.toArray(gene));
            return this;
        }

        public Builder geneElement(final java.util.List<SubstanceReferenceInformationGeneElement> geneElement) {
            b.add(FhirPropertyNames.PROPERTY_GENE_ELEMENT, FhirObject.toArray(geneElement));
            return this;
        }

        public Builder classification(final java.util.List<SubstanceReferenceInformationClassification> classification) {
            b.add(FhirPropertyNames.PROPERTY_CLASSIFICATION, FhirObject.toArray(classification));
            return this;
        }

        public Builder target(final java.util.List<SubstanceReferenceInformationTarget> target) {
            b.add(FhirPropertyNames.PROPERTY_TARGET, FhirObject.toArray(target));
            return this;
        }

        public SubstanceReferenceInformation build() {
            return new SubstanceReferenceInformation(b.build());
        }
    }

    /**
     * Todo.
     */
    public static class SubstanceReferenceInformationClassification extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceReferenceInformationClassification";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceReferenceInformationClassification(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Todo.
         */
        public CodeableConcept domain() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_DOMAIN);
        }

        /**
         * Todo.
         */
        public CodeableConcept classification() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CLASSIFICATION);
        }

        /**
         * Todo.
         */
        public java.util.List<CodeableConcept> subtype() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_SUBTYPE);
        }

        /**
         * Todo.
         */
        public java.util.List<Reference> source() {
            return getList(Reference.class, FhirPropertyNames.PROPERTY_SOURCE);
        }

        public static final class Builder extends FhirObject.Builder<SubstanceReferenceInformationClassification,
                SubstanceReferenceInformationClassification.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder domain(final CodeableConcept domain) {
                b.add(FhirPropertyNames.PROPERTY_DOMAIN, domain);
                return this;
            }

            public Builder classification(final CodeableConcept classification) {
                b.add(FhirPropertyNames.PROPERTY_CLASSIFICATION, classification);
                return this;
            }

            public Builder subtype(final java.util.List<CodeableConcept> subtype) {
                b.add(FhirPropertyNames.PROPERTY_SUBTYPE, FhirObject.toArray(subtype));
                return this;
            }

            public Builder source(final java.util.List<Reference> source) {
                b.add(FhirPropertyNames.PROPERTY_SOURCE, FhirObject.toArray(source));
                return this;
            }

            public SubstanceReferenceInformationClassification build() {
                return new SubstanceReferenceInformationClassification(b.build());
            }
        }
    }

    /**
     * Todo.
     */
    public static class SubstanceReferenceInformationGene extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceReferenceInformationGene";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceReferenceInformationGene(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Todo.
         */
        public CodeableConcept geneSequenceOrigin() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_GENE_SEQUENCE_ORIGIN);
        }

        /**
         * Todo.
         */
        public CodeableConcept gene() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_GENE);
        }

        /**
         * Todo.
         */
        public java.util.List<Reference> source() {
            return getList(Reference.class, FhirPropertyNames.PROPERTY_SOURCE);
        }

        public static final class Builder extends FhirObject.Builder<SubstanceReferenceInformationGene, SubstanceReferenceInformationGene.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder geneSequenceOrigin(final CodeableConcept geneSequenceOrigin) {
                b.add(FhirPropertyNames.PROPERTY_GENE_SEQUENCE_ORIGIN, geneSequenceOrigin);
                return this;
            }

            public Builder gene(final CodeableConcept gene) {
                b.add(FhirPropertyNames.PROPERTY_GENE, gene);
                return this;
            }

            public Builder source(final java.util.List<Reference> source) {
                b.add(FhirPropertyNames.PROPERTY_SOURCE, FhirObject.toArray(source));
                return this;
            }

            public SubstanceReferenceInformationGene build() {
                return new SubstanceReferenceInformationGene(b.build());
            }
        }
    }

    /**
     * Todo.
     */
    public static class SubstanceReferenceInformationGeneElement extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceReferenceInformationGeneElement";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceReferenceInformationGeneElement(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Todo.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Todo.
         */
        public Identifier element() {
            return getObject(Identifier.class, FhirPropertyNames.PROPERTY_ELEMENT);
        }

        /**
         * Todo.
         */
        public java.util.List<Reference> source() {
            return getList(Reference.class, FhirPropertyNames.PROPERTY_SOURCE);
        }

        public static final class Builder extends FhirObject.Builder<SubstanceReferenceInformationGeneElement,
                SubstanceReferenceInformationGeneElement.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder element(final Identifier element) {
                b.add(FhirPropertyNames.PROPERTY_ELEMENT, element);
                return this;
            }

            public Builder source(final java.util.List<Reference> source) {
                b.add(FhirPropertyNames.PROPERTY_SOURCE, FhirObject.toArray(source));
                return this;
            }

            public SubstanceReferenceInformationGeneElement build() {
                return new SubstanceReferenceInformationGeneElement(b.build());
            }
        }
    }

    /**
     * Todo.
     */
    public static class SubstanceReferenceInformationTarget extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceReferenceInformationTarget";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceReferenceInformationTarget(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Todo.
         */
        public Identifier target() {
            return getObject(Identifier.class, FhirPropertyNames.PROPERTY_TARGET);
        }

        /**
         * Todo.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Todo.
         */
        public CodeableConcept interaction() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_INTERACTION);
        }

        /**
         * Todo.
         */
        public CodeableConcept organism() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_ORGANISM);
        }

        /**
         * Todo.
         */
        public CodeableConcept organismType() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_ORGANISM_TYPE);
        }

        /**
         * Todo.
         */
        public Quantity amountQuantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_AMOUNT_QUANTITY);
        }

        /**
         * Todo.
         */
        public Range amountRange() {
            return getObject(Range.class, FhirPropertyNames.PROPERTY_AMOUNT_RANGE);
        }

        /**
         * Todo.
         */
        public String amountString() {
            return getString(FhirPropertyNames.PROPERTY_AMOUNT_STRING);
        }

        /**
         * Todo.
         */
        public CodeableConcept amountType() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_AMOUNT_TYPE);
        }

        /**
         * Todo.
         */
        public java.util.List<Reference> source() {
            return getList(Reference.class, FhirPropertyNames.PROPERTY_SOURCE);
        }

        public static final class Builder extends FhirObject.Builder<SubstanceReferenceInformationTarget, SubstanceReferenceInformationTarget.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder target(final Identifier target) {
                b.add(FhirPropertyNames.PROPERTY_TARGET, target);
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder interaction(final CodeableConcept interaction) {
                b.add(FhirPropertyNames.PROPERTY_INTERACTION, interaction);
                return this;
            }

            public Builder organism(final CodeableConcept organism) {
                b.add(FhirPropertyNames.PROPERTY_ORGANISM, organism);
                return this;
            }

            public Builder organismType(final CodeableConcept organismType) {
                b.add(FhirPropertyNames.PROPERTY_ORGANISM_TYPE, organismType);
                return this;
            }

            public Builder amountQuantity(final Quantity amountQuantity) {
                b.add(FhirPropertyNames.PROPERTY_AMOUNT_QUANTITY, amountQuantity);
                return this;
            }

            public Builder amountRange(final Range amountRange) {
                b.add(FhirPropertyNames.PROPERTY_AMOUNT_RANGE, amountRange);
                return this;
            }

            public Builder amountString(final String amountString) {
                b.add(FhirPropertyNames.PROPERTY_AMOUNT_STRING, amountString);
                return this;
            }

            public Builder amountType(final CodeableConcept amountType) {
                b.add(FhirPropertyNames.PROPERTY_AMOUNT_TYPE, amountType);
                return this;
            }

            public Builder source(final java.util.List<Reference> source) {
                b.add(FhirPropertyNames.PROPERTY_SOURCE, FhirObject.toArray(source));
                return this;
            }

            public SubstanceReferenceInformationTarget build() {
                return new SubstanceReferenceInformationTarget(b.build());
            }
        }
    }
}
