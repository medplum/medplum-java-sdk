/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A request to supply a diet, formula feeding (enteral) or oral
 * nutritional supplement to a patient/resident.
 */
public class NutritionOrder extends DomainResource {
    public static final String RESOURCE_TYPE = "NutritionOrder";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public NutritionOrder(final JsonObject data) {
        super(data);
    }

    /**
     * Identifiers assigned to this order by the order sender or by the order
     * receiver.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or
     * other definition that is adhered to in whole or in part by this
     * NutritionOrder.
     */
    public java.util.List<String> instantiatesCanonical() {
        return getList(String.class, FhirPropertyNames.PROPERTY_INSTANTIATES_CANONICAL);
    }

    /**
     * The URL pointing to an externally maintained protocol, guideline,
     * orderset or other definition that is adhered to in whole or in part by
     * this NutritionOrder.
     */
    public java.util.List<java.net.URI> instantiatesUri() {
        return getList(java.net.URI.class, FhirPropertyNames.PROPERTY_INSTANTIATES_URI);
    }

    /**
     * The URL pointing to a protocol, guideline, orderset or other
     * definition that is adhered to in whole or in part by this
     * NutritionOrder.
     */
    public java.util.List<java.net.URI> instantiates() {
        return getList(java.net.URI.class, FhirPropertyNames.PROPERTY_INSTANTIATES);
    }

    /**
     * The workflow status of the nutrition order/request.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * Indicates the level of authority/intentionality associated with the
     * NutrionOrder and where the request fits into the workflow chain.
     */
    public String intent() {
        return getString(FhirPropertyNames.PROPERTY_INTENT);
    }

    /**
     * The person (patient) who needs the nutrition order for an oral diet,
     * nutritional supplement and/or enteral or formula feeding.
     */
    public Reference patient() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PATIENT);
    }

    /**
     * An encounter that provides additional information about the healthcare
     * context in which this request is made.
     */
    public Reference encounter() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ENCOUNTER);
    }

    /**
     * The date and time that this nutrition order was requested.
     */
    public java.time.Instant dateTime() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE_TIME);
    }

    /**
     * The practitioner that holds legal responsibility for ordering the
     * diet, nutritional supplement, or formula feedings.
     */
    public Reference orderer() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ORDERER);
    }

    /**
     * A link to a record of allergies or intolerances  which should be
     * included in the nutrition order.
     */
    public java.util.List<Reference> allergyIntolerance() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_ALLERGY_INTOLERANCE);
    }

    /**
     * This modifier is used to convey order-specific modifiers about the
     * type of food that should be given. These can be derived from patient
     * allergies, intolerances, or preferences such as Halal, Vegan or
     * Kosher. This modifier applies to the entire nutrition order inclusive
     * of the oral diet, nutritional supplements and enteral formula
     * feedings.
     */
    public java.util.List<CodeableConcept> foodPreferenceModifier() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_FOOD_PREFERENCE_MODIFIER);
    }

    /**
     * This modifier is used to convey Order-specific modifier about the type
     * of oral food or oral fluids that should not be given. These can be
     * derived from patient allergies, intolerances, or preferences such as
     * No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not
     * be necessary to repeat allergy or intolerance information captured in
     * the referenced AllergyIntolerance resource in the excludeFoodModifier,
     * this element may be used to convey additional specificity related to
     * foods that should be eliminated from the patient&rsquo;s diet for any
     * reason.  This modifier applies to the entire nutrition order inclusive
     * of the oral diet, nutritional supplements and enteral formula
     * feedings.
     */
    public java.util.List<CodeableConcept> excludeFoodModifier() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_EXCLUDE_FOOD_MODIFIER);
    }

    /**
     * Diet given orally in contrast to enteral (tube) feeding.
     */
    public NutritionOrderOralDiet oralDiet() {
        return getObject(NutritionOrderOralDiet.class, FhirPropertyNames.PROPERTY_ORAL_DIET);
    }

    /**
     * Oral nutritional products given in order to add further nutritional
     * value to the patient's diet.
     */
    public java.util.List<NutritionOrderSupplement> supplement() {
        return getList(NutritionOrderSupplement.class, FhirPropertyNames.PROPERTY_SUPPLEMENT);
    }

    /**
     * Feeding provided through the gastrointestinal tract via a tube,
     * catheter, or stoma that delivers nutrition distal to the oral cavity.
     */
    public NutritionOrderEnteralFormula enteralFormula() {
        return getObject(NutritionOrderEnteralFormula.class, FhirPropertyNames.PROPERTY_ENTERAL_FORMULA);
    }

    /**
     * Comments made about the {{title}} by the requester, performer, subject
     * or other participants.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    public static final class Builder extends DomainResource.Builder<NutritionOrder, NutritionOrder.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder instantiatesCanonical(final java.util.List<String> instantiatesCanonical) {
            b.add(FhirPropertyNames.PROPERTY_INSTANTIATES_CANONICAL, FhirObject.toStringArray(instantiatesCanonical));
            return this;
        }

        public Builder instantiatesUri(final java.util.List<java.net.URI> instantiatesUri) {
            b.add(FhirPropertyNames.PROPERTY_INSTANTIATES_URI, FhirObject.toUriArray(instantiatesUri));
            return this;
        }

        public Builder instantiates(final java.util.List<java.net.URI> instantiates) {
            b.add(FhirPropertyNames.PROPERTY_INSTANTIATES, FhirObject.toUriArray(instantiates));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder intent(final String intent) {
            b.add(FhirPropertyNames.PROPERTY_INTENT, intent);
            return this;
        }

        public Builder patient(final Reference patient) {
            b.add(FhirPropertyNames.PROPERTY_PATIENT, patient);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(FhirPropertyNames.PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder dateTime(final java.time.Instant dateTime) {
            b.add(FhirPropertyNames.PROPERTY_DATE_TIME, dateTime.toString());
            return this;
        }

        public Builder orderer(final Reference orderer) {
            b.add(FhirPropertyNames.PROPERTY_ORDERER, orderer);
            return this;
        }

        public Builder allergyIntolerance(final java.util.List<Reference> allergyIntolerance) {
            b.add(FhirPropertyNames.PROPERTY_ALLERGY_INTOLERANCE, FhirObject.toArray(allergyIntolerance));
            return this;
        }

        public Builder foodPreferenceModifier(final java.util.List<CodeableConcept> foodPreferenceModifier) {
            b.add(FhirPropertyNames.PROPERTY_FOOD_PREFERENCE_MODIFIER, FhirObject.toArray(foodPreferenceModifier));
            return this;
        }

        public Builder excludeFoodModifier(final java.util.List<CodeableConcept> excludeFoodModifier) {
            b.add(FhirPropertyNames.PROPERTY_EXCLUDE_FOOD_MODIFIER, FhirObject.toArray(excludeFoodModifier));
            return this;
        }

        public Builder oralDiet(final NutritionOrderOralDiet oralDiet) {
            b.add(FhirPropertyNames.PROPERTY_ORAL_DIET, oralDiet);
            return this;
        }

        public Builder supplement(final java.util.List<NutritionOrderSupplement> supplement) {
            b.add(FhirPropertyNames.PROPERTY_SUPPLEMENT, FhirObject.toArray(supplement));
            return this;
        }

        public Builder enteralFormula(final NutritionOrderEnteralFormula enteralFormula) {
            b.add(FhirPropertyNames.PROPERTY_ENTERAL_FORMULA, enteralFormula);
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public NutritionOrder build() {
            return new NutritionOrder(b.build());
        }
    }

    /**
     * A request to supply a diet, formula feeding (enteral) or oral
     * nutritional supplement to a patient/resident.
     */
    public static class NutritionOrderAdministration extends FhirObject {
        public static final String RESOURCE_TYPE = "NutritionOrderAdministration";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public NutritionOrderAdministration(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The time period and frequency at which the enteral formula should be
         * delivered to the patient.
         */
        public Timing schedule() {
            return getObject(Timing.class, FhirPropertyNames.PROPERTY_SCHEDULE);
        }

        /**
         * The volume of formula to provide to the patient per the specified
         * administration schedule.
         */
        public Quantity quantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_QUANTITY);
        }

        /**
         * The rate of administration of formula via a feeding pump, e.g. 60 mL
         * per hour, according to the specified schedule.
         */
        public Quantity rateQuantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_RATE_QUANTITY);
        }

        /**
         * The rate of administration of formula via a feeding pump, e.g. 60 mL
         * per hour, according to the specified schedule.
         */
        public Ratio rateRatio() {
            return getObject(Ratio.class, FhirPropertyNames.PROPERTY_RATE_RATIO);
        }

        public static final class Builder extends FhirObject.Builder<NutritionOrderAdministration, NutritionOrderAdministration.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder schedule(final Timing schedule) {
                b.add(FhirPropertyNames.PROPERTY_SCHEDULE, schedule);
                return this;
            }

            public Builder quantity(final Quantity quantity) {
                b.add(FhirPropertyNames.PROPERTY_QUANTITY, quantity);
                return this;
            }

            public Builder rateQuantity(final Quantity rateQuantity) {
                b.add(FhirPropertyNames.PROPERTY_RATE_QUANTITY, rateQuantity);
                return this;
            }

            public Builder rateRatio(final Ratio rateRatio) {
                b.add(FhirPropertyNames.PROPERTY_RATE_RATIO, rateRatio);
                return this;
            }

            public NutritionOrderAdministration build() {
                return new NutritionOrderAdministration(b.build());
            }
        }
    }

    /**
     * A request to supply a diet, formula feeding (enteral) or oral
     * nutritional supplement to a patient/resident.
     */
    public static class NutritionOrderEnteralFormula extends FhirObject {
        public static final String RESOURCE_TYPE = "NutritionOrderEnteralFormula";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public NutritionOrderEnteralFormula(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The type of enteral or infant formula such as an adult standard
         * formula with fiber or a soy-based infant formula.
         */
        public CodeableConcept baseFormulaType() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_BASE_FORMULA_TYPE);
        }

        /**
         * The product or brand name of the enteral or infant formula product
         * such as &quot;ACME Adult Standard Formula&quot;.
         */
        public String baseFormulaProductName() {
            return getString(FhirPropertyNames.PROPERTY_BASE_FORMULA_PRODUCT_NAME);
        }

        /**
         * Indicates the type of modular component such as protein, carbohydrate,
         * fat or fiber to be provided in addition to or mixed with the base
         * formula.
         */
        public CodeableConcept additiveType() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_ADDITIVE_TYPE);
        }

        /**
         * The product or brand name of the type of modular component to be added
         * to the formula.
         */
        public String additiveProductName() {
            return getString(FhirPropertyNames.PROPERTY_ADDITIVE_PRODUCT_NAME);
        }

        /**
         * The amount of energy (calories) that the formula should provide per
         * specified volume, typically per mL or fluid oz.  For example, an
         * infant may require a formula that provides 24 calories per fluid ounce
         * or an adult may require an enteral formula that provides 1.5
         * calorie/mL.
         */
        public Quantity caloricDensity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_CALORIC_DENSITY);
        }

        /**
         * The route or physiological path of administration into the patient's
         * gastrointestinal  tract for purposes of providing the formula feeding,
         * e.g. nasogastric tube.
         */
        public CodeableConcept routeofAdministration() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_ROUTEOF_ADMINISTRATION);
        }

        /**
         * Formula administration instructions as structured data.  This
         * repeating structure allows for changing the administration rate or
         * volume over time for both bolus and continuous feeding.  An example of
         * this would be an instruction to increase the rate of continuous
         * feeding every 2 hours.
         */
        public java.util.List<NutritionOrderAdministration> administration() {
            return getList(NutritionOrderAdministration.class, FhirPropertyNames.PROPERTY_ADMINISTRATION);
        }

        /**
         * The maximum total quantity of formula that may be administered to a
         * subject over the period of time, e.g. 1440 mL over 24 hours.
         */
        public Quantity maxVolumeToDeliver() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_MAX_VOLUME_TO_DELIVER);
        }

        /**
         * Free text formula administration, feeding instructions or additional
         * instructions or information.
         */
        public String administrationInstruction() {
            return getString(FhirPropertyNames.PROPERTY_ADMINISTRATION_INSTRUCTION);
        }

        public static final class Builder extends FhirObject.Builder<NutritionOrderEnteralFormula, NutritionOrderEnteralFormula.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder baseFormulaType(final CodeableConcept baseFormulaType) {
                b.add(FhirPropertyNames.PROPERTY_BASE_FORMULA_TYPE, baseFormulaType);
                return this;
            }

            public Builder baseFormulaProductName(final String baseFormulaProductName) {
                b.add(FhirPropertyNames.PROPERTY_BASE_FORMULA_PRODUCT_NAME, baseFormulaProductName);
                return this;
            }

            public Builder additiveType(final CodeableConcept additiveType) {
                b.add(FhirPropertyNames.PROPERTY_ADDITIVE_TYPE, additiveType);
                return this;
            }

            public Builder additiveProductName(final String additiveProductName) {
                b.add(FhirPropertyNames.PROPERTY_ADDITIVE_PRODUCT_NAME, additiveProductName);
                return this;
            }

            public Builder caloricDensity(final Quantity caloricDensity) {
                b.add(FhirPropertyNames.PROPERTY_CALORIC_DENSITY, caloricDensity);
                return this;
            }

            public Builder routeofAdministration(final CodeableConcept routeofAdministration) {
                b.add(FhirPropertyNames.PROPERTY_ROUTEOF_ADMINISTRATION, routeofAdministration);
                return this;
            }

            public Builder administration(final java.util.List<NutritionOrderAdministration> administration) {
                b.add(FhirPropertyNames.PROPERTY_ADMINISTRATION, FhirObject.toArray(administration));
                return this;
            }

            public Builder maxVolumeToDeliver(final Quantity maxVolumeToDeliver) {
                b.add(FhirPropertyNames.PROPERTY_MAX_VOLUME_TO_DELIVER, maxVolumeToDeliver);
                return this;
            }

            public Builder administrationInstruction(final String administrationInstruction) {
                b.add(FhirPropertyNames.PROPERTY_ADMINISTRATION_INSTRUCTION, administrationInstruction);
                return this;
            }

            public NutritionOrderEnteralFormula build() {
                return new NutritionOrderEnteralFormula(b.build());
            }
        }
    }

    /**
     * A request to supply a diet, formula feeding (enteral) or oral
     * nutritional supplement to a patient/resident.
     */
    public static class NutritionOrderNutrient extends FhirObject {
        public static final String RESOURCE_TYPE = "NutritionOrderNutrient";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public NutritionOrderNutrient(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The nutrient that is being modified such as carbohydrate or sodium.
         */
        public CodeableConcept modifier() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_MODIFIER);
        }

        /**
         * The quantity of the specified nutrient to include in diet.
         */
        public Quantity amount() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_AMOUNT);
        }

        public static final class Builder extends FhirObject.Builder<NutritionOrderNutrient, NutritionOrderNutrient.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder modifier(final CodeableConcept modifier) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER, modifier);
                return this;
            }

            public Builder amount(final Quantity amount) {
                b.add(FhirPropertyNames.PROPERTY_AMOUNT, amount);
                return this;
            }

            public NutritionOrderNutrient build() {
                return new NutritionOrderNutrient(b.build());
            }
        }
    }

    /**
     * A request to supply a diet, formula feeding (enteral) or oral
     * nutritional supplement to a patient/resident.
     */
    public static class NutritionOrderOralDiet extends FhirObject {
        public static final String RESOURCE_TYPE = "NutritionOrderOralDiet";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public NutritionOrderOralDiet(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The kind of diet or dietary restriction such as fiber restricted diet
         * or diabetic diet.
         */
        public java.util.List<CodeableConcept> type() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The time period and frequency at which the diet should be given.  The
         * diet should be given for the combination of all schedules if more than
         * one schedule is present.
         */
        public java.util.List<Timing> schedule() {
            return getList(Timing.class, FhirPropertyNames.PROPERTY_SCHEDULE);
        }

        /**
         * Class that defines the quantity and type of nutrient modifications
         * (for example carbohydrate, fiber or sodium) required for the oral
         * diet.
         */
        public java.util.List<NutritionOrderNutrient> nutrient() {
            return getList(NutritionOrderNutrient.class, FhirPropertyNames.PROPERTY_NUTRIENT);
        }

        /**
         * Class that describes any texture modifications required for the
         * patient to safely consume various types of solid foods.
         */
        public java.util.List<NutritionOrderTexture> texture() {
            return getList(NutritionOrderTexture.class, FhirPropertyNames.PROPERTY_TEXTURE);
        }

        /**
         * The required consistency (e.g. honey-thick, nectar-thick, thin,
         * thickened.) of liquids or fluids served to the patient.
         */
        public java.util.List<CodeableConcept> fluidConsistencyType() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_FLUID_CONSISTENCY_TYPE);
        }

        /**
         * Free text or additional instructions or information pertaining to the
         * oral diet.
         */
        public String instruction() {
            return getString(FhirPropertyNames.PROPERTY_INSTRUCTION);
        }

        public static final class Builder extends FhirObject.Builder<NutritionOrderOralDiet, NutritionOrderOralDiet.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final java.util.List<CodeableConcept> type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, FhirObject.toArray(type));
                return this;
            }

            public Builder schedule(final java.util.List<Timing> schedule) {
                b.add(FhirPropertyNames.PROPERTY_SCHEDULE, FhirObject.toArray(schedule));
                return this;
            }

            public Builder nutrient(final java.util.List<NutritionOrderNutrient> nutrient) {
                b.add(FhirPropertyNames.PROPERTY_NUTRIENT, FhirObject.toArray(nutrient));
                return this;
            }

            public Builder texture(final java.util.List<NutritionOrderTexture> texture) {
                b.add(FhirPropertyNames.PROPERTY_TEXTURE, FhirObject.toArray(texture));
                return this;
            }

            public Builder fluidConsistencyType(final java.util.List<CodeableConcept> fluidConsistencyType) {
                b.add(FhirPropertyNames.PROPERTY_FLUID_CONSISTENCY_TYPE, FhirObject.toArray(fluidConsistencyType));
                return this;
            }

            public Builder instruction(final String instruction) {
                b.add(FhirPropertyNames.PROPERTY_INSTRUCTION, instruction);
                return this;
            }

            public NutritionOrderOralDiet build() {
                return new NutritionOrderOralDiet(b.build());
            }
        }
    }

    /**
     * A request to supply a diet, formula feeding (enteral) or oral
     * nutritional supplement to a patient/resident.
     */
    public static class NutritionOrderSupplement extends FhirObject {
        public static final String RESOURCE_TYPE = "NutritionOrderSupplement";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public NutritionOrderSupplement(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The kind of nutritional supplement product required such as a high
         * protein or pediatric clear liquid supplement.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The product or brand name of the nutritional supplement such as &quot;Acme
         * Protein Shake&quot;.
         */
        public String productName() {
            return getString(FhirPropertyNames.PROPERTY_PRODUCT_NAME);
        }

        /**
         * The time period and frequency at which the supplement(s) should be
         * given.  The supplement should be given for the combination of all
         * schedules if more than one schedule is present.
         */
        public java.util.List<Timing> schedule() {
            return getList(Timing.class, FhirPropertyNames.PROPERTY_SCHEDULE);
        }

        /**
         * The amount of the nutritional supplement to be given.
         */
        public Quantity quantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_QUANTITY);
        }

        /**
         * Free text or additional instructions or information pertaining to the
         * oral supplement.
         */
        public String instruction() {
            return getString(FhirPropertyNames.PROPERTY_INSTRUCTION);
        }

        public static final class Builder extends FhirObject.Builder<NutritionOrderSupplement, NutritionOrderSupplement.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder productName(final String productName) {
                b.add(FhirPropertyNames.PROPERTY_PRODUCT_NAME, productName);
                return this;
            }

            public Builder schedule(final java.util.List<Timing> schedule) {
                b.add(FhirPropertyNames.PROPERTY_SCHEDULE, FhirObject.toArray(schedule));
                return this;
            }

            public Builder quantity(final Quantity quantity) {
                b.add(FhirPropertyNames.PROPERTY_QUANTITY, quantity);
                return this;
            }

            public Builder instruction(final String instruction) {
                b.add(FhirPropertyNames.PROPERTY_INSTRUCTION, instruction);
                return this;
            }

            public NutritionOrderSupplement build() {
                return new NutritionOrderSupplement(b.build());
            }
        }
    }

    /**
     * A request to supply a diet, formula feeding (enteral) or oral
     * nutritional supplement to a patient/resident.
     */
    public static class NutritionOrderTexture extends FhirObject {
        public static final String RESOURCE_TYPE = "NutritionOrderTexture";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public NutritionOrderTexture(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Any texture modifications (for solid foods) that should be made, e.g.
         * easy to chew, chopped, ground, and pureed.
         */
        public CodeableConcept modifier() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_MODIFIER);
        }

        /**
         * The food type(s) (e.g. meats, all foods)  that the texture
         * modification applies to.  This could be all foods types.
         */
        public CodeableConcept foodType() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_FOOD_TYPE);
        }

        public static final class Builder extends FhirObject.Builder<NutritionOrderTexture, NutritionOrderTexture.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder modifier(final CodeableConcept modifier) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER, modifier);
                return this;
            }

            public Builder foodType(final CodeableConcept foodType) {
                b.add(FhirPropertyNames.PROPERTY_FOOD_TYPE, foodType);
                return this;
            }

            public NutritionOrderTexture build() {
                return new NutritionOrderTexture(b.build());
            }
        }
    }
}
