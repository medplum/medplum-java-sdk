/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Information about a medication that is used to support knowledge.
 */
public class MedicationKnowledge extends DomainResource {
    public static final String RESOURCE_TYPE = "MedicationKnowledge";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public MedicationKnowledge(final JsonObject data) {
        super(data);
    }

    /**
     * A code that specifies this medication, or a textual description if no
     * code is available. Usage note: This could be a standard medication
     * code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be
     * a national or local formulary code, optionally with translations to
     * other code systems.
     */
    public CodeableConcept code() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
    }

    /**
     * A code to indicate if the medication is in active use.  The status
     * refers to the validity about the information of the medication and not
     * to its medicinal properties.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * Describes the details of the manufacturer of the medication product.
     * This is not intended to represent the distributor of a medication
     * product.
     */
    public Reference manufacturer() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_MANUFACTURER);
    }

    /**
     * Describes the form of the item.  Powder; tablets; capsule.
     */
    public CodeableConcept doseForm() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_DOSE_FORM);
    }

    /**
     * Specific amount of the drug in the packaged product.  For example,
     * when specifying a product that has the same strength (For example,
     * Insulin glargine 100 unit per mL solution for injection), this
     * attribute provides additional clarification of the package amount (For
     * example, 3 mL, 10mL, etc.).
     */
    public Quantity amount() {
        return getObject(Quantity.class, FhirPropertyNames.PROPERTY_AMOUNT);
    }

    /**
     * Additional names for a medication, for example, the name(s) given to a
     * medication in different countries.  For example, acetaminophen and
     * paracetamol or salbutamol and albuterol.
     */
    public java.util.List<String> synonym() {
        return getList(String.class, FhirPropertyNames.PROPERTY_SYNONYM);
    }

    /**
     * Associated or related knowledge about a medication.
     */
    public java.util.List<MedicationKnowledgeRelatedMedicationKnowledge> relatedMedicationKnowledge() {
        return getList(MedicationKnowledgeRelatedMedicationKnowledge.class, FhirPropertyNames.PROPERTY_RELATED_MEDICATION_KNOWLEDGE);
    }

    /**
     * Associated or related medications.  For example, if the medication is
     * a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g.
     * Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin),
     * this would link to a branded product (e.g. Crestor).
     */
    public java.util.List<Reference> associatedMedication() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_ASSOCIATED_MEDICATION);
    }

    /**
     * Category of the medication or product (e.g. branded product,
     * therapeutic moeity, generic product, innovator product, etc.).
     */
    public java.util.List<CodeableConcept> productType() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_PRODUCT_TYPE);
    }

    /**
     * Associated documentation about the medication.
     */
    public java.util.List<MedicationKnowledgeMonograph> monograph() {
        return getList(MedicationKnowledgeMonograph.class, FhirPropertyNames.PROPERTY_MONOGRAPH);
    }

    /**
     * Identifies a particular constituent of interest in the product.
     */
    public java.util.List<MedicationKnowledgeIngredient> ingredient() {
        return getList(MedicationKnowledgeIngredient.class, FhirPropertyNames.PROPERTY_INGREDIENT);
    }

    /**
     * The instructions for preparing the medication.
     */
    public String preparationInstruction() {
        return getString(FhirPropertyNames.PROPERTY_PREPARATION_INSTRUCTION);
    }

    /**
     * The intended or approved route of administration.
     */
    public java.util.List<CodeableConcept> intendedRoute() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_INTENDED_ROUTE);
    }

    /**
     * The price of the medication.
     */
    public java.util.List<MedicationKnowledgeCost> cost() {
        return getList(MedicationKnowledgeCost.class, FhirPropertyNames.PROPERTY_COST);
    }

    /**
     * The program under which the medication is reviewed.
     */
    public java.util.List<MedicationKnowledgeMonitoringProgram> monitoringProgram() {
        return getList(MedicationKnowledgeMonitoringProgram.class, FhirPropertyNames.PROPERTY_MONITORING_PROGRAM);
    }

    /**
     * Guidelines for the administration of the medication.
     */
    public java.util.List<MedicationKnowledgeAdministrationGuidelines> administrationGuidelines() {
        return getList(MedicationKnowledgeAdministrationGuidelines.class, FhirPropertyNames.PROPERTY_ADMINISTRATION_GUIDELINES);
    }

    /**
     * Categorization of the medication within a formulary or classification
     * system.
     */
    public java.util.List<MedicationKnowledgeMedicineClassification> medicineClassification() {
        return getList(MedicationKnowledgeMedicineClassification.class, FhirPropertyNames.PROPERTY_MEDICINE_CLASSIFICATION);
    }

    /**
     * Information that only applies to packages (not products).
     */
    public MedicationKnowledgePackaging packaging() {
        return getObject(MedicationKnowledgePackaging.class, FhirPropertyNames.PROPERTY_PACKAGING);
    }

    /**
     * Specifies descriptive properties of the medicine, such as color,
     * shape, imprints, etc.
     */
    public java.util.List<MedicationKnowledgeDrugCharacteristic> drugCharacteristic() {
        return getList(MedicationKnowledgeDrugCharacteristic.class, FhirPropertyNames.PROPERTY_DRUG_CHARACTERISTIC);
    }

    /**
     * Potential clinical issue with or between medication(s) (for example,
     * drug-drug interaction, drug-disease contraindication, drug-allergy
     * interaction, etc.).
     */
    public java.util.List<Reference> contraindication() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_CONTRAINDICATION);
    }

    /**
     * Regulatory information about a medication.
     */
    public java.util.List<MedicationKnowledgeRegulatory> regulatory() {
        return getList(MedicationKnowledgeRegulatory.class, FhirPropertyNames.PROPERTY_REGULATORY);
    }

    /**
     * The time course of drug absorption, distribution, metabolism and
     * excretion of a medication from the body.
     */
    public java.util.List<MedicationKnowledgeKinetics> kinetics() {
        return getList(MedicationKnowledgeKinetics.class, FhirPropertyNames.PROPERTY_KINETICS);
    }

    public static final class Builder extends DomainResource.Builder<MedicationKnowledge, MedicationKnowledge.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder code(final CodeableConcept code) {
            b.add(FhirPropertyNames.PROPERTY_CODE, code);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder manufacturer(final Reference manufacturer) {
            b.add(FhirPropertyNames.PROPERTY_MANUFACTURER, manufacturer);
            return this;
        }

        public Builder doseForm(final CodeableConcept doseForm) {
            b.add(FhirPropertyNames.PROPERTY_DOSE_FORM, doseForm);
            return this;
        }

        public Builder amount(final Quantity amount) {
            b.add(FhirPropertyNames.PROPERTY_AMOUNT, amount);
            return this;
        }

        public Builder synonym(final java.util.List<String> synonym) {
            b.add(FhirPropertyNames.PROPERTY_SYNONYM, FhirObject.toStringArray(synonym));
            return this;
        }

        public Builder relatedMedicationKnowledge(final java.util.List<MedicationKnowledgeRelatedMedicationKnowledge> relatedMedicationKnowledge) {
            b.add(FhirPropertyNames.PROPERTY_RELATED_MEDICATION_KNOWLEDGE, FhirObject.toArray(relatedMedicationKnowledge));
            return this;
        }

        public Builder associatedMedication(final java.util.List<Reference> associatedMedication) {
            b.add(FhirPropertyNames.PROPERTY_ASSOCIATED_MEDICATION, FhirObject.toArray(associatedMedication));
            return this;
        }

        public Builder productType(final java.util.List<CodeableConcept> productType) {
            b.add(FhirPropertyNames.PROPERTY_PRODUCT_TYPE, FhirObject.toArray(productType));
            return this;
        }

        public Builder monograph(final java.util.List<MedicationKnowledgeMonograph> monograph) {
            b.add(FhirPropertyNames.PROPERTY_MONOGRAPH, FhirObject.toArray(monograph));
            return this;
        }

        public Builder ingredient(final java.util.List<MedicationKnowledgeIngredient> ingredient) {
            b.add(FhirPropertyNames.PROPERTY_INGREDIENT, FhirObject.toArray(ingredient));
            return this;
        }

        public Builder preparationInstruction(final String preparationInstruction) {
            b.add(FhirPropertyNames.PROPERTY_PREPARATION_INSTRUCTION, preparationInstruction);
            return this;
        }

        public Builder intendedRoute(final java.util.List<CodeableConcept> intendedRoute) {
            b.add(FhirPropertyNames.PROPERTY_INTENDED_ROUTE, FhirObject.toArray(intendedRoute));
            return this;
        }

        public Builder cost(final java.util.List<MedicationKnowledgeCost> cost) {
            b.add(FhirPropertyNames.PROPERTY_COST, FhirObject.toArray(cost));
            return this;
        }

        public Builder monitoringProgram(final java.util.List<MedicationKnowledgeMonitoringProgram> monitoringProgram) {
            b.add(FhirPropertyNames.PROPERTY_MONITORING_PROGRAM, FhirObject.toArray(monitoringProgram));
            return this;
        }

        public Builder administrationGuidelines(final java.util.List<MedicationKnowledgeAdministrationGuidelines> administrationGuidelines) {
            b.add(FhirPropertyNames.PROPERTY_ADMINISTRATION_GUIDELINES, FhirObject.toArray(administrationGuidelines));
            return this;
        }

        public Builder medicineClassification(final java.util.List<MedicationKnowledgeMedicineClassification> medicineClassification) {
            b.add(FhirPropertyNames.PROPERTY_MEDICINE_CLASSIFICATION, FhirObject.toArray(medicineClassification));
            return this;
        }

        public Builder packaging(final MedicationKnowledgePackaging packaging) {
            b.add(FhirPropertyNames.PROPERTY_PACKAGING, packaging);
            return this;
        }

        public Builder drugCharacteristic(final java.util.List<MedicationKnowledgeDrugCharacteristic> drugCharacteristic) {
            b.add(FhirPropertyNames.PROPERTY_DRUG_CHARACTERISTIC, FhirObject.toArray(drugCharacteristic));
            return this;
        }

        public Builder contraindication(final java.util.List<Reference> contraindication) {
            b.add(FhirPropertyNames.PROPERTY_CONTRAINDICATION, FhirObject.toArray(contraindication));
            return this;
        }

        public Builder regulatory(final java.util.List<MedicationKnowledgeRegulatory> regulatory) {
            b.add(FhirPropertyNames.PROPERTY_REGULATORY, FhirObject.toArray(regulatory));
            return this;
        }

        public Builder kinetics(final java.util.List<MedicationKnowledgeKinetics> kinetics) {
            b.add(FhirPropertyNames.PROPERTY_KINETICS, FhirObject.toArray(kinetics));
            return this;
        }

        public MedicationKnowledge build() {
            return new MedicationKnowledge(b.build());
        }
    }

    /**
     * Information about a medication that is used to support knowledge.
     */
    public static class MedicationKnowledgeAdministrationGuidelines extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationKnowledgeAdministrationGuidelines";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationKnowledgeAdministrationGuidelines(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Dosage for the medication for the specific guidelines.
         */
        public java.util.List<MedicationKnowledgeDosage> dosage() {
            return getList(MedicationKnowledgeDosage.class, FhirPropertyNames.PROPERTY_DOSAGE);
        }

        /**
         * Indication for use that apply to the specific administration
         * guidelines.
         */
        public CodeableConcept indicationCodeableConcept() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_INDICATION_CODEABLE_CONCEPT);
        }

        /**
         * Indication for use that apply to the specific administration
         * guidelines.
         */
        public Reference indicationReference() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_INDICATION_REFERENCE);
        }

        /**
         * Characteristics of the patient that are relevant to the administration
         * guidelines (for example, height, weight, gender, etc.).
         */
        public java.util.List<MedicationKnowledgePatientCharacteristics> patientCharacteristics() {
            return getList(MedicationKnowledgePatientCharacteristics.class, FhirPropertyNames.PROPERTY_PATIENT_CHARACTERISTICS);
        }

        public static final class Builder extends FhirObject.Builder<MedicationKnowledgeAdministrationGuidelines,
                MedicationKnowledgeAdministrationGuidelines.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder dosage(final java.util.List<MedicationKnowledgeDosage> dosage) {
                b.add(FhirPropertyNames.PROPERTY_DOSAGE, FhirObject.toArray(dosage));
                return this;
            }

            public Builder indicationCodeableConcept(final CodeableConcept indicationCodeableConcept) {
                b.add(FhirPropertyNames.PROPERTY_INDICATION_CODEABLE_CONCEPT, indicationCodeableConcept);
                return this;
            }

            public Builder indicationReference(final Reference indicationReference) {
                b.add(FhirPropertyNames.PROPERTY_INDICATION_REFERENCE, indicationReference);
                return this;
            }

            public Builder patientCharacteristics(final java.util.List<MedicationKnowledgePatientCharacteristics> patientCharacteristics) {
                b.add(FhirPropertyNames.PROPERTY_PATIENT_CHARACTERISTICS, FhirObject.toArray(patientCharacteristics));
                return this;
            }

            public MedicationKnowledgeAdministrationGuidelines build() {
                return new MedicationKnowledgeAdministrationGuidelines(b.build());
            }
        }
    }

    /**
     * Information about a medication that is used to support knowledge.
     */
    public static class MedicationKnowledgeCost extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationKnowledgeCost";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationKnowledgeCost(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The category of the cost information.  For example, manufacturers'
         * cost, patient cost, claim reimbursement cost, actual acquisition cost.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The source or owner that assigns the price to the medication.
         */
        public String source() {
            return getString(FhirPropertyNames.PROPERTY_SOURCE);
        }

        /**
         * The price of the medication.
         */
        public Money cost() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_COST);
        }

        public static final class Builder extends FhirObject.Builder<MedicationKnowledgeCost, MedicationKnowledgeCost.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder source(final String source) {
                b.add(FhirPropertyNames.PROPERTY_SOURCE, source);
                return this;
            }

            public Builder cost(final Money cost) {
                b.add(FhirPropertyNames.PROPERTY_COST, cost);
                return this;
            }

            public MedicationKnowledgeCost build() {
                return new MedicationKnowledgeCost(b.build());
            }
        }
    }

    /**
     * Information about a medication that is used to support knowledge.
     */
    public static class MedicationKnowledgeDosage extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationKnowledgeDosage";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationKnowledgeDosage(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The type of dosage (for example, prophylaxis, maintenance,
         * therapeutic, etc.).
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Dosage for the medication for the specific guidelines.
         */
        public java.util.List<Dosage> dosage() {
            return getList(Dosage.class, FhirPropertyNames.PROPERTY_DOSAGE);
        }

        public static final class Builder extends FhirObject.Builder<MedicationKnowledgeDosage, MedicationKnowledgeDosage.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder dosage(final java.util.List<Dosage> dosage) {
                b.add(FhirPropertyNames.PROPERTY_DOSAGE, FhirObject.toArray(dosage));
                return this;
            }

            public MedicationKnowledgeDosage build() {
                return new MedicationKnowledgeDosage(b.build());
            }
        }
    }

    /**
     * Information about a medication that is used to support knowledge.
     */
    public static class MedicationKnowledgeDrugCharacteristic extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationKnowledgeDrugCharacteristic";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationKnowledgeDrugCharacteristic(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A code specifying which characteristic of the medicine is being
         * described (for example, colour, shape, imprint).
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Description of the characteristic.
         */
        public CodeableConcept valueCodeableConcept() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_VALUE_CODEABLE_CONCEPT);
        }

        /**
         * Description of the characteristic.
         */
        public String valueString() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_STRING);
        }

        /**
         * Description of the characteristic.
         */
        public Quantity valueQuantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_VALUE_QUANTITY);
        }

        /**
         * Description of the characteristic.
         */
        public String valueBase64Binary() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_BASE64_BINARY);
        }

        public static final class Builder extends FhirObject.Builder<MedicationKnowledgeDrugCharacteristic, MedicationKnowledgeDrugCharacteristic.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder valueCodeableConcept(final CodeableConcept valueCodeableConcept) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CODEABLE_CONCEPT, valueCodeableConcept);
                return this;
            }

            public Builder valueString(final String valueString) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_STRING, valueString);
                return this;
            }

            public Builder valueQuantity(final Quantity valueQuantity) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_QUANTITY, valueQuantity);
                return this;
            }

            public Builder valueBase64Binary(final String valueBase64Binary) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_BASE64_BINARY, valueBase64Binary);
                return this;
            }

            public MedicationKnowledgeDrugCharacteristic build() {
                return new MedicationKnowledgeDrugCharacteristic(b.build());
            }
        }
    }

    /**
     * Information about a medication that is used to support knowledge.
     */
    public static class MedicationKnowledgeIngredient extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationKnowledgeIngredient";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationKnowledgeIngredient(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The actual ingredient - either a substance (simple ingredient) or
         * another medication.
         */
        public CodeableConcept itemCodeableConcept() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_ITEM_CODEABLE_CONCEPT);
        }

        /**
         * The actual ingredient - either a substance (simple ingredient) or
         * another medication.
         */
        public Reference itemReference() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_ITEM_REFERENCE);
        }

        /**
         * Indication of whether this ingredient affects the therapeutic action
         * of the drug.
         */
        public Boolean isActive() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_IS_ACTIVE);
        }

        /**
         * Specifies how many (or how much) of the items there are in this
         * Medication.  For example, 250 mg per tablet.  This is expressed as a
         * ratio where the numerator is 250mg and the denominator is 1 tablet.
         */
        public Ratio strength() {
            return getObject(Ratio.class, FhirPropertyNames.PROPERTY_STRENGTH);
        }

        public static final class Builder extends FhirObject.Builder<MedicationKnowledgeIngredient, MedicationKnowledgeIngredient.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder itemCodeableConcept(final CodeableConcept itemCodeableConcept) {
                b.add(FhirPropertyNames.PROPERTY_ITEM_CODEABLE_CONCEPT, itemCodeableConcept);
                return this;
            }

            public Builder itemReference(final Reference itemReference) {
                b.add(FhirPropertyNames.PROPERTY_ITEM_REFERENCE, itemReference);
                return this;
            }

            public Builder isActive(final Boolean isActive) {
                b.add(FhirPropertyNames.PROPERTY_IS_ACTIVE, isActive);
                return this;
            }

            public Builder strength(final Ratio strength) {
                b.add(FhirPropertyNames.PROPERTY_STRENGTH, strength);
                return this;
            }

            public MedicationKnowledgeIngredient build() {
                return new MedicationKnowledgeIngredient(b.build());
            }
        }
    }

    /**
     * Information about a medication that is used to support knowledge.
     */
    public static class MedicationKnowledgeKinetics extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationKnowledgeKinetics";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationKnowledgeKinetics(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The drug concentration measured at certain discrete points in time.
         */
        public java.util.List<Quantity> areaUnderCurve() {
            return getList(Quantity.class, FhirPropertyNames.PROPERTY_AREA_UNDER_CURVE);
        }

        /**
         * The median lethal dose of a drug.
         */
        public java.util.List<Quantity> lethalDose50() {
            return getList(Quantity.class, FhirPropertyNames.PROPERTY_LETHAL_DOSE50);
        }

        /**
         * The time required for any specified property (e.g., the concentration
         * of a substance in the body) to decrease by half.
         */
        public Duration halfLifePeriod() {
            return getObject(Duration.class, FhirPropertyNames.PROPERTY_HALF_LIFE_PERIOD);
        }

        public static final class Builder extends FhirObject.Builder<MedicationKnowledgeKinetics, MedicationKnowledgeKinetics.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder areaUnderCurve(final java.util.List<Quantity> areaUnderCurve) {
                b.add(FhirPropertyNames.PROPERTY_AREA_UNDER_CURVE, FhirObject.toArray(areaUnderCurve));
                return this;
            }

            public Builder lethalDose50(final java.util.List<Quantity> lethalDose50) {
                b.add(FhirPropertyNames.PROPERTY_LETHAL_DOSE50, FhirObject.toArray(lethalDose50));
                return this;
            }

            public Builder halfLifePeriod(final Duration halfLifePeriod) {
                b.add(FhirPropertyNames.PROPERTY_HALF_LIFE_PERIOD, halfLifePeriod);
                return this;
            }

            public MedicationKnowledgeKinetics build() {
                return new MedicationKnowledgeKinetics(b.build());
            }
        }
    }

    /**
     * Information about a medication that is used to support knowledge.
     */
    public static class MedicationKnowledgeMaxDispense extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationKnowledgeMaxDispense";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationKnowledgeMaxDispense(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The maximum number of units of the medication that can be dispensed.
         */
        public Quantity quantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_QUANTITY);
        }

        /**
         * The period that applies to the maximum number of units.
         */
        public Duration period() {
            return getObject(Duration.class, FhirPropertyNames.PROPERTY_PERIOD);
        }

        public static final class Builder extends FhirObject.Builder<MedicationKnowledgeMaxDispense, MedicationKnowledgeMaxDispense.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder quantity(final Quantity quantity) {
                b.add(FhirPropertyNames.PROPERTY_QUANTITY, quantity);
                return this;
            }

            public Builder period(final Duration period) {
                b.add(FhirPropertyNames.PROPERTY_PERIOD, period);
                return this;
            }

            public MedicationKnowledgeMaxDispense build() {
                return new MedicationKnowledgeMaxDispense(b.build());
            }
        }
    }

    /**
     * Information about a medication that is used to support knowledge.
     */
    public static class MedicationKnowledgeMedicineClassification extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationKnowledgeMedicineClassification";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationKnowledgeMedicineClassification(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The type of category for the medication (for example, therapeutic
         * classification, therapeutic sub-classification).
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Specific category assigned to the medication (e.g. anti-infective,
         * anti-hypertensive, antibiotic, etc.).
         */
        public java.util.List<CodeableConcept> classification() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_CLASSIFICATION);
        }

        public static final class Builder extends FhirObject.Builder<MedicationKnowledgeMedicineClassification,
                MedicationKnowledgeMedicineClassification.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder classification(final java.util.List<CodeableConcept> classification) {
                b.add(FhirPropertyNames.PROPERTY_CLASSIFICATION, FhirObject.toArray(classification));
                return this;
            }

            public MedicationKnowledgeMedicineClassification build() {
                return new MedicationKnowledgeMedicineClassification(b.build());
            }
        }
    }

    /**
     * Information about a medication that is used to support knowledge.
     */
    public static class MedicationKnowledgeMonitoringProgram extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationKnowledgeMonitoringProgram";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationKnowledgeMonitoringProgram(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Type of program under which the medication is monitored.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Name of the reviewing program.
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        public static final class Builder extends FhirObject.Builder<MedicationKnowledgeMonitoringProgram, MedicationKnowledgeMonitoringProgram.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public MedicationKnowledgeMonitoringProgram build() {
                return new MedicationKnowledgeMonitoringProgram(b.build());
            }
        }
    }

    /**
     * Information about a medication that is used to support knowledge.
     */
    public static class MedicationKnowledgeMonograph extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationKnowledgeMonograph";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationKnowledgeMonograph(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The category of documentation about the medication. (e.g. professional
         * monograph, patient education monograph).
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Associated documentation about the medication.
         */
        public Reference source() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_SOURCE);
        }

        public static final class Builder extends FhirObject.Builder<MedicationKnowledgeMonograph, MedicationKnowledgeMonograph.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder source(final Reference source) {
                b.add(FhirPropertyNames.PROPERTY_SOURCE, source);
                return this;
            }

            public MedicationKnowledgeMonograph build() {
                return new MedicationKnowledgeMonograph(b.build());
            }
        }
    }

    /**
     * Information about a medication that is used to support knowledge.
     */
    public static class MedicationKnowledgePackaging extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationKnowledgePackaging";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationKnowledgePackaging(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A code that defines the specific type of packaging that the medication
         * can be found in (e.g. blister sleeve, tube, bottle).
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The number of product units the package would contain if fully loaded.
         */
        public Quantity quantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_QUANTITY);
        }

        public static final class Builder extends FhirObject.Builder<MedicationKnowledgePackaging, MedicationKnowledgePackaging.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder quantity(final Quantity quantity) {
                b.add(FhirPropertyNames.PROPERTY_QUANTITY, quantity);
                return this;
            }

            public MedicationKnowledgePackaging build() {
                return new MedicationKnowledgePackaging(b.build());
            }
        }
    }

    /**
     * Information about a medication that is used to support knowledge.
     */
    public static class MedicationKnowledgePatientCharacteristics extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationKnowledgePatientCharacteristics";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationKnowledgePatientCharacteristics(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Specific characteristic that is relevant to the administration
         * guideline (e.g. height, weight, gender).
         */
        public CodeableConcept characteristicCodeableConcept() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CHARACTERISTIC_CODEABLE_CONCEPT);
        }

        /**
         * Specific characteristic that is relevant to the administration
         * guideline (e.g. height, weight, gender).
         */
        public Quantity characteristicQuantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_CHARACTERISTIC_QUANTITY);
        }

        /**
         * The specific characteristic (e.g. height, weight, gender, etc.).
         */
        public java.util.List<String> value() {
            return getList(String.class, FhirPropertyNames.PROPERTY_VALUE);
        }

        public static final class Builder extends FhirObject.Builder<MedicationKnowledgePatientCharacteristics,
                MedicationKnowledgePatientCharacteristics.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder characteristicCodeableConcept(final CodeableConcept characteristicCodeableConcept) {
                b.add(FhirPropertyNames.PROPERTY_CHARACTERISTIC_CODEABLE_CONCEPT, characteristicCodeableConcept);
                return this;
            }

            public Builder characteristicQuantity(final Quantity characteristicQuantity) {
                b.add(FhirPropertyNames.PROPERTY_CHARACTERISTIC_QUANTITY, characteristicQuantity);
                return this;
            }

            public Builder value(final java.util.List<String> value) {
                b.add(FhirPropertyNames.PROPERTY_VALUE, FhirObject.toStringArray(value));
                return this;
            }

            public MedicationKnowledgePatientCharacteristics build() {
                return new MedicationKnowledgePatientCharacteristics(b.build());
            }
        }
    }

    /**
     * Information about a medication that is used to support knowledge.
     */
    public static class MedicationKnowledgeRegulatory extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationKnowledgeRegulatory";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationKnowledgeRegulatory(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The authority that is specifying the regulations.
         */
        public Reference regulatoryAuthority() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_REGULATORY_AUTHORITY);
        }

        /**
         * Specifies if changes are allowed when dispensing a medication from a
         * regulatory perspective.
         */
        public java.util.List<MedicationKnowledgeSubstitution> substitution() {
            return getList(MedicationKnowledgeSubstitution.class, FhirPropertyNames.PROPERTY_SUBSTITUTION);
        }

        /**
         * Specifies the schedule of a medication in jurisdiction.
         */
        public java.util.List<MedicationKnowledgeSchedule> schedule() {
            return getList(MedicationKnowledgeSchedule.class, FhirPropertyNames.PROPERTY_SCHEDULE);
        }

        /**
         * The maximum number of units of the medication that can be dispensed in
         * a period.
         */
        public MedicationKnowledgeMaxDispense maxDispense() {
            return getObject(MedicationKnowledgeMaxDispense.class, FhirPropertyNames.PROPERTY_MAX_DISPENSE);
        }

        public static final class Builder extends FhirObject.Builder<MedicationKnowledgeRegulatory, MedicationKnowledgeRegulatory.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder regulatoryAuthority(final Reference regulatoryAuthority) {
                b.add(FhirPropertyNames.PROPERTY_REGULATORY_AUTHORITY, regulatoryAuthority);
                return this;
            }

            public Builder substitution(final java.util.List<MedicationKnowledgeSubstitution> substitution) {
                b.add(FhirPropertyNames.PROPERTY_SUBSTITUTION, FhirObject.toArray(substitution));
                return this;
            }

            public Builder schedule(final java.util.List<MedicationKnowledgeSchedule> schedule) {
                b.add(FhirPropertyNames.PROPERTY_SCHEDULE, FhirObject.toArray(schedule));
                return this;
            }

            public Builder maxDispense(final MedicationKnowledgeMaxDispense maxDispense) {
                b.add(FhirPropertyNames.PROPERTY_MAX_DISPENSE, maxDispense);
                return this;
            }

            public MedicationKnowledgeRegulatory build() {
                return new MedicationKnowledgeRegulatory(b.build());
            }
        }
    }

    /**
     * Information about a medication that is used to support knowledge.
     */
    public static class MedicationKnowledgeRelatedMedicationKnowledge extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationKnowledgeRelatedMedicationKnowledge";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationKnowledgeRelatedMedicationKnowledge(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The category of the associated medication knowledge reference.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Associated documentation about the associated medication knowledge.
         */
        public java.util.List<Reference> reference() {
            return getList(Reference.class, FhirPropertyNames.PROPERTY_REFERENCE);
        }

        public static final class Builder extends FhirObject.Builder<MedicationKnowledgeRelatedMedicationKnowledge,
                MedicationKnowledgeRelatedMedicationKnowledge.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder reference(final java.util.List<Reference> reference) {
                b.add(FhirPropertyNames.PROPERTY_REFERENCE, FhirObject.toArray(reference));
                return this;
            }

            public MedicationKnowledgeRelatedMedicationKnowledge build() {
                return new MedicationKnowledgeRelatedMedicationKnowledge(b.build());
            }
        }
    }

    /**
     * Information about a medication that is used to support knowledge.
     */
    public static class MedicationKnowledgeSchedule extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationKnowledgeSchedule";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationKnowledgeSchedule(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Specifies the specific drug schedule.
         */
        public CodeableConcept schedule() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_SCHEDULE);
        }

        public static final class Builder extends FhirObject.Builder<MedicationKnowledgeSchedule, MedicationKnowledgeSchedule.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder schedule(final CodeableConcept schedule) {
                b.add(FhirPropertyNames.PROPERTY_SCHEDULE, schedule);
                return this;
            }

            public MedicationKnowledgeSchedule build() {
                return new MedicationKnowledgeSchedule(b.build());
            }
        }
    }

    /**
     * Information about a medication that is used to support knowledge.
     */
    public static class MedicationKnowledgeSubstitution extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationKnowledgeSubstitution";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationKnowledgeSubstitution(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Specifies the type of substitution allowed.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Specifies if regulation allows for changes in the medication when
         * dispensing.
         */
        public Boolean allowed() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_ALLOWED);
        }

        public static final class Builder extends FhirObject.Builder<MedicationKnowledgeSubstitution, MedicationKnowledgeSubstitution.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder allowed(final Boolean allowed) {
                b.add(FhirPropertyNames.PROPERTY_ALLOWED, allowed);
                return this;
            }

            public MedicationKnowledgeSubstitution build() {
                return new MedicationKnowledgeSubstitution(b.build());
            }
        }
    }
}
