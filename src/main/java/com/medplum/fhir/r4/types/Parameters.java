/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * This resource is a non-persisted resource used to pass information
 * into and back from an [operation](operations.html). It has no other
 * use, and there is no RESTful endpoint associated with it.
 */
public class Parameters extends FhirResource {
    public static final String RESOURCE_TYPE = "Parameters";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Parameters(final JsonObject data) {
        super(data);
    }

    /**
     * A parameter passed to or received from the operation.
     */
    public java.util.List<ParametersParameter> parameter() {
        return getList(ParametersParameter.class, FhirPropertyNames.PROPERTY_PARAMETER);
    }

    public static final class Builder extends FhirResource.Builder<Parameters, Parameters.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder parameter(final java.util.List<ParametersParameter> parameter) {
            b.add(FhirPropertyNames.PROPERTY_PARAMETER, FhirObject.toArray(parameter));
            return this;
        }

        public Parameters build() {
            return new Parameters(b.build());
        }
    }

    /**
     * This resource is a non-persisted resource used to pass information
     * into and back from an [operation](operations.html). It has no other
     * use, and there is no RESTful endpoint associated with it.
     */
    public static class ParametersParameter extends FhirObject {
        public static final String RESOURCE_TYPE = "ParametersParameter";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ParametersParameter(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The name of the parameter (reference to the operation definition).
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueBase64Binary() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_BASE64_BINARY);
        }

        /**
         * If the parameter is a data type.
         */
        public Boolean valueBoolean() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_VALUE_BOOLEAN);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueCanonical() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_CANONICAL);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueCode() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_CODE);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueDate() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_DATE);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueDateTime() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_DATE_TIME);
        }

        /**
         * If the parameter is a data type.
         */
        public Integer valueDecimal() {
            return data.getInt(FhirPropertyNames.PROPERTY_VALUE_DECIMAL);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueId() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_ID);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueInstant() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_INSTANT);
        }

        /**
         * If the parameter is a data type.
         */
        public Integer valueInteger() {
            return data.getInt(FhirPropertyNames.PROPERTY_VALUE_INTEGER);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueMarkdown() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_MARKDOWN);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueOid() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_OID);
        }

        /**
         * If the parameter is a data type.
         */
        public Integer valuePositiveInt() {
            return data.getInt(FhirPropertyNames.PROPERTY_VALUE_POSITIVE_INT);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueString() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_STRING);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueTime() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_TIME);
        }

        /**
         * If the parameter is a data type.
         */
        public Integer valueUnsignedInt() {
            return data.getInt(FhirPropertyNames.PROPERTY_VALUE_UNSIGNED_INT);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueUri() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_URI);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueUrl() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_URL);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueUuid() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_UUID);
        }

        /**
         * If the parameter is a data type.
         */
        public Address valueAddress() {
            return getObject(Address.class, FhirPropertyNames.PROPERTY_VALUE_ADDRESS);
        }

        /**
         * If the parameter is a data type.
         */
        public Age valueAge() {
            return getObject(Age.class, FhirPropertyNames.PROPERTY_VALUE_AGE);
        }

        /**
         * If the parameter is a data type.
         */
        public Annotation valueAnnotation() {
            return getObject(Annotation.class, FhirPropertyNames.PROPERTY_VALUE_ANNOTATION);
        }

        /**
         * If the parameter is a data type.
         */
        public Attachment valueAttachment() {
            return getObject(Attachment.class, FhirPropertyNames.PROPERTY_VALUE_ATTACHMENT);
        }

        /**
         * If the parameter is a data type.
         */
        public CodeableConcept valueCodeableConcept() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_VALUE_CODEABLE_CONCEPT);
        }

        /**
         * If the parameter is a data type.
         */
        public Coding valueCoding() {
            return getObject(Coding.class, FhirPropertyNames.PROPERTY_VALUE_CODING);
        }

        /**
         * If the parameter is a data type.
         */
        public ContactPoint valueContactPoint() {
            return getObject(ContactPoint.class, FhirPropertyNames.PROPERTY_VALUE_CONTACT_POINT);
        }

        /**
         * If the parameter is a data type.
         */
        public Count valueCount() {
            return getObject(Count.class, FhirPropertyNames.PROPERTY_VALUE_COUNT);
        }

        /**
         * If the parameter is a data type.
         */
        public Distance valueDistance() {
            return getObject(Distance.class, FhirPropertyNames.PROPERTY_VALUE_DISTANCE);
        }

        /**
         * If the parameter is a data type.
         */
        public Duration valueDuration() {
            return getObject(Duration.class, FhirPropertyNames.PROPERTY_VALUE_DURATION);
        }

        /**
         * If the parameter is a data type.
         */
        public HumanName valueHumanName() {
            return getObject(HumanName.class, FhirPropertyNames.PROPERTY_VALUE_HUMAN_NAME);
        }

        /**
         * If the parameter is a data type.
         */
        public Identifier valueIdentifier() {
            return getObject(Identifier.class, FhirPropertyNames.PROPERTY_VALUE_IDENTIFIER);
        }

        /**
         * If the parameter is a data type.
         */
        public Money valueMoney() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_VALUE_MONEY);
        }

        /**
         * If the parameter is a data type.
         */
        public Period valuePeriod() {
            return getObject(Period.class, FhirPropertyNames.PROPERTY_VALUE_PERIOD);
        }

        /**
         * If the parameter is a data type.
         */
        public Quantity valueQuantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_VALUE_QUANTITY);
        }

        /**
         * If the parameter is a data type.
         */
        public Range valueRange() {
            return getObject(Range.class, FhirPropertyNames.PROPERTY_VALUE_RANGE);
        }

        /**
         * If the parameter is a data type.
         */
        public Ratio valueRatio() {
            return getObject(Ratio.class, FhirPropertyNames.PROPERTY_VALUE_RATIO);
        }

        /**
         * If the parameter is a data type.
         */
        public Reference valueReference() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_VALUE_REFERENCE);
        }

        /**
         * If the parameter is a data type.
         */
        public SampledData valueSampledData() {
            return getObject(SampledData.class, FhirPropertyNames.PROPERTY_VALUE_SAMPLED_DATA);
        }

        /**
         * If the parameter is a data type.
         */
        public Signature valueSignature() {
            return getObject(Signature.class, FhirPropertyNames.PROPERTY_VALUE_SIGNATURE);
        }

        /**
         * If the parameter is a data type.
         */
        public Timing valueTiming() {
            return getObject(Timing.class, FhirPropertyNames.PROPERTY_VALUE_TIMING);
        }

        /**
         * If the parameter is a data type.
         */
        public ContactDetail valueContactDetail() {
            return getObject(ContactDetail.class, FhirPropertyNames.PROPERTY_VALUE_CONTACT_DETAIL);
        }

        /**
         * If the parameter is a data type.
         */
        public Contributor valueContributor() {
            return getObject(Contributor.class, FhirPropertyNames.PROPERTY_VALUE_CONTRIBUTOR);
        }

        /**
         * If the parameter is a data type.
         */
        public DataRequirement valueDataRequirement() {
            return getObject(DataRequirement.class, FhirPropertyNames.PROPERTY_VALUE_DATA_REQUIREMENT);
        }

        /**
         * If the parameter is a data type.
         */
        public Expression valueExpression() {
            return getObject(Expression.class, FhirPropertyNames.PROPERTY_VALUE_EXPRESSION);
        }

        /**
         * If the parameter is a data type.
         */
        public ParameterDefinition valueParameterDefinition() {
            return getObject(ParameterDefinition.class, FhirPropertyNames.PROPERTY_VALUE_PARAMETER_DEFINITION);
        }

        /**
         * If the parameter is a data type.
         */
        public RelatedArtifact valueRelatedArtifact() {
            return getObject(RelatedArtifact.class, FhirPropertyNames.PROPERTY_VALUE_RELATED_ARTIFACT);
        }

        /**
         * If the parameter is a data type.
         */
        public TriggerDefinition valueTriggerDefinition() {
            return getObject(TriggerDefinition.class, FhirPropertyNames.PROPERTY_VALUE_TRIGGER_DEFINITION);
        }

        /**
         * If the parameter is a data type.
         */
        public UsageContext valueUsageContext() {
            return getObject(UsageContext.class, FhirPropertyNames.PROPERTY_VALUE_USAGE_CONTEXT);
        }

        /**
         * If the parameter is a data type.
         */
        public Dosage valueDosage() {
            return getObject(Dosage.class, FhirPropertyNames.PROPERTY_VALUE_DOSAGE);
        }

        /**
         * If the parameter is a data type.
         */
        public Meta valueMeta() {
            return getObject(Meta.class, FhirPropertyNames.PROPERTY_VALUE_META);
        }

        /**
         * If the parameter is a whole resource.
         */
        public FhirResource resource() {
            return getObject(FhirResource.class, FhirPropertyNames.PROPERTY_RESOURCE);
        }

        public <T extends FhirResource> T resource(final Class<T> c) {
            return getObject(c, FhirPropertyNames.PROPERTY_RESOURCE);
        }

        /**
         * A named part of a multi-part parameter.
         */
        public java.util.List<ParametersParameter> part() {
            return getList(ParametersParameter.class, FhirPropertyNames.PROPERTY_PART);
        }

        public static final class Builder extends FhirObject.Builder<ParametersParameter, ParametersParameter.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder valueBase64Binary(final String valueBase64Binary) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_BASE64_BINARY, valueBase64Binary);
                return this;
            }

            public Builder valueBoolean(final Boolean valueBoolean) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_BOOLEAN, valueBoolean);
                return this;
            }

            public Builder valueCanonical(final String valueCanonical) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CANONICAL, valueCanonical);
                return this;
            }

            public Builder valueCode(final String valueCode) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CODE, valueCode);
                return this;
            }

            public Builder valueDate(final String valueDate) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DATE, valueDate);
                return this;
            }

            public Builder valueDateTime(final String valueDateTime) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DATE_TIME, valueDateTime);
                return this;
            }

            public Builder valueDecimal(final Integer valueDecimal) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DECIMAL, valueDecimal);
                return this;
            }

            public Builder valueId(final String valueId) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_ID, valueId);
                return this;
            }

            public Builder valueInstant(final String valueInstant) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_INSTANT, valueInstant);
                return this;
            }

            public Builder valueInteger(final Integer valueInteger) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_INTEGER, valueInteger);
                return this;
            }

            public Builder valueMarkdown(final String valueMarkdown) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_MARKDOWN, valueMarkdown);
                return this;
            }

            public Builder valueOid(final String valueOid) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_OID, valueOid);
                return this;
            }

            public Builder valuePositiveInt(final Integer valuePositiveInt) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_POSITIVE_INT, valuePositiveInt);
                return this;
            }

            public Builder valueString(final String valueString) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_STRING, valueString);
                return this;
            }

            public Builder valueTime(final String valueTime) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_TIME, valueTime);
                return this;
            }

            public Builder valueUnsignedInt(final Integer valueUnsignedInt) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_UNSIGNED_INT, valueUnsignedInt);
                return this;
            }

            public Builder valueUri(final String valueUri) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_URI, valueUri);
                return this;
            }

            public Builder valueUrl(final String valueUrl) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_URL, valueUrl);
                return this;
            }

            public Builder valueUuid(final String valueUuid) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_UUID, valueUuid);
                return this;
            }

            public Builder valueAddress(final Address valueAddress) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_ADDRESS, valueAddress);
                return this;
            }

            public Builder valueAge(final Age valueAge) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_AGE, valueAge);
                return this;
            }

            public Builder valueAnnotation(final Annotation valueAnnotation) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_ANNOTATION, valueAnnotation);
                return this;
            }

            public Builder valueAttachment(final Attachment valueAttachment) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_ATTACHMENT, valueAttachment);
                return this;
            }

            public Builder valueCodeableConcept(final CodeableConcept valueCodeableConcept) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CODEABLE_CONCEPT, valueCodeableConcept);
                return this;
            }

            public Builder valueCoding(final Coding valueCoding) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CODING, valueCoding);
                return this;
            }

            public Builder valueContactPoint(final ContactPoint valueContactPoint) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CONTACT_POINT, valueContactPoint);
                return this;
            }

            public Builder valueCount(final Count valueCount) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_COUNT, valueCount);
                return this;
            }

            public Builder valueDistance(final Distance valueDistance) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DISTANCE, valueDistance);
                return this;
            }

            public Builder valueDuration(final Duration valueDuration) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DURATION, valueDuration);
                return this;
            }

            public Builder valueHumanName(final HumanName valueHumanName) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_HUMAN_NAME, valueHumanName);
                return this;
            }

            public Builder valueIdentifier(final Identifier valueIdentifier) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_IDENTIFIER, valueIdentifier);
                return this;
            }

            public Builder valueMoney(final Money valueMoney) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_MONEY, valueMoney);
                return this;
            }

            public Builder valuePeriod(final Period valuePeriod) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_PERIOD, valuePeriod);
                return this;
            }

            public Builder valueQuantity(final Quantity valueQuantity) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_QUANTITY, valueQuantity);
                return this;
            }

            public Builder valueRange(final Range valueRange) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_RANGE, valueRange);
                return this;
            }

            public Builder valueRatio(final Ratio valueRatio) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_RATIO, valueRatio);
                return this;
            }

            public Builder valueReference(final Reference valueReference) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_REFERENCE, valueReference);
                return this;
            }

            public Builder valueSampledData(final SampledData valueSampledData) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_SAMPLED_DATA, valueSampledData);
                return this;
            }

            public Builder valueSignature(final Signature valueSignature) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_SIGNATURE, valueSignature);
                return this;
            }

            public Builder valueTiming(final Timing valueTiming) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_TIMING, valueTiming);
                return this;
            }

            public Builder valueContactDetail(final ContactDetail valueContactDetail) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CONTACT_DETAIL, valueContactDetail);
                return this;
            }

            public Builder valueContributor(final Contributor valueContributor) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CONTRIBUTOR, valueContributor);
                return this;
            }

            public Builder valueDataRequirement(final DataRequirement valueDataRequirement) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DATA_REQUIREMENT, valueDataRequirement);
                return this;
            }

            public Builder valueExpression(final Expression valueExpression) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_EXPRESSION, valueExpression);
                return this;
            }

            public Builder valueParameterDefinition(final ParameterDefinition valueParameterDefinition) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_PARAMETER_DEFINITION, valueParameterDefinition);
                return this;
            }

            public Builder valueRelatedArtifact(final RelatedArtifact valueRelatedArtifact) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_RELATED_ARTIFACT, valueRelatedArtifact);
                return this;
            }

            public Builder valueTriggerDefinition(final TriggerDefinition valueTriggerDefinition) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_TRIGGER_DEFINITION, valueTriggerDefinition);
                return this;
            }

            public Builder valueUsageContext(final UsageContext valueUsageContext) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_USAGE_CONTEXT, valueUsageContext);
                return this;
            }

            public Builder valueDosage(final Dosage valueDosage) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DOSAGE, valueDosage);
                return this;
            }

            public Builder valueMeta(final Meta valueMeta) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_META, valueMeta);
                return this;
            }

            public Builder resource(final JsonObject resource) {
                b.add(FhirPropertyNames.PROPERTY_RESOURCE, resource);
                return this;
            }

            public Builder part(final java.util.List<ParametersParameter> part) {
                b.add(FhirPropertyNames.PROPERTY_PART, FhirObject.toArray(part));
                return this;
            }

            public ParametersParameter build() {
                return new ParametersParameter(b.build());
            }
        }
    }
}
