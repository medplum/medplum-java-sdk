/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Information about a person that is involved in the care for a patient,
 * but who is not the target of healthcare, nor has a formal
 * responsibility in the care process.
 */
public class RelatedPerson extends DomainResource {
    public static final String RESOURCE_TYPE = "RelatedPerson";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public RelatedPerson(final JsonObject data) {
        super(data);
    }

    /**
     * Identifier for a person within a particular scope.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * Whether this related person record is in active use.
     */
    public Boolean active() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_ACTIVE);
    }

    /**
     * The patient this person is related to.
     */
    public Reference patient() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PATIENT);
    }

    /**
     * The nature of the relationship between a patient and the related
     * person.
     */
    public java.util.List<CodeableConcept> relationship() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_RELATIONSHIP);
    }

    /**
     * A name associated with the person.
     */
    public java.util.List<HumanName> name() {
        return getList(HumanName.class, FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * A contact detail for the person, e.g. a telephone number or an email
     * address.
     */
    public java.util.List<ContactPoint> telecom() {
        return getList(ContactPoint.class, FhirPropertyNames.PROPERTY_TELECOM);
    }

    /**
     * Administrative Gender - the gender that the person is considered to
     * have for administration and record keeping purposes.
     */
    public String gender() {
        return getString(FhirPropertyNames.PROPERTY_GENDER);
    }

    /**
     * The date on which the related person was born.
     */
    public java.time.LocalDate birthDate() {
        return getLocalDate(FhirPropertyNames.PROPERTY_BIRTH_DATE);
    }

    /**
     * Address where the related person can be contacted or visited.
     */
    public java.util.List<Address> address() {
        return getList(Address.class, FhirPropertyNames.PROPERTY_ADDRESS);
    }

    /**
     * Image of the person.
     */
    public java.util.List<Attachment> photo() {
        return getList(Attachment.class, FhirPropertyNames.PROPERTY_PHOTO);
    }

    /**
     * The period of time during which this relationship is or was active. If
     * there are no dates defined, then the interval is unknown.
     */
    public Period period() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_PERIOD);
    }

    /**
     * A language which may be used to communicate with about the patient's
     * health.
     */
    public java.util.List<RelatedPersonCommunication> communication() {
        return getList(RelatedPersonCommunication.class, FhirPropertyNames.PROPERTY_COMMUNICATION);
    }

    public static final class Builder extends DomainResource.Builder<RelatedPerson, RelatedPerson.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder active(final Boolean active) {
            b.add(FhirPropertyNames.PROPERTY_ACTIVE, active);
            return this;
        }

        public Builder patient(final Reference patient) {
            b.add(FhirPropertyNames.PROPERTY_PATIENT, patient);
            return this;
        }

        public Builder relationship(final java.util.List<CodeableConcept> relationship) {
            b.add(FhirPropertyNames.PROPERTY_RELATIONSHIP, FhirObject.toArray(relationship));
            return this;
        }

        public Builder name(final java.util.List<HumanName> name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, FhirObject.toArray(name));
            return this;
        }

        public Builder telecom(final java.util.List<ContactPoint> telecom) {
            b.add(FhirPropertyNames.PROPERTY_TELECOM, FhirObject.toArray(telecom));
            return this;
        }

        public Builder gender(final String gender) {
            b.add(FhirPropertyNames.PROPERTY_GENDER, gender);
            return this;
        }

        public Builder birthDate(final java.time.LocalDate birthDate) {
            b.add(FhirPropertyNames.PROPERTY_BIRTH_DATE, birthDate.toString());
            return this;
        }

        public Builder address(final java.util.List<Address> address) {
            b.add(FhirPropertyNames.PROPERTY_ADDRESS, FhirObject.toArray(address));
            return this;
        }

        public Builder photo(final java.util.List<Attachment> photo) {
            b.add(FhirPropertyNames.PROPERTY_PHOTO, FhirObject.toArray(photo));
            return this;
        }

        public Builder period(final Period period) {
            b.add(FhirPropertyNames.PROPERTY_PERIOD, period);
            return this;
        }

        public Builder communication(final java.util.List<RelatedPersonCommunication> communication) {
            b.add(FhirPropertyNames.PROPERTY_COMMUNICATION, FhirObject.toArray(communication));
            return this;
        }

        public RelatedPerson build() {
            return new RelatedPerson(b.build());
        }
    }

    /**
     * Information about a person that is involved in the care for a patient,
     * but who is not the target of healthcare, nor has a formal
     * responsibility in the care process.
     */
    public static class RelatedPersonCommunication extends FhirObject {
        public static final String RESOURCE_TYPE = "RelatedPersonCommunication";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public RelatedPersonCommunication(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The ISO-639-1 alpha 2 code in lower case for the language, optionally
         * followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in
         * upper case; e.g. &quot;en&quot; for English, or &quot;en-US&quot; for American English
         * versus &quot;en-EN&quot; for England English.
         */
        public CodeableConcept language() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_LANGUAGE);
        }

        /**
         * Indicates whether or not the patient prefers this language (over other
         * languages he masters up a certain level).
         */
        public Boolean preferred() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_PREFERRED);
        }

        public static final class Builder extends FhirObject.Builder<RelatedPersonCommunication, RelatedPersonCommunication.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder language(final CodeableConcept language) {
                b.add(FhirPropertyNames.PROPERTY_LANGUAGE, language);
                return this;
            }

            public Builder preferred(final Boolean preferred) {
                b.add(FhirPropertyNames.PROPERTY_PREFERRED, preferred);
                return this;
            }

            public RelatedPersonCommunication build() {
                return new RelatedPersonCommunication(b.build());
            }
        }
    }
}
