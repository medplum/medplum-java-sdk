/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * An assessment of the likely outcome(s) for a patient or other subject
 * as well as the likelihood of each outcome.
 */
public class RiskAssessment extends DomainResource {
    public static final String RESOURCE_TYPE = "RiskAssessment";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public RiskAssessment(final JsonObject data) {
        super(data);
    }

    /**
     * Business identifier assigned to the risk assessment.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * A reference to the request that is fulfilled by this risk assessment.
     */
    public Reference basedOn() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_BASED_ON);
    }

    /**
     * A reference to a resource that this risk assessment is part of, such
     * as a Procedure.
     */
    public Reference parent() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PARENT);
    }

    /**
     * The status of the RiskAssessment, using the same statuses as an
     * Observation.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * The algorithm, process or mechanism used to evaluate the risk.
     */
    public CodeableConcept method() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_METHOD);
    }

    /**
     * The type of the risk assessment performed.
     */
    public CodeableConcept code() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
    }

    /**
     * The patient or group the risk assessment applies to.
     */
    public Reference subject() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * The encounter where the assessment was performed.
     */
    public Reference encounter() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ENCOUNTER);
    }

    /**
     * The date (and possibly time) the risk assessment was performed.
     */
    public String occurrenceDateTime() {
        return getString(FhirPropertyNames.PROPERTY_OCCURRENCE_DATE_TIME);
    }

    /**
     * The date (and possibly time) the risk assessment was performed.
     */
    public Period occurrencePeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_OCCURRENCE_PERIOD);
    }

    /**
     * For assessments or prognosis specific to a particular condition,
     * indicates the condition being assessed.
     */
    public Reference condition() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_CONDITION);
    }

    /**
     * The provider or software application that performed the assessment.
     */
    public Reference performer() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PERFORMER);
    }

    /**
     * The reason the risk assessment was performed.
     */
    public java.util.List<CodeableConcept> reasonCode() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_REASON_CODE);
    }

    /**
     * Resources supporting the reason the risk assessment was performed.
     */
    public java.util.List<Reference> reasonReference() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_REASON_REFERENCE);
    }

    /**
     * Indicates the source data considered as part of the assessment (for
     * example, FamilyHistory, Observations, Procedures, Conditions, etc.).
     */
    public java.util.List<Reference> basis() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_BASIS);
    }

    /**
     * Describes the expected outcome for the subject.
     */
    public java.util.List<RiskAssessmentPrediction> prediction() {
        return getList(RiskAssessmentPrediction.class, FhirPropertyNames.PROPERTY_PREDICTION);
    }

    /**
     * A description of the steps that might be taken to reduce the
     * identified risk(s).
     */
    public String mitigation() {
        return getString(FhirPropertyNames.PROPERTY_MITIGATION);
    }

    /**
     * Additional comments about the risk assessment.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    public static final class Builder extends DomainResource.Builder<RiskAssessment, RiskAssessment.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder basedOn(final Reference basedOn) {
            b.add(FhirPropertyNames.PROPERTY_BASED_ON, basedOn);
            return this;
        }

        public Builder parent(final Reference parent) {
            b.add(FhirPropertyNames.PROPERTY_PARENT, parent);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder method(final CodeableConcept method) {
            b.add(FhirPropertyNames.PROPERTY_METHOD, method);
            return this;
        }

        public Builder code(final CodeableConcept code) {
            b.add(FhirPropertyNames.PROPERTY_CODE, code);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(FhirPropertyNames.PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder occurrenceDateTime(final String occurrenceDateTime) {
            b.add(FhirPropertyNames.PROPERTY_OCCURRENCE_DATE_TIME, occurrenceDateTime);
            return this;
        }

        public Builder occurrencePeriod(final Period occurrencePeriod) {
            b.add(FhirPropertyNames.PROPERTY_OCCURRENCE_PERIOD, occurrencePeriod);
            return this;
        }

        public Builder condition(final Reference condition) {
            b.add(FhirPropertyNames.PROPERTY_CONDITION, condition);
            return this;
        }

        public Builder performer(final Reference performer) {
            b.add(FhirPropertyNames.PROPERTY_PERFORMER, performer);
            return this;
        }

        public Builder reasonCode(final java.util.List<CodeableConcept> reasonCode) {
            b.add(FhirPropertyNames.PROPERTY_REASON_CODE, FhirObject.toArray(reasonCode));
            return this;
        }

        public Builder reasonReference(final java.util.List<Reference> reasonReference) {
            b.add(FhirPropertyNames.PROPERTY_REASON_REFERENCE, FhirObject.toArray(reasonReference));
            return this;
        }

        public Builder basis(final java.util.List<Reference> basis) {
            b.add(FhirPropertyNames.PROPERTY_BASIS, FhirObject.toArray(basis));
            return this;
        }

        public Builder prediction(final java.util.List<RiskAssessmentPrediction> prediction) {
            b.add(FhirPropertyNames.PROPERTY_PREDICTION, FhirObject.toArray(prediction));
            return this;
        }

        public Builder mitigation(final String mitigation) {
            b.add(FhirPropertyNames.PROPERTY_MITIGATION, mitigation);
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public RiskAssessment build() {
            return new RiskAssessment(b.build());
        }
    }

    /**
     * An assessment of the likely outcome(s) for a patient or other subject
     * as well as the likelihood of each outcome.
     */
    public static class RiskAssessmentPrediction extends FhirObject {
        public static final String RESOURCE_TYPE = "RiskAssessmentPrediction";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public RiskAssessmentPrediction(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * One of the potential outcomes for the patient (e.g. remission, death,
         * a particular condition).
         */
        public CodeableConcept outcome() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_OUTCOME);
        }

        /**
         * Indicates how likely the outcome is (in the specified timeframe).
         */
        public Integer probabilityDecimal() {
            return data.getInt(FhirPropertyNames.PROPERTY_PROBABILITY_DECIMAL);
        }

        /**
         * Indicates how likely the outcome is (in the specified timeframe).
         */
        public Range probabilityRange() {
            return getObject(Range.class, FhirPropertyNames.PROPERTY_PROBABILITY_RANGE);
        }

        /**
         * Indicates how likely the outcome is (in the specified timeframe),
         * expressed as a qualitative value (e.g. low, medium, or high).
         */
        public CodeableConcept qualitativeRisk() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_QUALITATIVE_RISK);
        }

        /**
         * Indicates the risk for this particular subject (with their specific
         * characteristics) divided by the risk of the population in general.
         * (Numbers greater than 1 = higher risk than the population, numbers
         * less than 1 = lower risk.).
         */
        public Double relativeRisk() {
            return data.getJsonNumber(FhirPropertyNames.PROPERTY_RELATIVE_RISK).doubleValue();
        }

        /**
         * Indicates the period of time or age range of the subject to which the
         * specified probability applies.
         */
        public Period whenPeriod() {
            return getObject(Period.class, FhirPropertyNames.PROPERTY_WHEN_PERIOD);
        }

        /**
         * Indicates the period of time or age range of the subject to which the
         * specified probability applies.
         */
        public Range whenRange() {
            return getObject(Range.class, FhirPropertyNames.PROPERTY_WHEN_RANGE);
        }

        /**
         * Additional information explaining the basis for the prediction.
         */
        public String rationale() {
            return getString(FhirPropertyNames.PROPERTY_RATIONALE);
        }

        public static final class Builder extends FhirObject.Builder<RiskAssessmentPrediction, RiskAssessmentPrediction.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder outcome(final CodeableConcept outcome) {
                b.add(FhirPropertyNames.PROPERTY_OUTCOME, outcome);
                return this;
            }

            public Builder probabilityDecimal(final Integer probabilityDecimal) {
                b.add(FhirPropertyNames.PROPERTY_PROBABILITY_DECIMAL, probabilityDecimal);
                return this;
            }

            public Builder probabilityRange(final Range probabilityRange) {
                b.add(FhirPropertyNames.PROPERTY_PROBABILITY_RANGE, probabilityRange);
                return this;
            }

            public Builder qualitativeRisk(final CodeableConcept qualitativeRisk) {
                b.add(FhirPropertyNames.PROPERTY_QUALITATIVE_RISK, qualitativeRisk);
                return this;
            }

            public Builder relativeRisk(final Double relativeRisk) {
                b.add(FhirPropertyNames.PROPERTY_RELATIVE_RISK, relativeRisk);
                return this;
            }

            public Builder whenPeriod(final Period whenPeriod) {
                b.add(FhirPropertyNames.PROPERTY_WHEN_PERIOD, whenPeriod);
                return this;
            }

            public Builder whenRange(final Range whenRange) {
                b.add(FhirPropertyNames.PROPERTY_WHEN_RANGE, whenRange);
                return this;
            }

            public Builder rationale(final String rationale) {
                b.add(FhirPropertyNames.PROPERTY_RATIONALE, rationale);
                return this;
            }

            public RiskAssessmentPrediction build() {
                return new RiskAssessmentPrediction(b.build());
            }
        }
    }
}
