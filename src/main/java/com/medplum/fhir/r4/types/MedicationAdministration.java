/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Describes the event of a patient consuming or otherwise being
 * administered a medication.  This may be as simple as swallowing a
 * tablet or it may be a long running infusion.  Related resources tie
 * this event to the authorizing prescription, and the specific encounter
 * between patient and health care practitioner.
 */
public class MedicationAdministration extends DomainResource {
    public static final String RESOURCE_TYPE = "MedicationAdministration";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public MedicationAdministration(final JsonObject data) {
        super(data);
    }

    /**
     * Identifiers associated with this Medication Administration that are
     * defined by business processes and/or used to refer to it when a direct
     * URL reference to the resource itself is not appropriate. They are
     * business identifiers assigned to this resource by the performer or
     * other systems and remain constant as the resource is updated and
     * propagates from server to server.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * A protocol, guideline, orderset, or other definition that was adhered
     * to in whole or in part by this event.
     */
    public java.util.List<java.net.URI> instantiates() {
        return getList(java.net.URI.class, FhirPropertyNames.PROPERTY_INSTANTIATES);
    }

    /**
     * A larger event of which this particular event is a component or step.
     */
    public java.util.List<Reference> partOf() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_PART_OF);
    }

    /**
     * Will generally be set to show that the administration has been
     * completed.  For some long running administrations such as infusions,
     * it is possible for an administration to be started but not completed
     * or it may be paused while some other process is under way.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * A code indicating why the administration was not performed.
     */
    public java.util.List<CodeableConcept> statusReason() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_STATUS_REASON);
    }

    /**
     * Indicates where the medication is expected to be consumed or
     * administered.
     */
    public CodeableConcept category() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CATEGORY);
    }

    /**
     * Identifies the medication that was administered. This is either a link
     * to a resource representing the details of the medication or a simple
     * attribute carrying a code that identifies the medication from a known
     * list of medications.
     */
    public CodeableConcept medicationCodeableConcept() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_MEDICATION_CODEABLE_CONCEPT);
    }

    /**
     * Identifies the medication that was administered. This is either a link
     * to a resource representing the details of the medication or a simple
     * attribute carrying a code that identifies the medication from a known
     * list of medications.
     */
    public Reference medicationReference() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_MEDICATION_REFERENCE);
    }

    /**
     * The person or animal or group receiving the medication.
     */
    public Reference subject() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * The visit, admission, or other contact between patient and health care
     * provider during which the medication administration was performed.
     */
    public Reference context() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_CONTEXT);
    }

    /**
     * Additional information (for example, patient height and weight) that
     * supports the administration of the medication.
     */
    public java.util.List<Reference> supportingInformation() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_SUPPORTING_INFORMATION);
    }

    /**
     * A specific date/time or interval of time during which the
     * administration took place (or did not take place, when the 'notGiven'
     * attribute is true). For many administrations, such as swallowing a
     * tablet the use of dateTime is more appropriate.
     */
    public String effectiveDateTime() {
        return getString(FhirPropertyNames.PROPERTY_EFFECTIVE_DATE_TIME);
    }

    /**
     * A specific date/time or interval of time during which the
     * administration took place (or did not take place, when the 'notGiven'
     * attribute is true). For many administrations, such as swallowing a
     * tablet the use of dateTime is more appropriate.
     */
    public Period effectivePeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD);
    }

    /**
     * Indicates who or what performed the medication administration and how
     * they were involved.
     */
    public java.util.List<MedicationAdministrationPerformer> performer() {
        return getList(MedicationAdministrationPerformer.class, FhirPropertyNames.PROPERTY_PERFORMER);
    }

    /**
     * A code indicating why the medication was given.
     */
    public java.util.List<CodeableConcept> reasonCode() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_REASON_CODE);
    }

    /**
     * Condition or observation that supports why the medication was
     * administered.
     */
    public java.util.List<Reference> reasonReference() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_REASON_REFERENCE);
    }

    /**
     * The original request, instruction or authority to perform the
     * administration.
     */
    public Reference request() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_REQUEST);
    }

    /**
     * The device used in administering the medication to the patient.  For
     * example, a particular infusion pump.
     */
    public java.util.List<Reference> device() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_DEVICE);
    }

    /**
     * Extra information about the medication administration that is not
     * conveyed by the other attributes.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    /**
     * Describes the medication dosage information details e.g. dose, rate,
     * site, route, etc.
     */
    public MedicationAdministrationDosage dosage() {
        return getObject(MedicationAdministrationDosage.class, FhirPropertyNames.PROPERTY_DOSAGE);
    }

    /**
     * A summary of the events of interest that have occurred, such as when
     * the administration was verified.
     */
    public java.util.List<Reference> eventHistory() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_EVENT_HISTORY);
    }

    public static final class Builder extends DomainResource.Builder<MedicationAdministration, MedicationAdministration.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder instantiates(final java.util.List<java.net.URI> instantiates) {
            b.add(FhirPropertyNames.PROPERTY_INSTANTIATES, FhirObject.toUriArray(instantiates));
            return this;
        }

        public Builder partOf(final java.util.List<Reference> partOf) {
            b.add(FhirPropertyNames.PROPERTY_PART_OF, FhirObject.toArray(partOf));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder statusReason(final java.util.List<CodeableConcept> statusReason) {
            b.add(FhirPropertyNames.PROPERTY_STATUS_REASON, FhirObject.toArray(statusReason));
            return this;
        }

        public Builder category(final CodeableConcept category) {
            b.add(FhirPropertyNames.PROPERTY_CATEGORY, category);
            return this;
        }

        public Builder medicationCodeableConcept(final CodeableConcept medicationCodeableConcept) {
            b.add(FhirPropertyNames.PROPERTY_MEDICATION_CODEABLE_CONCEPT, medicationCodeableConcept);
            return this;
        }

        public Builder medicationReference(final Reference medicationReference) {
            b.add(FhirPropertyNames.PROPERTY_MEDICATION_REFERENCE, medicationReference);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder context(final Reference context) {
            b.add(FhirPropertyNames.PROPERTY_CONTEXT, context);
            return this;
        }

        public Builder supportingInformation(final java.util.List<Reference> supportingInformation) {
            b.add(FhirPropertyNames.PROPERTY_SUPPORTING_INFORMATION, FhirObject.toArray(supportingInformation));
            return this;
        }

        public Builder effectiveDateTime(final String effectiveDateTime) {
            b.add(FhirPropertyNames.PROPERTY_EFFECTIVE_DATE_TIME, effectiveDateTime);
            return this;
        }

        public Builder effectivePeriod(final Period effectivePeriod) {
            b.add(FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD, effectivePeriod);
            return this;
        }

        public Builder performer(final java.util.List<MedicationAdministrationPerformer> performer) {
            b.add(FhirPropertyNames.PROPERTY_PERFORMER, FhirObject.toArray(performer));
            return this;
        }

        public Builder reasonCode(final java.util.List<CodeableConcept> reasonCode) {
            b.add(FhirPropertyNames.PROPERTY_REASON_CODE, FhirObject.toArray(reasonCode));
            return this;
        }

        public Builder reasonReference(final java.util.List<Reference> reasonReference) {
            b.add(FhirPropertyNames.PROPERTY_REASON_REFERENCE, FhirObject.toArray(reasonReference));
            return this;
        }

        public Builder request(final Reference request) {
            b.add(FhirPropertyNames.PROPERTY_REQUEST, request);
            return this;
        }

        public Builder device(final java.util.List<Reference> device) {
            b.add(FhirPropertyNames.PROPERTY_DEVICE, FhirObject.toArray(device));
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder dosage(final MedicationAdministrationDosage dosage) {
            b.add(FhirPropertyNames.PROPERTY_DOSAGE, dosage);
            return this;
        }

        public Builder eventHistory(final java.util.List<Reference> eventHistory) {
            b.add(FhirPropertyNames.PROPERTY_EVENT_HISTORY, FhirObject.toArray(eventHistory));
            return this;
        }

        public MedicationAdministration build() {
            return new MedicationAdministration(b.build());
        }
    }

    /**
     * Describes the event of a patient consuming or otherwise being
     * administered a medication.  This may be as simple as swallowing a
     * tablet or it may be a long running infusion.  Related resources tie
     * this event to the authorizing prescription, and the specific encounter
     * between patient and health care practitioner.
     */
    public static class MedicationAdministrationDosage extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationAdministrationDosage";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationAdministrationDosage(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Free text dosage can be used for cases where the dosage administered
         * is too complex to code. When coded dosage is present, the free text
         * dosage may still be present for display to humans.The dosage
         * instructions should reflect the dosage of the medication that was
         * administered.
         */
        public String text() {
            return getString(FhirPropertyNames.PROPERTY_TEXT);
        }

        /**
         * A coded specification of the anatomic site where the medication first
         * entered the body.  For example, &quot;left arm&quot;.
         */
        public CodeableConcept site() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_SITE);
        }

        /**
         * A code specifying the route or physiological path of administration of
         * a therapeutic agent into or onto the patient.  For example, topical,
         * intravenous, etc.
         */
        public CodeableConcept route() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_ROUTE);
        }

        /**
         * A coded value indicating the method by which the medication is
         * intended to be or was introduced into or on the body.  This attribute
         * will most often NOT be populated.  It is most commonly used for
         * injections.  For example, Slow Push, Deep IV.
         */
        public CodeableConcept method() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_METHOD);
        }

        /**
         * The amount of the medication given at one administration event.   Use
         * this value when the administration is essentially an instantaneous
         * event such as a swallowing a tablet or giving an injection.
         */
        public Quantity dose() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_DOSE);
        }

        /**
         * Identifies the speed with which the medication was or will be
         * introduced into the patient.  Typically, the rate for an infusion e.g.
         * 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per
         * unit of time, e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min
         * or 200 mcg/1 minute; 1 liter/8 hours.
         */
        public Ratio rateRatio() {
            return getObject(Ratio.class, FhirPropertyNames.PROPERTY_RATE_RATIO);
        }

        /**
         * Identifies the speed with which the medication was or will be
         * introduced into the patient.  Typically, the rate for an infusion e.g.
         * 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per
         * unit of time, e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min
         * or 200 mcg/1 minute; 1 liter/8 hours.
         */
        public Quantity rateQuantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_RATE_QUANTITY);
        }

        public static final class Builder extends FhirObject.Builder<MedicationAdministrationDosage, MedicationAdministrationDosage.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder text(final String text) {
                b.add(FhirPropertyNames.PROPERTY_TEXT, text);
                return this;
            }

            public Builder site(final CodeableConcept site) {
                b.add(FhirPropertyNames.PROPERTY_SITE, site);
                return this;
            }

            public Builder route(final CodeableConcept route) {
                b.add(FhirPropertyNames.PROPERTY_ROUTE, route);
                return this;
            }

            public Builder method(final CodeableConcept method) {
                b.add(FhirPropertyNames.PROPERTY_METHOD, method);
                return this;
            }

            public Builder dose(final Quantity dose) {
                b.add(FhirPropertyNames.PROPERTY_DOSE, dose);
                return this;
            }

            public Builder rateRatio(final Ratio rateRatio) {
                b.add(FhirPropertyNames.PROPERTY_RATE_RATIO, rateRatio);
                return this;
            }

            public Builder rateQuantity(final Quantity rateQuantity) {
                b.add(FhirPropertyNames.PROPERTY_RATE_QUANTITY, rateQuantity);
                return this;
            }

            public MedicationAdministrationDosage build() {
                return new MedicationAdministrationDosage(b.build());
            }
        }
    }

    /**
     * Describes the event of a patient consuming or otherwise being
     * administered a medication.  This may be as simple as swallowing a
     * tablet or it may be a long running infusion.  Related resources tie
     * this event to the authorizing prescription, and the specific encounter
     * between patient and health care practitioner.
     */
    public static class MedicationAdministrationPerformer extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationAdministrationPerformer";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationAdministrationPerformer(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Distinguishes the type of involvement of the performer in the
         * medication administration.
         */
        public CodeableConcept function() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_FUNCTION);
        }

        /**
         * Indicates who or what performed the medication administration.
         */
        public Reference actor() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_ACTOR);
        }

        public static final class Builder extends FhirObject.Builder<MedicationAdministrationPerformer, MedicationAdministrationPerformer.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder function(final CodeableConcept function) {
                b.add(FhirPropertyNames.PROPERTY_FUNCTION, function);
                return this;
            }

            public Builder actor(final Reference actor) {
                b.add(FhirPropertyNames.PROPERTY_ACTOR, actor);
                return this;
            }

            public MedicationAdministrationPerformer build() {
                return new MedicationAdministrationPerformer(b.build());
            }
        }
    }
}
