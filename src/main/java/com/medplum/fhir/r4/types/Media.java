/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A photo, video, or audio recording acquired or used in healthcare. The
 * actual content may be inline or provided by direct reference.
 */
public class Media extends DomainResource {
    public static final String RESOURCE_TYPE = "Media";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Media(final JsonObject data) {
        super(data);
    }

    /**
     * Identifiers associated with the image - these may include identifiers
     * for the image itself, identifiers for the context of its collection
     * (e.g. series ids) and context ids such as accession numbers or other
     * workflow identifiers.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * A procedure that is fulfilled in whole or in part by the creation of
     * this media.
     */
    public java.util.List<Reference> basedOn() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_BASED_ON);
    }

    /**
     * A larger event of which this particular event is a component or step.
     */
    public java.util.List<Reference> partOf() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_PART_OF);
    }

    /**
     * The current state of the {{title}}.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * A code that classifies whether the media is an image, video or audio
     * recording or some other media category.
     */
    public CodeableConcept type() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * Details of the type of the media - usually, how it was acquired (what
     * type of device). If images sourced from a DICOM system, are wrapped in
     * a Media resource, then this is the modality.
     */
    public CodeableConcept modality() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_MODALITY);
    }

    /**
     * The name of the imaging view e.g. Lateral or Antero-posterior (AP).
     */
    public CodeableConcept view() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_VIEW);
    }

    /**
     * Who/What this Media is a record of.
     */
    public Reference subject() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * The encounter that establishes the context for this media.
     */
    public Reference encounter() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ENCOUNTER);
    }

    /**
     * The date and time(s) at which the media was collected.
     */
    public String createdDateTime() {
        return getString(FhirPropertyNames.PROPERTY_CREATED_DATE_TIME);
    }

    /**
     * The date and time(s) at which the media was collected.
     */
    public Period createdPeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_CREATED_PERIOD);
    }

    /**
     * The date and time this version of the media was made available to
     * providers, typically after having been reviewed.
     */
    public java.time.Instant issued() {
        return getInstant(FhirPropertyNames.PROPERTY_ISSUED);
    }

    /**
     * The person who administered the collection of the image.
     */
    public Reference operator() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_OPERATOR);
    }

    /**
     * Describes why the event occurred in coded or textual form.
     */
    public java.util.List<CodeableConcept> reasonCode() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_REASON_CODE);
    }

    /**
     * Indicates the site on the subject's body where the observation was
     * made (i.e. the target site).
     */
    public CodeableConcept bodySite() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_BODY_SITE);
    }

    /**
     * The name of the device / manufacturer of the device  that was used to
     * make the recording.
     */
    public String deviceName() {
        return getString(FhirPropertyNames.PROPERTY_DEVICE_NAME);
    }

    /**
     * The device used to collect the media.
     */
    public Reference device() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_DEVICE);
    }

    /**
     * Height of the image in pixels (photo/video).
     */
    public Integer height() {
        return data.getInt(FhirPropertyNames.PROPERTY_HEIGHT);
    }

    /**
     * Width of the image in pixels (photo/video).
     */
    public Integer width() {
        return data.getInt(FhirPropertyNames.PROPERTY_WIDTH);
    }

    /**
     * The number of frames in a photo. This is used with a multi-page fax,
     * or an imaging acquisition context that takes multiple slices in a
     * single image, or an animated gif. If there is more than one frame,
     * this SHALL have a value in order to alert interface software that a
     * multi-frame capable rendering widget is required.
     */
    public Integer frames() {
        return data.getInt(FhirPropertyNames.PROPERTY_FRAMES);
    }

    /**
     * The duration of the recording in seconds - for audio and video.
     */
    public Double duration() {
        return data.getJsonNumber(FhirPropertyNames.PROPERTY_DURATION).doubleValue();
    }

    /**
     * The actual content of the media - inline or by direct reference to the
     * media source file.
     */
    public Attachment content() {
        return getObject(Attachment.class, FhirPropertyNames.PROPERTY_CONTENT);
    }

    /**
     * Comments made about the media by the performer, subject or other
     * participants.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    public static final class Builder extends DomainResource.Builder<Media, Media.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder basedOn(final java.util.List<Reference> basedOn) {
            b.add(FhirPropertyNames.PROPERTY_BASED_ON, FhirObject.toArray(basedOn));
            return this;
        }

        public Builder partOf(final java.util.List<Reference> partOf) {
            b.add(FhirPropertyNames.PROPERTY_PART_OF, FhirObject.toArray(partOf));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder type(final CodeableConcept type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, type);
            return this;
        }

        public Builder modality(final CodeableConcept modality) {
            b.add(FhirPropertyNames.PROPERTY_MODALITY, modality);
            return this;
        }

        public Builder view(final CodeableConcept view) {
            b.add(FhirPropertyNames.PROPERTY_VIEW, view);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(FhirPropertyNames.PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder createdDateTime(final String createdDateTime) {
            b.add(FhirPropertyNames.PROPERTY_CREATED_DATE_TIME, createdDateTime);
            return this;
        }

        public Builder createdPeriod(final Period createdPeriod) {
            b.add(FhirPropertyNames.PROPERTY_CREATED_PERIOD, createdPeriod);
            return this;
        }

        public Builder issued(final java.time.Instant issued) {
            b.add(FhirPropertyNames.PROPERTY_ISSUED, issued.toString());
            return this;
        }

        public Builder operator(final Reference operator) {
            b.add(FhirPropertyNames.PROPERTY_OPERATOR, operator);
            return this;
        }

        public Builder reasonCode(final java.util.List<CodeableConcept> reasonCode) {
            b.add(FhirPropertyNames.PROPERTY_REASON_CODE, FhirObject.toArray(reasonCode));
            return this;
        }

        public Builder bodySite(final CodeableConcept bodySite) {
            b.add(FhirPropertyNames.PROPERTY_BODY_SITE, bodySite);
            return this;
        }

        public Builder deviceName(final String deviceName) {
            b.add(FhirPropertyNames.PROPERTY_DEVICE_NAME, deviceName);
            return this;
        }

        public Builder device(final Reference device) {
            b.add(FhirPropertyNames.PROPERTY_DEVICE, device);
            return this;
        }

        public Builder height(final Integer height) {
            b.add(FhirPropertyNames.PROPERTY_HEIGHT, height);
            return this;
        }

        public Builder width(final Integer width) {
            b.add(FhirPropertyNames.PROPERTY_WIDTH, width);
            return this;
        }

        public Builder frames(final Integer frames) {
            b.add(FhirPropertyNames.PROPERTY_FRAMES, frames);
            return this;
        }

        public Builder duration(final Double duration) {
            b.add(FhirPropertyNames.PROPERTY_DURATION, duration);
            return this;
        }

        public Builder content(final Attachment content) {
            b.add(FhirPropertyNames.PROPERTY_CONTENT, content);
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Media build() {
            return new Media(b.build());
        }
    }
}
