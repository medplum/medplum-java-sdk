/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * The technical details of an endpoint that can be used for electronic
 * services, such as for web services providing XDS.b or a REST endpoint
 * for another FHIR server. This may include any security context
 * information.
 */
public class Endpoint extends DomainResource {
    public static final String RESOURCE_TYPE = "Endpoint";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Endpoint(final JsonObject data) {
        super(data);
    }

    /**
     * Identifier for the organization that is used to identify the endpoint
     * across multiple disparate systems.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * active | suspended | error | off | test.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * A coded value that represents the technical details of the usage of
     * this endpoint, such as what WSDLs should be used in what way. (e.g.
     * XDS.b/DICOM/cds-hook).
     */
    public Coding connectionType() {
        return getObject(Coding.class, FhirPropertyNames.PROPERTY_CONNECTION_TYPE);
    }

    /**
     * A friendly name that this endpoint can be referred to with.
     */
    public String name() {
        return getString(FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * The organization that manages this endpoint (even if technically
     * another organization is hosting this in the cloud, it is the
     * organization associated with the data).
     */
    public Reference managingOrganization() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_MANAGING_ORGANIZATION);
    }

    /**
     * Contact details for a human to contact about the subscription. The
     * primary use of this for system administrator troubleshooting.
     */
    public java.util.List<ContactPoint> contact() {
        return getList(ContactPoint.class, FhirPropertyNames.PROPERTY_CONTACT);
    }

    /**
     * The interval during which the endpoint is expected to be operational.
     */
    public Period period() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_PERIOD);
    }

    /**
     * The payload type describes the acceptable content that can be
     * communicated on the endpoint.
     */
    public java.util.List<CodeableConcept> payloadType() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_PAYLOAD_TYPE);
    }

    /**
     * The mime type to send the payload in - e.g. application/fhir+xml,
     * application/fhir+json. If the mime type is not specified, then the
     * sender could send any content (including no content depending on the
     * connectionType).
     */
    public java.util.List<String> payloadMimeType() {
        return getList(String.class, FhirPropertyNames.PROPERTY_PAYLOAD_MIME_TYPE);
    }

    /**
     * The uri that describes the actual end-point to connect to.
     */
    public java.net.URI address() {
        return getUri(FhirPropertyNames.PROPERTY_ADDRESS);
    }

    /**
     * Additional headers / information to send as part of the notification.
     */
    public java.util.List<String> header() {
        return getList(String.class, FhirPropertyNames.PROPERTY_HEADER);
    }

    public static final class Builder extends DomainResource.Builder<Endpoint, Endpoint.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder connectionType(final Coding connectionType) {
            b.add(FhirPropertyNames.PROPERTY_CONNECTION_TYPE, connectionType);
            return this;
        }

        public Builder name(final String name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, name);
            return this;
        }

        public Builder managingOrganization(final Reference managingOrganization) {
            b.add(FhirPropertyNames.PROPERTY_MANAGING_ORGANIZATION, managingOrganization);
            return this;
        }

        public Builder contact(final java.util.List<ContactPoint> contact) {
            b.add(FhirPropertyNames.PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder period(final Period period) {
            b.add(FhirPropertyNames.PROPERTY_PERIOD, period);
            return this;
        }

        public Builder payloadType(final java.util.List<CodeableConcept> payloadType) {
            b.add(FhirPropertyNames.PROPERTY_PAYLOAD_TYPE, FhirObject.toArray(payloadType));
            return this;
        }

        public Builder payloadMimeType(final java.util.List<String> payloadMimeType) {
            b.add(FhirPropertyNames.PROPERTY_PAYLOAD_MIME_TYPE, FhirObject.toStringArray(payloadMimeType));
            return this;
        }

        public Builder address(final java.net.URI address) {
            b.add(FhirPropertyNames.PROPERTY_ADDRESS, address.toString());
            return this;
        }

        public Builder header(final java.util.List<String> header) {
            b.add(FhirPropertyNames.PROPERTY_HEADER, FhirObject.toStringArray(header));
            return this;
        }

        public Endpoint build() {
            return new Endpoint(b.build());
        }
    }
}
