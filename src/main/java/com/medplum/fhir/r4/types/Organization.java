/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A formally or informally recognized grouping of people or
 * organizations formed for the purpose of achieving some form of
 * collective action.  Includes companies, institutions, corporations,
 * departments, community groups, healthcare practice groups,
 * payer/insurer, etc.
 */
public class Organization extends DomainResource {
    public static final String RESOURCE_TYPE = "Organization";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Organization(final JsonObject data) {
        super(data);
    }

    /**
     * Identifier for the organization that is used to identify the
     * organization across multiple disparate systems.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * Whether the organization's record is still in active use.
     */
    public Boolean active() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_ACTIVE);
    }

    /**
     * The kind(s) of organization that this is.
     */
    public java.util.List<CodeableConcept> type() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * A name associated with the organization.
     */
    public String name() {
        return getString(FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * A list of alternate names that the organization is known as, or was
     * known as in the past.
     */
    public java.util.List<String> alias() {
        return getList(String.class, FhirPropertyNames.PROPERTY_ALIAS);
    }

    /**
     * A contact detail for the organization.
     */
    public java.util.List<ContactPoint> telecom() {
        return getList(ContactPoint.class, FhirPropertyNames.PROPERTY_TELECOM);
    }

    /**
     * An address for the organization.
     */
    public java.util.List<Address> address() {
        return getList(Address.class, FhirPropertyNames.PROPERTY_ADDRESS);
    }

    /**
     * The organization of which this organization forms a part.
     */
    public Reference partOf() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PART_OF);
    }

    /**
     * Contact for the organization for a certain purpose.
     */
    public java.util.List<OrganizationContact> contact() {
        return getList(OrganizationContact.class, FhirPropertyNames.PROPERTY_CONTACT);
    }

    /**
     * Technical endpoints providing access to services operated for the
     * organization.
     */
    public java.util.List<Reference> endpoint() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_ENDPOINT);
    }

    public static final class Builder extends DomainResource.Builder<Organization, Organization.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder active(final Boolean active) {
            b.add(FhirPropertyNames.PROPERTY_ACTIVE, active);
            return this;
        }

        public Builder type(final java.util.List<CodeableConcept> type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, FhirObject.toArray(type));
            return this;
        }

        public Builder name(final String name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, name);
            return this;
        }

        public Builder alias(final java.util.List<String> alias) {
            b.add(FhirPropertyNames.PROPERTY_ALIAS, FhirObject.toStringArray(alias));
            return this;
        }

        public Builder telecom(final java.util.List<ContactPoint> telecom) {
            b.add(FhirPropertyNames.PROPERTY_TELECOM, FhirObject.toArray(telecom));
            return this;
        }

        public Builder address(final java.util.List<Address> address) {
            b.add(FhirPropertyNames.PROPERTY_ADDRESS, FhirObject.toArray(address));
            return this;
        }

        public Builder partOf(final Reference partOf) {
            b.add(FhirPropertyNames.PROPERTY_PART_OF, partOf);
            return this;
        }

        public Builder contact(final java.util.List<OrganizationContact> contact) {
            b.add(FhirPropertyNames.PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder endpoint(final java.util.List<Reference> endpoint) {
            b.add(FhirPropertyNames.PROPERTY_ENDPOINT, FhirObject.toArray(endpoint));
            return this;
        }

        public Organization build() {
            return new Organization(b.build());
        }
    }

    /**
     * A formally or informally recognized grouping of people or
     * organizations formed for the purpose of achieving some form of
     * collective action.  Includes companies, institutions, corporations,
     * departments, community groups, healthcare practice groups,
     * payer/insurer, etc.
     */
    public static class OrganizationContact extends FhirObject {
        public static final String RESOURCE_TYPE = "OrganizationContact";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public OrganizationContact(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Indicates a purpose for which the contact can be reached.
         */
        public CodeableConcept purpose() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_PURPOSE);
        }

        /**
         * A name associated with the contact.
         */
        public HumanName name() {
            return getObject(HumanName.class, FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * A contact detail (e.g. a telephone number or an email address) by
         * which the party may be contacted.
         */
        public java.util.List<ContactPoint> telecom() {
            return getList(ContactPoint.class, FhirPropertyNames.PROPERTY_TELECOM);
        }

        /**
         * Visiting or postal addresses for the contact.
         */
        public Address address() {
            return getObject(Address.class, FhirPropertyNames.PROPERTY_ADDRESS);
        }

        public static final class Builder extends FhirObject.Builder<OrganizationContact, OrganizationContact.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder purpose(final CodeableConcept purpose) {
                b.add(FhirPropertyNames.PROPERTY_PURPOSE, purpose);
                return this;
            }

            public Builder name(final HumanName name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder telecom(final java.util.List<ContactPoint> telecom) {
                b.add(FhirPropertyNames.PROPERTY_TELECOM, FhirObject.toArray(telecom));
                return this;
            }

            public Builder address(final Address address) {
                b.add(FhirPropertyNames.PROPERTY_ADDRESS, address);
                return this;
            }

            public OrganizationContact build() {
                return new OrganizationContact(b.build());
            }
        }
    }
}
