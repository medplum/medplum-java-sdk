/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A record of a clinical assessment performed to determine what
 * problem(s) may affect the patient and before planning the treatments
 * or management strategies that are best to manage a patient's
 * condition. Assessments are often 1:1 with a clinical consultation /
 * encounter,  but this varies greatly depending on the clinical
 * workflow. This resource is called &quot;ClinicalImpression&quot; rather than
 * &quot;ClinicalAssessment&quot; to avoid confusion with the recording of
 * assessment tools such as Apgar score.
 */
public class ClinicalImpression extends DomainResource {
    public static final String RESOURCE_TYPE = "ClinicalImpression";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ClinicalImpression(final JsonObject data) {
        super(data);
    }

    /**
     * Business identifiers assigned to this clinical impression by the
     * performer or other systems which remain constant as the resource is
     * updated and propagates from server to server.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * Identifies the workflow status of the assessment.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * Captures the reason for the current state of the ClinicalImpression.
     */
    public CodeableConcept statusReason() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_STATUS_REASON);
    }

    /**
     * Categorizes the type of clinical assessment performed.
     */
    public CodeableConcept code() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
    }

    /**
     * A summary of the context and/or cause of the assessment - why / where
     * it was performed, and what patient events/status prompted it.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * The patient or group of individuals assessed as part of this record.
     */
    public Reference subject() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * The Encounter during which this ClinicalImpression was created or to
     * which the creation of this record is tightly associated.
     */
    public Reference encounter() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ENCOUNTER);
    }

    /**
     * The point in time or period over which the subject was assessed.
     */
    public String effectiveDateTime() {
        return getString(FhirPropertyNames.PROPERTY_EFFECTIVE_DATE_TIME);
    }

    /**
     * The point in time or period over which the subject was assessed.
     */
    public Period effectivePeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD);
    }

    /**
     * Indicates when the documentation of the assessment was complete.
     */
    public java.time.Instant date() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE);
    }

    /**
     * The clinician performing the assessment.
     */
    public Reference assessor() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ASSESSOR);
    }

    /**
     * A reference to the last assessment that was conducted on this patient.
     * Assessments are often/usually ongoing in nature; a care provider
     * (practitioner or team) will make new assessments on an ongoing basis
     * as new data arises or the patient's conditions changes.
     */
    public Reference previous() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PREVIOUS);
    }

    /**
     * A list of the relevant problems/conditions for a patient.
     */
    public java.util.List<Reference> problem() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_PROBLEM);
    }

    /**
     * One or more sets of investigations (signs, symptoms, etc.). The actual
     * grouping of investigations varies greatly depending on the type and
     * context of the assessment. These investigations may include data
     * generated during the assessment process, or data previously generated
     * and recorded that is pertinent to the outcomes.
     */
    public java.util.List<ClinicalImpressionInvestigation> investigation() {
        return getList(ClinicalImpressionInvestigation.class, FhirPropertyNames.PROPERTY_INVESTIGATION);
    }

    /**
     * Reference to a specific published clinical protocol that was followed
     * during this assessment, and/or that provides evidence in support of
     * the diagnosis.
     */
    public java.util.List<java.net.URI> protocol() {
        return getList(java.net.URI.class, FhirPropertyNames.PROPERTY_PROTOCOL);
    }

    /**
     * A text summary of the investigations and the diagnosis.
     */
    public String summary() {
        return getString(FhirPropertyNames.PROPERTY_SUMMARY);
    }

    /**
     * Specific findings or diagnoses that were considered likely or relevant
     * to ongoing treatment.
     */
    public java.util.List<ClinicalImpressionFinding> finding() {
        return getList(ClinicalImpressionFinding.class, FhirPropertyNames.PROPERTY_FINDING);
    }

    /**
     * Estimate of likely outcome.
     */
    public java.util.List<CodeableConcept> prognosisCodeableConcept() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_PROGNOSIS_CODEABLE_CONCEPT);
    }

    /**
     * RiskAssessment expressing likely outcome.
     */
    public java.util.List<Reference> prognosisReference() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_PROGNOSIS_REFERENCE);
    }

    /**
     * Information supporting the clinical impression.
     */
    public java.util.List<Reference> supportingInfo() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_SUPPORTING_INFO);
    }

    /**
     * Commentary about the impression, typically recorded after the
     * impression itself was made, though supplemental notes by the original
     * author could also appear.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    public static final class Builder extends DomainResource.Builder<ClinicalImpression, ClinicalImpression.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder statusReason(final CodeableConcept statusReason) {
            b.add(FhirPropertyNames.PROPERTY_STATUS_REASON, statusReason);
            return this;
        }

        public Builder code(final CodeableConcept code) {
            b.add(FhirPropertyNames.PROPERTY_CODE, code);
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(FhirPropertyNames.PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder effectiveDateTime(final String effectiveDateTime) {
            b.add(FhirPropertyNames.PROPERTY_EFFECTIVE_DATE_TIME, effectiveDateTime);
            return this;
        }

        public Builder effectivePeriod(final Period effectivePeriod) {
            b.add(FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD, effectivePeriod);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder assessor(final Reference assessor) {
            b.add(FhirPropertyNames.PROPERTY_ASSESSOR, assessor);
            return this;
        }

        public Builder previous(final Reference previous) {
            b.add(FhirPropertyNames.PROPERTY_PREVIOUS, previous);
            return this;
        }

        public Builder problem(final java.util.List<Reference> problem) {
            b.add(FhirPropertyNames.PROPERTY_PROBLEM, FhirObject.toArray(problem));
            return this;
        }

        public Builder investigation(final java.util.List<ClinicalImpressionInvestigation> investigation) {
            b.add(FhirPropertyNames.PROPERTY_INVESTIGATION, FhirObject.toArray(investigation));
            return this;
        }

        public Builder protocol(final java.util.List<java.net.URI> protocol) {
            b.add(FhirPropertyNames.PROPERTY_PROTOCOL, FhirObject.toUriArray(protocol));
            return this;
        }

        public Builder summary(final String summary) {
            b.add(FhirPropertyNames.PROPERTY_SUMMARY, summary);
            return this;
        }

        public Builder finding(final java.util.List<ClinicalImpressionFinding> finding) {
            b.add(FhirPropertyNames.PROPERTY_FINDING, FhirObject.toArray(finding));
            return this;
        }

        public Builder prognosisCodeableConcept(final java.util.List<CodeableConcept> prognosisCodeableConcept) {
            b.add(FhirPropertyNames.PROPERTY_PROGNOSIS_CODEABLE_CONCEPT, FhirObject.toArray(prognosisCodeableConcept));
            return this;
        }

        public Builder prognosisReference(final java.util.List<Reference> prognosisReference) {
            b.add(FhirPropertyNames.PROPERTY_PROGNOSIS_REFERENCE, FhirObject.toArray(prognosisReference));
            return this;
        }

        public Builder supportingInfo(final java.util.List<Reference> supportingInfo) {
            b.add(FhirPropertyNames.PROPERTY_SUPPORTING_INFO, FhirObject.toArray(supportingInfo));
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public ClinicalImpression build() {
            return new ClinicalImpression(b.build());
        }
    }

    /**
     * A record of a clinical assessment performed to determine what
     * problem(s) may affect the patient and before planning the treatments
     * or management strategies that are best to manage a patient's
     * condition. Assessments are often 1:1 with a clinical consultation /
     * encounter,  but this varies greatly depending on the clinical
     * workflow. This resource is called &quot;ClinicalImpression&quot; rather than
     * &quot;ClinicalAssessment&quot; to avoid confusion with the recording of
     * assessment tools such as Apgar score.
     */
    public static class ClinicalImpressionFinding extends FhirObject {
        public static final String RESOURCE_TYPE = "ClinicalImpressionFinding";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClinicalImpressionFinding(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Specific text or code for finding or diagnosis, which may include
         * ruled-out or resolved conditions.
         */
        public CodeableConcept itemCodeableConcept() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_ITEM_CODEABLE_CONCEPT);
        }

        /**
         * Specific reference for finding or diagnosis, which may include
         * ruled-out or resolved conditions.
         */
        public Reference itemReference() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_ITEM_REFERENCE);
        }

        /**
         * Which investigations support finding or diagnosis.
         */
        public String basis() {
            return getString(FhirPropertyNames.PROPERTY_BASIS);
        }

        public static final class Builder extends FhirObject.Builder<ClinicalImpressionFinding, ClinicalImpressionFinding.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder itemCodeableConcept(final CodeableConcept itemCodeableConcept) {
                b.add(FhirPropertyNames.PROPERTY_ITEM_CODEABLE_CONCEPT, itemCodeableConcept);
                return this;
            }

            public Builder itemReference(final Reference itemReference) {
                b.add(FhirPropertyNames.PROPERTY_ITEM_REFERENCE, itemReference);
                return this;
            }

            public Builder basis(final String basis) {
                b.add(FhirPropertyNames.PROPERTY_BASIS, basis);
                return this;
            }

            public ClinicalImpressionFinding build() {
                return new ClinicalImpressionFinding(b.build());
            }
        }
    }

    /**
     * A record of a clinical assessment performed to determine what
     * problem(s) may affect the patient and before planning the treatments
     * or management strategies that are best to manage a patient's
     * condition. Assessments are often 1:1 with a clinical consultation /
     * encounter,  but this varies greatly depending on the clinical
     * workflow. This resource is called &quot;ClinicalImpression&quot; rather than
     * &quot;ClinicalAssessment&quot; to avoid confusion with the recording of
     * assessment tools such as Apgar score.
     */
    public static class ClinicalImpressionInvestigation extends FhirObject {
        public static final String RESOURCE_TYPE = "ClinicalImpressionInvestigation";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClinicalImpressionInvestigation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A name/code for the group (&quot;set&quot;) of investigations. Typically, this
         * will be something like &quot;signs&quot;, &quot;symptoms&quot;, &quot;clinical&quot;, &quot;diagnostic&quot;,
         * but the list is not constrained, and others such groups such as
         * (exposure|family|travel|nutritional) history may be used.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * A record of a specific investigation that was undertaken.
         */
        public java.util.List<Reference> item() {
            return getList(Reference.class, FhirPropertyNames.PROPERTY_ITEM);
        }

        public static final class Builder extends FhirObject.Builder<ClinicalImpressionInvestigation, ClinicalImpressionInvestigation.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder item(final java.util.List<Reference> item) {
                b.add(FhirPropertyNames.PROPERTY_ITEM, FhirObject.toArray(item));
                return this;
            }

            public ClinicalImpressionInvestigation build() {
                return new ClinicalImpressionInvestigation(b.build());
            }
        }
    }
}
