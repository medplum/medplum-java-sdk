/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A medicinal product in a container or package.
 */
public class MedicinalProductPackaged extends DomainResource {
    public static final String RESOURCE_TYPE = "MedicinalProductPackaged";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public MedicinalProductPackaged(final JsonObject data) {
        super(data);
    }

    /**
     * Unique identifier.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The product with this is a pack for.
     */
    public java.util.List<Reference> subject() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * Textual description.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * The legal status of supply of the medicinal product as classified by
     * the regulator.
     */
    public CodeableConcept legalStatusOfSupply() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_LEGAL_STATUS_OF_SUPPLY);
    }

    /**
     * Marketing information.
     */
    public java.util.List<MarketingStatus> marketingStatus() {
        return getList(MarketingStatus.class, FhirPropertyNames.PROPERTY_MARKETING_STATUS);
    }

    /**
     * Manufacturer of this Package Item.
     */
    public Reference marketingAuthorization() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_MARKETING_AUTHORIZATION);
    }

    /**
     * Manufacturer of this Package Item.
     */
    public java.util.List<Reference> manufacturer() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_MANUFACTURER);
    }

    /**
     * Batch numbering.
     */
    public java.util.List<MedicinalProductPackagedBatchIdentifier> batchIdentifier() {
        return getList(MedicinalProductPackagedBatchIdentifier.class, FhirPropertyNames.PROPERTY_BATCH_IDENTIFIER);
    }

    /**
     * A packaging item, as a contained for medicine, possibly with other
     * packaging items within.
     */
    public java.util.List<MedicinalProductPackagedPackageItem> packageItem() {
        return getList(MedicinalProductPackagedPackageItem.class, FhirPropertyNames.PROPERTY_PACKAGE_ITEM);
    }

    public static final class Builder extends DomainResource.Builder<MedicinalProductPackaged, MedicinalProductPackaged.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder subject(final java.util.List<Reference> subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, FhirObject.toArray(subject));
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder legalStatusOfSupply(final CodeableConcept legalStatusOfSupply) {
            b.add(FhirPropertyNames.PROPERTY_LEGAL_STATUS_OF_SUPPLY, legalStatusOfSupply);
            return this;
        }

        public Builder marketingStatus(final java.util.List<MarketingStatus> marketingStatus) {
            b.add(FhirPropertyNames.PROPERTY_MARKETING_STATUS, FhirObject.toArray(marketingStatus));
            return this;
        }

        public Builder marketingAuthorization(final Reference marketingAuthorization) {
            b.add(FhirPropertyNames.PROPERTY_MARKETING_AUTHORIZATION, marketingAuthorization);
            return this;
        }

        public Builder manufacturer(final java.util.List<Reference> manufacturer) {
            b.add(FhirPropertyNames.PROPERTY_MANUFACTURER, FhirObject.toArray(manufacturer));
            return this;
        }

        public Builder batchIdentifier(final java.util.List<MedicinalProductPackagedBatchIdentifier> batchIdentifier) {
            b.add(FhirPropertyNames.PROPERTY_BATCH_IDENTIFIER, FhirObject.toArray(batchIdentifier));
            return this;
        }

        public Builder packageItem(final java.util.List<MedicinalProductPackagedPackageItem> packageItem) {
            b.add(FhirPropertyNames.PROPERTY_PACKAGE_ITEM, FhirObject.toArray(packageItem));
            return this;
        }

        public MedicinalProductPackaged build() {
            return new MedicinalProductPackaged(b.build());
        }
    }

    /**
     * A medicinal product in a container or package.
     */
    public static class MedicinalProductPackagedBatchIdentifier extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicinalProductPackagedBatchIdentifier";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicinalProductPackagedBatchIdentifier(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A number appearing on the outer packaging of a specific batch.
         */
        public Identifier outerPackaging() {
            return getObject(Identifier.class, FhirPropertyNames.PROPERTY_OUTER_PACKAGING);
        }

        /**
         * A number appearing on the immediate packaging (and not the outer
         * packaging).
         */
        public Identifier immediatePackaging() {
            return getObject(Identifier.class, FhirPropertyNames.PROPERTY_IMMEDIATE_PACKAGING);
        }

        public static final class Builder extends FhirObject.Builder<MedicinalProductPackagedBatchIdentifier,
                MedicinalProductPackagedBatchIdentifier.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder outerPackaging(final Identifier outerPackaging) {
                b.add(FhirPropertyNames.PROPERTY_OUTER_PACKAGING, outerPackaging);
                return this;
            }

            public Builder immediatePackaging(final Identifier immediatePackaging) {
                b.add(FhirPropertyNames.PROPERTY_IMMEDIATE_PACKAGING, immediatePackaging);
                return this;
            }

            public MedicinalProductPackagedBatchIdentifier build() {
                return new MedicinalProductPackagedBatchIdentifier(b.build());
            }
        }
    }

    /**
     * A medicinal product in a container or package.
     */
    public static class MedicinalProductPackagedPackageItem extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicinalProductPackagedPackageItem";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicinalProductPackagedPackageItem(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Including possibly Data Carrier Identifier.
         */
        public java.util.List<Identifier> identifier() {
            return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
        }

        /**
         * The physical type of the container of the medicine.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The quantity of this package in the medicinal product, at the current
         * level of packaging. The outermost is always 1.
         */
        public Quantity quantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_QUANTITY);
        }

        /**
         * Material type of the package item.
         */
        public java.util.List<CodeableConcept> material() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_MATERIAL);
        }

        /**
         * A possible alternate material for the packaging.
         */
        public java.util.List<CodeableConcept> alternateMaterial() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_ALTERNATE_MATERIAL);
        }

        /**
         * A device accompanying a medicinal product.
         */
        public java.util.List<Reference> device() {
            return getList(Reference.class, FhirPropertyNames.PROPERTY_DEVICE);
        }

        /**
         * The manufactured item as contained in the packaged medicinal product.
         */
        public java.util.List<Reference> manufacturedItem() {
            return getList(Reference.class, FhirPropertyNames.PROPERTY_MANUFACTURED_ITEM);
        }

        /**
         * Allows containers within containers.
         */
        public java.util.List<MedicinalProductPackagedPackageItem> packageItem() {
            return getList(MedicinalProductPackagedPackageItem.class, FhirPropertyNames.PROPERTY_PACKAGE_ITEM);
        }

        /**
         * Dimensions, color etc.
         */
        public ProdCharacteristic physicalCharacteristics() {
            return getObject(ProdCharacteristic.class, FhirPropertyNames.PROPERTY_PHYSICAL_CHARACTERISTICS);
        }

        /**
         * Other codeable characteristics.
         */
        public java.util.List<CodeableConcept> otherCharacteristics() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_OTHER_CHARACTERISTICS);
        }

        /**
         * Shelf Life and storage information.
         */
        public java.util.List<ProductShelfLife> shelfLifeStorage() {
            return getList(ProductShelfLife.class, FhirPropertyNames.PROPERTY_SHELF_LIFE_STORAGE);
        }

        /**
         * Manufacturer of this Package Item.
         */
        public java.util.List<Reference> manufacturer() {
            return getList(Reference.class, FhirPropertyNames.PROPERTY_MANUFACTURER);
        }

        public static final class Builder extends FhirObject.Builder<MedicinalProductPackagedPackageItem, MedicinalProductPackagedPackageItem.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder identifier(final java.util.List<Identifier> identifier) {
                b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder quantity(final Quantity quantity) {
                b.add(FhirPropertyNames.PROPERTY_QUANTITY, quantity);
                return this;
            }

            public Builder material(final java.util.List<CodeableConcept> material) {
                b.add(FhirPropertyNames.PROPERTY_MATERIAL, FhirObject.toArray(material));
                return this;
            }

            public Builder alternateMaterial(final java.util.List<CodeableConcept> alternateMaterial) {
                b.add(FhirPropertyNames.PROPERTY_ALTERNATE_MATERIAL, FhirObject.toArray(alternateMaterial));
                return this;
            }

            public Builder device(final java.util.List<Reference> device) {
                b.add(FhirPropertyNames.PROPERTY_DEVICE, FhirObject.toArray(device));
                return this;
            }

            public Builder manufacturedItem(final java.util.List<Reference> manufacturedItem) {
                b.add(FhirPropertyNames.PROPERTY_MANUFACTURED_ITEM, FhirObject.toArray(manufacturedItem));
                return this;
            }

            public Builder packageItem(final java.util.List<MedicinalProductPackagedPackageItem> packageItem) {
                b.add(FhirPropertyNames.PROPERTY_PACKAGE_ITEM, FhirObject.toArray(packageItem));
                return this;
            }

            public Builder physicalCharacteristics(final ProdCharacteristic physicalCharacteristics) {
                b.add(FhirPropertyNames.PROPERTY_PHYSICAL_CHARACTERISTICS, physicalCharacteristics);
                return this;
            }

            public Builder otherCharacteristics(final java.util.List<CodeableConcept> otherCharacteristics) {
                b.add(FhirPropertyNames.PROPERTY_OTHER_CHARACTERISTICS, FhirObject.toArray(otherCharacteristics));
                return this;
            }

            public Builder shelfLifeStorage(final java.util.List<ProductShelfLife> shelfLifeStorage) {
                b.add(FhirPropertyNames.PROPERTY_SHELF_LIFE_STORAGE, FhirObject.toArray(shelfLifeStorage));
                return this;
            }

            public Builder manufacturer(final java.util.List<Reference> manufacturer) {
                b.add(FhirPropertyNames.PROPERTY_MANUFACTURER, FhirObject.toArray(manufacturer));
                return this;
            }

            public MedicinalProductPackagedPackageItem build() {
                return new MedicinalProductPackagedPackageItem(b.build());
            }
        }
    }
}
