/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Describes validation requirements, source(s), status and dates for one
 * or more elements.
 */
public class VerificationResult extends DomainResource {
    public static final String RESOURCE_TYPE = "VerificationResult";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public VerificationResult(final JsonObject data) {
        super(data);
    }

    /**
     * A resource that was validated.
     */
    public java.util.List<Reference> target() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_TARGET);
    }

    /**
     * The fhirpath location(s) within the resource that was validated.
     */
    public java.util.List<String> targetLocation() {
        return getList(String.class, FhirPropertyNames.PROPERTY_TARGET_LOCATION);
    }

    /**
     * The frequency with which the target must be validated (none; initial;
     * periodic).
     */
    public CodeableConcept need() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_NEED);
    }

    /**
     * The validation status of the target (attested; validated; in process;
     * requires revalidation; validation failed; revalidation failed).
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * When the validation status was updated.
     */
    public java.time.Instant statusDate() {
        return getInstant(FhirPropertyNames.PROPERTY_STATUS_DATE);
    }

    /**
     * What the target is validated against (nothing; primary source;
     * multiple sources).
     */
    public CodeableConcept validationType() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_VALIDATION_TYPE);
    }

    /**
     * The primary process by which the target is validated (edit check;
     * value set; primary source; multiple sources; standalone; in context).
     */
    public java.util.List<CodeableConcept> validationProcess() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_VALIDATION_PROCESS);
    }

    /**
     * Frequency of revalidation.
     */
    public Timing frequency() {
        return getObject(Timing.class, FhirPropertyNames.PROPERTY_FREQUENCY);
    }

    /**
     * The date/time validation was last completed (including failed
     * validations).
     */
    public java.time.Instant lastPerformed() {
        return getInstant(FhirPropertyNames.PROPERTY_LAST_PERFORMED);
    }

    /**
     * The date when target is next validated, if appropriate.
     */
    public java.time.LocalDate nextScheduled() {
        return getLocalDate(FhirPropertyNames.PROPERTY_NEXT_SCHEDULED);
    }

    /**
     * The result if validation fails (fatal; warning; record only; none).
     */
    public CodeableConcept failureAction() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_FAILURE_ACTION);
    }

    /**
     * Information about the primary source(s) involved in validation.
     */
    public java.util.List<VerificationResultPrimarySource> primarySource() {
        return getList(VerificationResultPrimarySource.class, FhirPropertyNames.PROPERTY_PRIMARY_SOURCE);
    }

    /**
     * Information about the entity attesting to information.
     */
    public VerificationResultAttestation attestation() {
        return getObject(VerificationResultAttestation.class, FhirPropertyNames.PROPERTY_ATTESTATION);
    }

    /**
     * Information about the entity validating information.
     */
    public java.util.List<VerificationResultValidator> validator() {
        return getList(VerificationResultValidator.class, FhirPropertyNames.PROPERTY_VALIDATOR);
    }

    public static final class Builder extends DomainResource.Builder<VerificationResult, VerificationResult.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder target(final java.util.List<Reference> target) {
            b.add(FhirPropertyNames.PROPERTY_TARGET, FhirObject.toArray(target));
            return this;
        }

        public Builder targetLocation(final java.util.List<String> targetLocation) {
            b.add(FhirPropertyNames.PROPERTY_TARGET_LOCATION, FhirObject.toStringArray(targetLocation));
            return this;
        }

        public Builder need(final CodeableConcept need) {
            b.add(FhirPropertyNames.PROPERTY_NEED, need);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder statusDate(final java.time.Instant statusDate) {
            b.add(FhirPropertyNames.PROPERTY_STATUS_DATE, statusDate.toString());
            return this;
        }

        public Builder validationType(final CodeableConcept validationType) {
            b.add(FhirPropertyNames.PROPERTY_VALIDATION_TYPE, validationType);
            return this;
        }

        public Builder validationProcess(final java.util.List<CodeableConcept> validationProcess) {
            b.add(FhirPropertyNames.PROPERTY_VALIDATION_PROCESS, FhirObject.toArray(validationProcess));
            return this;
        }

        public Builder frequency(final Timing frequency) {
            b.add(FhirPropertyNames.PROPERTY_FREQUENCY, frequency);
            return this;
        }

        public Builder lastPerformed(final java.time.Instant lastPerformed) {
            b.add(FhirPropertyNames.PROPERTY_LAST_PERFORMED, lastPerformed.toString());
            return this;
        }

        public Builder nextScheduled(final java.time.LocalDate nextScheduled) {
            b.add(FhirPropertyNames.PROPERTY_NEXT_SCHEDULED, nextScheduled.toString());
            return this;
        }

        public Builder failureAction(final CodeableConcept failureAction) {
            b.add(FhirPropertyNames.PROPERTY_FAILURE_ACTION, failureAction);
            return this;
        }

        public Builder primarySource(final java.util.List<VerificationResultPrimarySource> primarySource) {
            b.add(FhirPropertyNames.PROPERTY_PRIMARY_SOURCE, FhirObject.toArray(primarySource));
            return this;
        }

        public Builder attestation(final VerificationResultAttestation attestation) {
            b.add(FhirPropertyNames.PROPERTY_ATTESTATION, attestation);
            return this;
        }

        public Builder validator(final java.util.List<VerificationResultValidator> validator) {
            b.add(FhirPropertyNames.PROPERTY_VALIDATOR, FhirObject.toArray(validator));
            return this;
        }

        public VerificationResult build() {
            return new VerificationResult(b.build());
        }
    }

    /**
     * Describes validation requirements, source(s), status and dates for one
     * or more elements.
     */
    public static class VerificationResultAttestation extends FhirObject {
        public static final String RESOURCE_TYPE = "VerificationResultAttestation";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public VerificationResultAttestation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The individual or organization attesting to information.
         */
        public Reference who() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_WHO);
        }

        /**
         * When the who is asserting on behalf of another (organization or
         * individual).
         */
        public Reference onBehalfOf() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_ON_BEHALF_OF);
        }

        /**
         * The method by which attested information was submitted/retrieved
         * (manual; API; Push).
         */
        public CodeableConcept communicationMethod() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_COMMUNICATION_METHOD);
        }

        /**
         * The date the information was attested to.
         */
        public java.time.LocalDate date() {
            return getLocalDate(FhirPropertyNames.PROPERTY_DATE);
        }

        /**
         * A digital identity certificate associated with the attestation source.
         */
        public String sourceIdentityCertificate() {
            return getString(FhirPropertyNames.PROPERTY_SOURCE_IDENTITY_CERTIFICATE);
        }

        /**
         * A digital identity certificate associated with the proxy entity
         * submitting attested information on behalf of the attestation source.
         */
        public String proxyIdentityCertificate() {
            return getString(FhirPropertyNames.PROPERTY_PROXY_IDENTITY_CERTIFICATE);
        }

        /**
         * Signed assertion by the proxy entity indicating that they have the
         * right to submit attested information on behalf of the attestation
         * source.
         */
        public Signature proxySignature() {
            return getObject(Signature.class, FhirPropertyNames.PROPERTY_PROXY_SIGNATURE);
        }

        /**
         * Signed assertion by the attestation source that they have attested to
         * the information.
         */
        public Signature sourceSignature() {
            return getObject(Signature.class, FhirPropertyNames.PROPERTY_SOURCE_SIGNATURE);
        }

        public static final class Builder extends FhirObject.Builder<VerificationResultAttestation, VerificationResultAttestation.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder who(final Reference who) {
                b.add(FhirPropertyNames.PROPERTY_WHO, who);
                return this;
            }

            public Builder onBehalfOf(final Reference onBehalfOf) {
                b.add(FhirPropertyNames.PROPERTY_ON_BEHALF_OF, onBehalfOf);
                return this;
            }

            public Builder communicationMethod(final CodeableConcept communicationMethod) {
                b.add(FhirPropertyNames.PROPERTY_COMMUNICATION_METHOD, communicationMethod);
                return this;
            }

            public Builder date(final java.time.LocalDate date) {
                b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
                return this;
            }

            public Builder sourceIdentityCertificate(final String sourceIdentityCertificate) {
                b.add(FhirPropertyNames.PROPERTY_SOURCE_IDENTITY_CERTIFICATE, sourceIdentityCertificate);
                return this;
            }

            public Builder proxyIdentityCertificate(final String proxyIdentityCertificate) {
                b.add(FhirPropertyNames.PROPERTY_PROXY_IDENTITY_CERTIFICATE, proxyIdentityCertificate);
                return this;
            }

            public Builder proxySignature(final Signature proxySignature) {
                b.add(FhirPropertyNames.PROPERTY_PROXY_SIGNATURE, proxySignature);
                return this;
            }

            public Builder sourceSignature(final Signature sourceSignature) {
                b.add(FhirPropertyNames.PROPERTY_SOURCE_SIGNATURE, sourceSignature);
                return this;
            }

            public VerificationResultAttestation build() {
                return new VerificationResultAttestation(b.build());
            }
        }
    }

    /**
     * Describes validation requirements, source(s), status and dates for one
     * or more elements.
     */
    public static class VerificationResultPrimarySource extends FhirObject {
        public static final String RESOURCE_TYPE = "VerificationResultPrimarySource";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public VerificationResultPrimarySource(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Reference to the primary source.
         */
        public Reference who() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_WHO);
        }

        /**
         * Type of primary source (License Board; Primary Education; Continuing
         * Education; Postal Service; Relationship owner; Registration Authority;
         * legal source; issuing source; authoritative source).
         */
        public java.util.List<CodeableConcept> type() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Method for communicating with the primary source (manual; API; Push).
         */
        public java.util.List<CodeableConcept> communicationMethod() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_COMMUNICATION_METHOD);
        }

        /**
         * Status of the validation of the target against the primary source
         * (successful; failed; unknown).
         */
        public CodeableConcept validationStatus() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_VALIDATION_STATUS);
        }

        /**
         * When the target was validated against the primary source.
         */
        public java.time.Instant validationDate() {
            return getInstant(FhirPropertyNames.PROPERTY_VALIDATION_DATE);
        }

        /**
         * Ability of the primary source to push updates/alerts (yes; no;
         * undetermined).
         */
        public CodeableConcept canPushUpdates() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CAN_PUSH_UPDATES);
        }

        /**
         * Type of alerts/updates the primary source can send (specific requested
         * changes; any changes; as defined by source).
         */
        public java.util.List<CodeableConcept> pushTypeAvailable() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_PUSH_TYPE_AVAILABLE);
        }

        public static final class Builder extends FhirObject.Builder<VerificationResultPrimarySource, VerificationResultPrimarySource.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder who(final Reference who) {
                b.add(FhirPropertyNames.PROPERTY_WHO, who);
                return this;
            }

            public Builder type(final java.util.List<CodeableConcept> type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, FhirObject.toArray(type));
                return this;
            }

            public Builder communicationMethod(final java.util.List<CodeableConcept> communicationMethod) {
                b.add(FhirPropertyNames.PROPERTY_COMMUNICATION_METHOD, FhirObject.toArray(communicationMethod));
                return this;
            }

            public Builder validationStatus(final CodeableConcept validationStatus) {
                b.add(FhirPropertyNames.PROPERTY_VALIDATION_STATUS, validationStatus);
                return this;
            }

            public Builder validationDate(final java.time.Instant validationDate) {
                b.add(FhirPropertyNames.PROPERTY_VALIDATION_DATE, validationDate.toString());
                return this;
            }

            public Builder canPushUpdates(final CodeableConcept canPushUpdates) {
                b.add(FhirPropertyNames.PROPERTY_CAN_PUSH_UPDATES, canPushUpdates);
                return this;
            }

            public Builder pushTypeAvailable(final java.util.List<CodeableConcept> pushTypeAvailable) {
                b.add(FhirPropertyNames.PROPERTY_PUSH_TYPE_AVAILABLE, FhirObject.toArray(pushTypeAvailable));
                return this;
            }

            public VerificationResultPrimarySource build() {
                return new VerificationResultPrimarySource(b.build());
            }
        }
    }

    /**
     * Describes validation requirements, source(s), status and dates for one
     * or more elements.
     */
    public static class VerificationResultValidator extends FhirObject {
        public static final String RESOURCE_TYPE = "VerificationResultValidator";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public VerificationResultValidator(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Reference to the organization validating information.
         */
        public Reference organization() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_ORGANIZATION);
        }

        /**
         * A digital identity certificate associated with the validator.
         */
        public String identityCertificate() {
            return getString(FhirPropertyNames.PROPERTY_IDENTITY_CERTIFICATE);
        }

        /**
         * Signed assertion by the validator that they have validated the
         * information.
         */
        public Signature attestationSignature() {
            return getObject(Signature.class, FhirPropertyNames.PROPERTY_ATTESTATION_SIGNATURE);
        }

        public static final class Builder extends FhirObject.Builder<VerificationResultValidator, VerificationResultValidator.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder organization(final Reference organization) {
                b.add(FhirPropertyNames.PROPERTY_ORGANIZATION, organization);
                return this;
            }

            public Builder identityCertificate(final String identityCertificate) {
                b.add(FhirPropertyNames.PROPERTY_IDENTITY_CERTIFICATE, identityCertificate);
                return this;
            }

            public Builder attestationSignature(final Signature attestationSignature) {
                b.add(FhirPropertyNames.PROPERTY_ATTESTATION_SIGNATURE, attestationSignature);
                return this;
            }

            public VerificationResultValidator build() {
                return new VerificationResultValidator(b.build());
            }
        }
    }
}
