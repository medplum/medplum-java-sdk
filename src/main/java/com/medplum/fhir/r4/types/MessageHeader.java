/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * The header for a message exchange that is either requesting or
 * responding to an action.  The reference(s) that are the subject of the
 * action as well as other information related to the action are
 * typically transmitted in a bundle in which the MessageHeader resource
 * instance is the first resource in the bundle.
 */
public class MessageHeader extends DomainResource {
    public static final String RESOURCE_TYPE = "MessageHeader";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public MessageHeader(final JsonObject data) {
        super(data);
    }

    /**
     * Code that identifies the event this message represents and connects it
     * with its definition. Events defined as part of the FHIR specification
     * have the system value
     * &quot;http://terminology.hl7.org/CodeSystem/message-events&quot;.  Alternatively
     * uri to the EventDefinition.
     */
    public Coding eventCoding() {
        return getObject(Coding.class, FhirPropertyNames.PROPERTY_EVENT_CODING);
    }

    /**
     * Code that identifies the event this message represents and connects it
     * with its definition. Events defined as part of the FHIR specification
     * have the system value
     * &quot;http://terminology.hl7.org/CodeSystem/message-events&quot;.  Alternatively
     * uri to the EventDefinition.
     */
    public String eventUri() {
        return getString(FhirPropertyNames.PROPERTY_EVENT_URI);
    }

    /**
     * The destination application which the message is intended for.
     */
    public java.util.List<MessageHeaderDestination> destination() {
        return getList(MessageHeaderDestination.class, FhirPropertyNames.PROPERTY_DESTINATION);
    }

    /**
     * Identifies the sending system to allow the use of a trust
     * relationship.
     */
    public Reference sender() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SENDER);
    }

    /**
     * The person or device that performed the data entry leading to this
     * message. When there is more than one candidate, pick the most proximal
     * to the message. Can provide other enterers in extensions.
     */
    public Reference enterer() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ENTERER);
    }

    /**
     * The logical author of the message - the person or device that decided
     * the described event should happen. When there is more than one
     * candidate, pick the most proximal to the MessageHeader. Can provide
     * other authors in extensions.
     */
    public Reference author() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_AUTHOR);
    }

    /**
     * The source application from which this message originated.
     */
    public MessageHeaderSource source() {
        return getObject(MessageHeaderSource.class, FhirPropertyNames.PROPERTY_SOURCE);
    }

    /**
     * The person or organization that accepts overall responsibility for the
     * contents of the message. The implication is that the message event
     * happened under the policies of the responsible party.
     */
    public Reference responsible() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_RESPONSIBLE);
    }

    /**
     * Coded indication of the cause for the event - indicates  a reason for
     * the occurrence of the event that is a focus of this message.
     */
    public CodeableConcept reason() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_REASON);
    }

    /**
     * Information about the message that this message is a response to.
     * Only present if this message is a response.
     */
    public MessageHeaderResponse response() {
        return getObject(MessageHeaderResponse.class, FhirPropertyNames.PROPERTY_RESPONSE);
    }

    /**
     * The actual data of the message - a reference to the root/focus class
     * of the event.
     */
    public java.util.List<Reference> focus() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_FOCUS);
    }

    /**
     * Permanent link to the MessageDefinition for this message.
     */
    public String definition() {
        return getString(FhirPropertyNames.PROPERTY_DEFINITION);
    }

    public static final class Builder extends DomainResource.Builder<MessageHeader, MessageHeader.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder eventCoding(final Coding eventCoding) {
            b.add(FhirPropertyNames.PROPERTY_EVENT_CODING, eventCoding);
            return this;
        }

        public Builder eventUri(final String eventUri) {
            b.add(FhirPropertyNames.PROPERTY_EVENT_URI, eventUri);
            return this;
        }

        public Builder destination(final java.util.List<MessageHeaderDestination> destination) {
            b.add(FhirPropertyNames.PROPERTY_DESTINATION, FhirObject.toArray(destination));
            return this;
        }

        public Builder sender(final Reference sender) {
            b.add(FhirPropertyNames.PROPERTY_SENDER, sender);
            return this;
        }

        public Builder enterer(final Reference enterer) {
            b.add(FhirPropertyNames.PROPERTY_ENTERER, enterer);
            return this;
        }

        public Builder author(final Reference author) {
            b.add(FhirPropertyNames.PROPERTY_AUTHOR, author);
            return this;
        }

        public Builder source(final MessageHeaderSource source) {
            b.add(FhirPropertyNames.PROPERTY_SOURCE, source);
            return this;
        }

        public Builder responsible(final Reference responsible) {
            b.add(FhirPropertyNames.PROPERTY_RESPONSIBLE, responsible);
            return this;
        }

        public Builder reason(final CodeableConcept reason) {
            b.add(FhirPropertyNames.PROPERTY_REASON, reason);
            return this;
        }

        public Builder response(final MessageHeaderResponse response) {
            b.add(FhirPropertyNames.PROPERTY_RESPONSE, response);
            return this;
        }

        public Builder focus(final java.util.List<Reference> focus) {
            b.add(FhirPropertyNames.PROPERTY_FOCUS, FhirObject.toArray(focus));
            return this;
        }

        public Builder definition(final String definition) {
            b.add(FhirPropertyNames.PROPERTY_DEFINITION, definition);
            return this;
        }

        public MessageHeader build() {
            return new MessageHeader(b.build());
        }
    }

    /**
     * The header for a message exchange that is either requesting or
     * responding to an action.  The reference(s) that are the subject of the
     * action as well as other information related to the action are
     * typically transmitted in a bundle in which the MessageHeader resource
     * instance is the first resource in the bundle.
     */
    public static class MessageHeaderDestination extends FhirObject {
        public static final String RESOURCE_TYPE = "MessageHeaderDestination";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MessageHeaderDestination(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Human-readable name for the target system.
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * Identifies the target end system in situations where the initial
         * message transmission is to an intermediary system.
         */
        public Reference target() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_TARGET);
        }

        /**
         * Indicates where the message should be routed to.
         */
        public java.net.URI endpoint() {
            return getUri(FhirPropertyNames.PROPERTY_ENDPOINT);
        }

        /**
         * Allows data conveyed by a message to be addressed to a particular
         * person or department when routing to a specific application isn't
         * sufficient.
         */
        public Reference receiver() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_RECEIVER);
        }

        public static final class Builder extends FhirObject.Builder<MessageHeaderDestination, MessageHeaderDestination.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder target(final Reference target) {
                b.add(FhirPropertyNames.PROPERTY_TARGET, target);
                return this;
            }

            public Builder endpoint(final java.net.URI endpoint) {
                b.add(FhirPropertyNames.PROPERTY_ENDPOINT, endpoint.toString());
                return this;
            }

            public Builder receiver(final Reference receiver) {
                b.add(FhirPropertyNames.PROPERTY_RECEIVER, receiver);
                return this;
            }

            public MessageHeaderDestination build() {
                return new MessageHeaderDestination(b.build());
            }
        }
    }

    /**
     * The header for a message exchange that is either requesting or
     * responding to an action.  The reference(s) that are the subject of the
     * action as well as other information related to the action are
     * typically transmitted in a bundle in which the MessageHeader resource
     * instance is the first resource in the bundle.
     */
    public static class MessageHeaderResponse extends FhirObject {
        public static final String RESOURCE_TYPE = "MessageHeaderResponse";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MessageHeaderResponse(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The MessageHeader.id of the message to which this message is a
         * response.
         */
        public String identifier() {
            return getString(FhirPropertyNames.PROPERTY_IDENTIFIER);
        }

        /**
         * Code that identifies the type of response to the message - whether it
         * was successful or not, and whether it should be resent or not.
         */
        public String code() {
            return getString(FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * Full details of any issues found in the message.
         */
        public Reference details() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_DETAILS);
        }

        public static final class Builder extends FhirObject.Builder<MessageHeaderResponse, MessageHeaderResponse.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder identifier(final String identifier) {
                b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, identifier);
                return this;
            }

            public Builder code(final String code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder details(final Reference details) {
                b.add(FhirPropertyNames.PROPERTY_DETAILS, details);
                return this;
            }

            public MessageHeaderResponse build() {
                return new MessageHeaderResponse(b.build());
            }
        }
    }

    /**
     * The header for a message exchange that is either requesting or
     * responding to an action.  The reference(s) that are the subject of the
     * action as well as other information related to the action are
     * typically transmitted in a bundle in which the MessageHeader resource
     * instance is the first resource in the bundle.
     */
    public static class MessageHeaderSource extends FhirObject {
        public static final String RESOURCE_TYPE = "MessageHeaderSource";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MessageHeaderSource(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Human-readable name for the source system.
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * May include configuration or other information useful in debugging.
         */
        public String software() {
            return getString(FhirPropertyNames.PROPERTY_SOFTWARE);
        }

        /**
         * Can convey versions of multiple systems in situations where a message
         * passes through multiple hands.
         */
        public String version() {
            return getString(FhirPropertyNames.PROPERTY_VERSION);
        }

        /**
         * An e-mail, phone, website or other contact point to use to resolve
         * issues with message communications.
         */
        public ContactPoint contact() {
            return getObject(ContactPoint.class, FhirPropertyNames.PROPERTY_CONTACT);
        }

        /**
         * Identifies the routing target to send acknowledgements to.
         */
        public java.net.URI endpoint() {
            return getUri(FhirPropertyNames.PROPERTY_ENDPOINT);
        }

        public static final class Builder extends FhirObject.Builder<MessageHeaderSource, MessageHeaderSource.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder software(final String software) {
                b.add(FhirPropertyNames.PROPERTY_SOFTWARE, software);
                return this;
            }

            public Builder version(final String version) {
                b.add(FhirPropertyNames.PROPERTY_VERSION, version);
                return this;
            }

            public Builder contact(final ContactPoint contact) {
                b.add(FhirPropertyNames.PROPERTY_CONTACT, contact);
                return this;
            }

            public Builder endpoint(final java.net.URI endpoint) {
                b.add(FhirPropertyNames.PROPERTY_ENDPOINT, endpoint.toString());
                return this;
            }

            public MessageHeaderSource build() {
                return new MessageHeaderSource(b.build());
            }
        }
    }
}
