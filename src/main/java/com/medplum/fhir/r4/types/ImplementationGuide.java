/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A set of rules of how a particular interoperability or standards
 * problem is solved - typically through the use of FHIR resources. This
 * resource is used to gather all the parts of an implementation guide
 * into a logical whole and to publish a computable definition of all the
 * parts.
 */
public class ImplementationGuide extends DomainResource {
    public static final String RESOURCE_TYPE = "ImplementationGuide";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ImplementationGuide(final JsonObject data) {
        super(data);
    }

    /**
     * An absolute URI that is used to identify this implementation guide
     * when it is referenced in a specification, model, design or an
     * instance; also called its canonical identifier. This SHOULD be
     * globally unique and SHOULD be a literal address at which at which an
     * authoritative instance of this implementation guide is (or will be)
     * published. This URL can be the target of a canonical reference. It
     * SHALL remain the same when the implementation guide is stored on
     * different servers.
     */
    public java.net.URI url() {
        return getUri(FhirPropertyNames.PROPERTY_URL);
    }

    /**
     * The identifier that is used to identify this version of the
     * implementation guide when it is referenced in a specification, model,
     * design or instance. This is an arbitrary value managed by the
     * implementation guide author and is not expected to be globally unique.
     * For example, it might be a timestamp (e.g. yyyymmdd) if a managed
     * version is not available. There is also no expectation that versions
     * can be placed in a lexicographical sequence.
     */
    public String version() {
        return getString(FhirPropertyNames.PROPERTY_VERSION);
    }

    /**
     * A natural language name identifying the implementation guide. This
     * name should be usable as an identifier for the module by machine
     * processing applications such as code generation.
     */
    public String name() {
        return getString(FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * A short, descriptive, user-friendly title for the implementation
     * guide.
     */
    public String title() {
        return getString(FhirPropertyNames.PROPERTY_TITLE);
    }

    /**
     * The status of this implementation guide. Enables tracking the
     * life-cycle of the content.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * A Boolean value to indicate that this implementation guide is authored
     * for testing purposes (or education/evaluation/marketing) and is not
     * intended to be used for genuine usage.
     */
    public Boolean experimental() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_EXPERIMENTAL);
    }

    /**
     * The date  (and optionally time) when the implementation guide was
     * published. The date must change when the business version changes and
     * it must change if the status code changes. In addition, it should
     * change when the substantive content of the implementation guide
     * changes.
     */
    public java.time.Instant date() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE);
    }

    /**
     * The name of the organization or individual that published the
     * implementation guide.
     */
    public String publisher() {
        return getString(FhirPropertyNames.PROPERTY_PUBLISHER);
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_CONTACT);
    }

    /**
     * A free text natural language description of the implementation guide
     * from a consumer's perspective.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs
     * (insurance plans, studies, ...) and may be used to assist with
     * indexing and searching for appropriate implementation guide instances.
     */
    public java.util.List<UsageContext> useContext() {
        return getList(UsageContext.class, FhirPropertyNames.PROPERTY_USE_CONTEXT);
    }

    /**
     * A legal or geographic region in which the implementation guide is
     * intended to be used.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_JURISDICTION);
    }

    /**
     * A copyright statement relating to the implementation guide and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the implementation guide.
     */
    public String copyright() {
        return getString(FhirPropertyNames.PROPERTY_COPYRIGHT);
    }

    /**
     * The NPM package name for this Implementation Guide, used in the NPM
     * package distribution, which is the primary mechanism by which FHIR
     * based tooling manages IG dependencies. This value must be globally
     * unique, and should be assigned with care.
     */
    public String packageId() {
        return getString(FhirPropertyNames.PROPERTY_PACKAGE_ID);
    }

    /**
     * The license that applies to this Implementation Guide, using an SPDX
     * license code, or 'not-open-source'.
     */
    public String license() {
        return getString(FhirPropertyNames.PROPERTY_LICENSE);
    }

    /**
     * The version(s) of the FHIR specification that this ImplementationGuide
     * targets - e.g. describes how to use. The value of this element is the
     * formal version of the specification, without the revision number, e.g.
     * [publication].[major].[minor], which is 4.0.1. for this version.
     */
    public java.util.List<String> fhirVersion() {
        return getList(String.class, FhirPropertyNames.PROPERTY_FHIR_VERSION);
    }

    /**
     * Another implementation guide that this implementation depends on.
     * Typically, an implementation guide uses value sets, profiles
     * etc.defined in other implementation guides.
     */
    public java.util.List<ImplementationGuideDependsOn> dependsOn() {
        return getList(ImplementationGuideDependsOn.class, FhirPropertyNames.PROPERTY_DEPENDS_ON);
    }

    /**
     * A set of profiles that all resources covered by this implementation
     * guide must conform to.
     */
    public java.util.List<ImplementationGuideGlobal> global() {
        return getList(ImplementationGuideGlobal.class, FhirPropertyNames.PROPERTY_GLOBAL);
    }

    /**
     * The information needed by an IG publisher tool to publish the whole
     * implementation guide.
     */
    public ImplementationGuideDefinition definition() {
        return getObject(ImplementationGuideDefinition.class, FhirPropertyNames.PROPERTY_DEFINITION);
    }

    /**
     * Information about an assembled implementation guide, created by the
     * publication tooling.
     */
    public ImplementationGuideManifest manifest() {
        return getObject(ImplementationGuideManifest.class, FhirPropertyNames.PROPERTY_MANIFEST);
    }

    public static final class Builder extends DomainResource.Builder<ImplementationGuide, ImplementationGuide.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder url(final java.net.URI url) {
            b.add(FhirPropertyNames.PROPERTY_URL, url.toString());
            return this;
        }

        public Builder version(final String version) {
            b.add(FhirPropertyNames.PROPERTY_VERSION, version);
            return this;
        }

        public Builder name(final String name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, name);
            return this;
        }

        public Builder title(final String title) {
            b.add(FhirPropertyNames.PROPERTY_TITLE, title);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder experimental(final Boolean experimental) {
            b.add(FhirPropertyNames.PROPERTY_EXPERIMENTAL, experimental);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder publisher(final String publisher) {
            b.add(FhirPropertyNames.PROPERTY_PUBLISHER, publisher);
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(FhirPropertyNames.PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder useContext(final java.util.List<UsageContext> useContext) {
            b.add(FhirPropertyNames.PROPERTY_USE_CONTEXT, FhirObject.toArray(useContext));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(FhirPropertyNames.PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder copyright(final String copyright) {
            b.add(FhirPropertyNames.PROPERTY_COPYRIGHT, copyright);
            return this;
        }

        public Builder packageId(final String packageId) {
            b.add(FhirPropertyNames.PROPERTY_PACKAGE_ID, packageId);
            return this;
        }

        public Builder license(final String license) {
            b.add(FhirPropertyNames.PROPERTY_LICENSE, license);
            return this;
        }

        public Builder fhirVersion(final java.util.List<String> fhirVersion) {
            b.add(FhirPropertyNames.PROPERTY_FHIR_VERSION, FhirObject.toStringArray(fhirVersion));
            return this;
        }

        public Builder dependsOn(final java.util.List<ImplementationGuideDependsOn> dependsOn) {
            b.add(FhirPropertyNames.PROPERTY_DEPENDS_ON, FhirObject.toArray(dependsOn));
            return this;
        }

        public Builder global(final java.util.List<ImplementationGuideGlobal> global) {
            b.add(FhirPropertyNames.PROPERTY_GLOBAL, FhirObject.toArray(global));
            return this;
        }

        public Builder definition(final ImplementationGuideDefinition definition) {
            b.add(FhirPropertyNames.PROPERTY_DEFINITION, definition);
            return this;
        }

        public Builder manifest(final ImplementationGuideManifest manifest) {
            b.add(FhirPropertyNames.PROPERTY_MANIFEST, manifest);
            return this;
        }

        public ImplementationGuide build() {
            return new ImplementationGuide(b.build());
        }
    }

    /**
     * A set of rules of how a particular interoperability or standards
     * problem is solved - typically through the use of FHIR resources. This
     * resource is used to gather all the parts of an implementation guide
     * into a logical whole and to publish a computable definition of all the
     * parts.
     */
    public static class ImplementationGuideDefinition extends FhirObject {
        public static final String RESOURCE_TYPE = "ImplementationGuideDefinition";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ImplementationGuideDefinition(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A logical group of resources. Logical groups can be used when building
         * pages.
         */
        public java.util.List<ImplementationGuideGrouping> grouping() {
            return getList(ImplementationGuideGrouping.class, FhirPropertyNames.PROPERTY_GROUPING);
        }

        /**
         * A resource that is part of the implementation guide. Conformance
         * resources (value set, structure definition, capability statements
         * etc.) are obvious candidates for inclusion, but any kind of resource
         * can be included as an example resource.
         */
        public java.util.List<ImplementationGuideResource> resource() {
            return getList(ImplementationGuideResource.class, FhirPropertyNames.PROPERTY_RESOURCE);
        }

        /**
         * A page / section in the implementation guide. The root page is the
         * implementation guide home page.
         */
        public ImplementationGuidePage page() {
            return getObject(ImplementationGuidePage.class, FhirPropertyNames.PROPERTY_PAGE);
        }

        /**
         * Defines how IG is built by tools.
         */
        public java.util.List<ImplementationGuideParameter> parameter() {
            return getList(ImplementationGuideParameter.class, FhirPropertyNames.PROPERTY_PARAMETER);
        }

        /**
         * A template for building resources.
         */
        public java.util.List<ImplementationGuideTemplate> template() {
            return getList(ImplementationGuideTemplate.class, FhirPropertyNames.PROPERTY_TEMPLATE);
        }

        public static final class Builder extends FhirObject.Builder<ImplementationGuideDefinition, ImplementationGuideDefinition.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder grouping(final java.util.List<ImplementationGuideGrouping> grouping) {
                b.add(FhirPropertyNames.PROPERTY_GROUPING, FhirObject.toArray(grouping));
                return this;
            }

            public Builder resource(final java.util.List<ImplementationGuideResource> resource) {
                b.add(FhirPropertyNames.PROPERTY_RESOURCE, FhirObject.toArray(resource));
                return this;
            }

            public Builder page(final ImplementationGuidePage page) {
                b.add(FhirPropertyNames.PROPERTY_PAGE, page);
                return this;
            }

            public Builder parameter(final java.util.List<ImplementationGuideParameter> parameter) {
                b.add(FhirPropertyNames.PROPERTY_PARAMETER, FhirObject.toArray(parameter));
                return this;
            }

            public Builder template(final java.util.List<ImplementationGuideTemplate> template) {
                b.add(FhirPropertyNames.PROPERTY_TEMPLATE, FhirObject.toArray(template));
                return this;
            }

            public ImplementationGuideDefinition build() {
                return new ImplementationGuideDefinition(b.build());
            }
        }
    }

    /**
     * A set of rules of how a particular interoperability or standards
     * problem is solved - typically through the use of FHIR resources. This
     * resource is used to gather all the parts of an implementation guide
     * into a logical whole and to publish a computable definition of all the
     * parts.
     */
    public static class ImplementationGuideDependsOn extends FhirObject {
        public static final String RESOURCE_TYPE = "ImplementationGuideDependsOn";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ImplementationGuideDependsOn(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A canonical reference to the Implementation guide for the dependency.
         */
        public String uri() {
            return getString(FhirPropertyNames.PROPERTY_URI);
        }

        /**
         * The NPM package name for the Implementation Guide that this IG depends
         * on.
         */
        public String packageId() {
            return getString(FhirPropertyNames.PROPERTY_PACKAGE_ID);
        }

        /**
         * The version of the IG that is depended on, when the correct version is
         * required to understand the IG correctly.
         */
        public String version() {
            return getString(FhirPropertyNames.PROPERTY_VERSION);
        }

        public static final class Builder extends FhirObject.Builder<ImplementationGuideDependsOn, ImplementationGuideDependsOn.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder uri(final String uri) {
                b.add(FhirPropertyNames.PROPERTY_URI, uri);
                return this;
            }

            public Builder packageId(final String packageId) {
                b.add(FhirPropertyNames.PROPERTY_PACKAGE_ID, packageId);
                return this;
            }

            public Builder version(final String version) {
                b.add(FhirPropertyNames.PROPERTY_VERSION, version);
                return this;
            }

            public ImplementationGuideDependsOn build() {
                return new ImplementationGuideDependsOn(b.build());
            }
        }
    }

    /**
     * A set of rules of how a particular interoperability or standards
     * problem is solved - typically through the use of FHIR resources. This
     * resource is used to gather all the parts of an implementation guide
     * into a logical whole and to publish a computable definition of all the
     * parts.
     */
    public static class ImplementationGuideGlobal extends FhirObject {
        public static final String RESOURCE_TYPE = "ImplementationGuideGlobal";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ImplementationGuideGlobal(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The type of resource that all instances must conform to.
         */
        public String type() {
            return getString(FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * A reference to the profile that all instances must conform to.
         */
        public String profile() {
            return getString(FhirPropertyNames.PROPERTY_PROFILE);
        }

        public static final class Builder extends FhirObject.Builder<ImplementationGuideGlobal, ImplementationGuideGlobal.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final String type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder profile(final String profile) {
                b.add(FhirPropertyNames.PROPERTY_PROFILE, profile);
                return this;
            }

            public ImplementationGuideGlobal build() {
                return new ImplementationGuideGlobal(b.build());
            }
        }
    }

    /**
     * A set of rules of how a particular interoperability or standards
     * problem is solved - typically through the use of FHIR resources. This
     * resource is used to gather all the parts of an implementation guide
     * into a logical whole and to publish a computable definition of all the
     * parts.
     */
    public static class ImplementationGuideGrouping extends FhirObject {
        public static final String RESOURCE_TYPE = "ImplementationGuideGrouping";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ImplementationGuideGrouping(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The human-readable title to display for the package of resources when
         * rendering the implementation guide.
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * Human readable text describing the package.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        public static final class Builder extends FhirObject.Builder<ImplementationGuideGrouping, ImplementationGuideGrouping.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public ImplementationGuideGrouping build() {
                return new ImplementationGuideGrouping(b.build());
            }
        }
    }

    /**
     * A set of rules of how a particular interoperability or standards
     * problem is solved - typically through the use of FHIR resources. This
     * resource is used to gather all the parts of an implementation guide
     * into a logical whole and to publish a computable definition of all the
     * parts.
     */
    public static class ImplementationGuideManifest extends FhirObject {
        public static final String RESOURCE_TYPE = "ImplementationGuideManifest";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ImplementationGuideManifest(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A pointer to official web page, PDF or other rendering of the
         * implementation guide.
         */
        public java.net.URI rendering() {
            return getUri(FhirPropertyNames.PROPERTY_RENDERING);
        }

        /**
         * A resource that is part of the implementation guide. Conformance
         * resources (value set, structure definition, capability statements
         * etc.) are obvious candidates for inclusion, but any kind of resource
         * can be included as an example resource.
         */
        public java.util.List<ImplementationGuideResource1> resource() {
            return getList(ImplementationGuideResource1.class, FhirPropertyNames.PROPERTY_RESOURCE);
        }

        /**
         * Information about a page within the IG.
         */
        public java.util.List<ImplementationGuidePage1> page() {
            return getList(ImplementationGuidePage1.class, FhirPropertyNames.PROPERTY_PAGE);
        }

        /**
         * Indicates a relative path to an image that exists within the IG.
         */
        public java.util.List<String> image() {
            return getList(String.class, FhirPropertyNames.PROPERTY_IMAGE);
        }

        /**
         * Indicates the relative path of an additional non-page, non-image file
         * that is part of the IG - e.g. zip, jar and similar files that could be
         * the target of a hyperlink in a derived IG.
         */
        public java.util.List<String> other() {
            return getList(String.class, FhirPropertyNames.PROPERTY_OTHER);
        }

        public static final class Builder extends FhirObject.Builder<ImplementationGuideManifest, ImplementationGuideManifest.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder rendering(final java.net.URI rendering) {
                b.add(FhirPropertyNames.PROPERTY_RENDERING, rendering.toString());
                return this;
            }

            public Builder resource(final java.util.List<ImplementationGuideResource1> resource) {
                b.add(FhirPropertyNames.PROPERTY_RESOURCE, FhirObject.toArray(resource));
                return this;
            }

            public Builder page(final java.util.List<ImplementationGuidePage1> page) {
                b.add(FhirPropertyNames.PROPERTY_PAGE, FhirObject.toArray(page));
                return this;
            }

            public Builder image(final java.util.List<String> image) {
                b.add(FhirPropertyNames.PROPERTY_IMAGE, FhirObject.toStringArray(image));
                return this;
            }

            public Builder other(final java.util.List<String> other) {
                b.add(FhirPropertyNames.PROPERTY_OTHER, FhirObject.toStringArray(other));
                return this;
            }

            public ImplementationGuideManifest build() {
                return new ImplementationGuideManifest(b.build());
            }
        }
    }

    /**
     * A set of rules of how a particular interoperability or standards
     * problem is solved - typically through the use of FHIR resources. This
     * resource is used to gather all the parts of an implementation guide
     * into a logical whole and to publish a computable definition of all the
     * parts.
     */
    public static class ImplementationGuidePage extends FhirObject {
        public static final String RESOURCE_TYPE = "ImplementationGuidePage";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ImplementationGuidePage(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The source address for the page.
         */
        public String nameUrl() {
            return getString(FhirPropertyNames.PROPERTY_NAME_URL);
        }

        /**
         * The source address for the page.
         */
        public Reference nameReference() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_NAME_REFERENCE);
        }

        /**
         * A short title used to represent this page in navigational structures
         * such as table of contents, bread crumbs, etc.
         */
        public String title() {
            return getString(FhirPropertyNames.PROPERTY_TITLE);
        }

        /**
         * A code that indicates how the page is generated.
         */
        public String generation() {
            return getString(FhirPropertyNames.PROPERTY_GENERATION);
        }

        /**
         * Nested Pages/Sections under this page.
         */
        public java.util.List<ImplementationGuidePage> page() {
            return getList(ImplementationGuidePage.class, FhirPropertyNames.PROPERTY_PAGE);
        }

        public static final class Builder extends FhirObject.Builder<ImplementationGuidePage, ImplementationGuidePage.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder nameUrl(final String nameUrl) {
                b.add(FhirPropertyNames.PROPERTY_NAME_URL, nameUrl);
                return this;
            }

            public Builder nameReference(final Reference nameReference) {
                b.add(FhirPropertyNames.PROPERTY_NAME_REFERENCE, nameReference);
                return this;
            }

            public Builder title(final String title) {
                b.add(FhirPropertyNames.PROPERTY_TITLE, title);
                return this;
            }

            public Builder generation(final String generation) {
                b.add(FhirPropertyNames.PROPERTY_GENERATION, generation);
                return this;
            }

            public Builder page(final java.util.List<ImplementationGuidePage> page) {
                b.add(FhirPropertyNames.PROPERTY_PAGE, FhirObject.toArray(page));
                return this;
            }

            public ImplementationGuidePage build() {
                return new ImplementationGuidePage(b.build());
            }
        }
    }

    /**
     * A set of rules of how a particular interoperability or standards
     * problem is solved - typically through the use of FHIR resources. This
     * resource is used to gather all the parts of an implementation guide
     * into a logical whole and to publish a computable definition of all the
     * parts.
     */
    public static class ImplementationGuidePage1 extends FhirObject {
        public static final String RESOURCE_TYPE = "ImplementationGuidePage1";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ImplementationGuidePage1(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Relative path to the page.
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * Label for the page intended for human display.
         */
        public String title() {
            return getString(FhirPropertyNames.PROPERTY_TITLE);
        }

        /**
         * The name of an anchor available on the page.
         */
        public java.util.List<String> anchor() {
            return getList(String.class, FhirPropertyNames.PROPERTY_ANCHOR);
        }

        public static final class Builder extends FhirObject.Builder<ImplementationGuidePage1, ImplementationGuidePage1.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder title(final String title) {
                b.add(FhirPropertyNames.PROPERTY_TITLE, title);
                return this;
            }

            public Builder anchor(final java.util.List<String> anchor) {
                b.add(FhirPropertyNames.PROPERTY_ANCHOR, FhirObject.toStringArray(anchor));
                return this;
            }

            public ImplementationGuidePage1 build() {
                return new ImplementationGuidePage1(b.build());
            }
        }
    }

    /**
     * A set of rules of how a particular interoperability or standards
     * problem is solved - typically through the use of FHIR resources. This
     * resource is used to gather all the parts of an implementation guide
     * into a logical whole and to publish a computable definition of all the
     * parts.
     */
    public static class ImplementationGuideParameter extends FhirObject {
        public static final String RESOURCE_TYPE = "ImplementationGuideParameter";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ImplementationGuideParameter(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * apply | path-resource | path-pages | path-tx-cache |
         * expansion-parameter | rule-broken-links | generate-xml | generate-json
         * | generate-turtle | html-template.
         */
        public String code() {
            return getString(FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * Value for named type.
         */
        public String value() {
            return getString(FhirPropertyNames.PROPERTY_VALUE);
        }

        public static final class Builder extends FhirObject.Builder<ImplementationGuideParameter, ImplementationGuideParameter.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final String code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder value(final String value) {
                b.add(FhirPropertyNames.PROPERTY_VALUE, value);
                return this;
            }

            public ImplementationGuideParameter build() {
                return new ImplementationGuideParameter(b.build());
            }
        }
    }

    /**
     * A set of rules of how a particular interoperability or standards
     * problem is solved - typically through the use of FHIR resources. This
     * resource is used to gather all the parts of an implementation guide
     * into a logical whole and to publish a computable definition of all the
     * parts.
     */
    public static class ImplementationGuideResource extends FhirObject {
        public static final String RESOURCE_TYPE = "ImplementationGuideResource";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ImplementationGuideResource(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Where this resource is found.
         */
        public Reference reference() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_REFERENCE);
        }

        /**
         * Indicates the FHIR Version(s) this artifact is intended to apply to.
         * If no versions are specified, the resource is assumed to apply to all
         * the versions stated in ImplementationGuide.fhirVersion.
         */
        public java.util.List<String> fhirVersion() {
            return getList(String.class, FhirPropertyNames.PROPERTY_FHIR_VERSION);
        }

        /**
         * A human assigned name for the resource. All resources SHOULD have a
         * name, but the name may be extracted from the resource (e.g.
         * ValueSet.name).
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * A description of the reason that a resource has been included in the
         * implementation guide.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * If true or a reference, indicates the resource is an example instance.
         * If a reference is present, indicates that the example is an example of
         * the specified profile.
         */
        public Boolean exampleBoolean() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_EXAMPLE_BOOLEAN);
        }

        /**
         * If true or a reference, indicates the resource is an example instance.
         * If a reference is present, indicates that the example is an example of
         * the specified profile.
         */
        public String exampleCanonical() {
            return getString(FhirPropertyNames.PROPERTY_EXAMPLE_CANONICAL);
        }

        /**
         * Reference to the id of the grouping this resource appears in.
         */
        public String groupingId() {
            return getString(FhirPropertyNames.PROPERTY_GROUPING_ID);
        }

        public static final class Builder extends FhirObject.Builder<ImplementationGuideResource, ImplementationGuideResource.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder reference(final Reference reference) {
                b.add(FhirPropertyNames.PROPERTY_REFERENCE, reference);
                return this;
            }

            public Builder fhirVersion(final java.util.List<String> fhirVersion) {
                b.add(FhirPropertyNames.PROPERTY_FHIR_VERSION, FhirObject.toStringArray(fhirVersion));
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder exampleBoolean(final Boolean exampleBoolean) {
                b.add(FhirPropertyNames.PROPERTY_EXAMPLE_BOOLEAN, exampleBoolean);
                return this;
            }

            public Builder exampleCanonical(final String exampleCanonical) {
                b.add(FhirPropertyNames.PROPERTY_EXAMPLE_CANONICAL, exampleCanonical);
                return this;
            }

            public Builder groupingId(final String groupingId) {
                b.add(FhirPropertyNames.PROPERTY_GROUPING_ID, groupingId);
                return this;
            }

            public ImplementationGuideResource build() {
                return new ImplementationGuideResource(b.build());
            }
        }
    }

    /**
     * A set of rules of how a particular interoperability or standards
     * problem is solved - typically through the use of FHIR resources. This
     * resource is used to gather all the parts of an implementation guide
     * into a logical whole and to publish a computable definition of all the
     * parts.
     */
    public static class ImplementationGuideResource1 extends FhirObject {
        public static final String RESOURCE_TYPE = "ImplementationGuideResource1";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ImplementationGuideResource1(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Where this resource is found.
         */
        public Reference reference() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_REFERENCE);
        }

        /**
         * If true or a reference, indicates the resource is an example instance.
         * If a reference is present, indicates that the example is an example of
         * the specified profile.
         */
        public Boolean exampleBoolean() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_EXAMPLE_BOOLEAN);
        }

        /**
         * If true or a reference, indicates the resource is an example instance.
         * If a reference is present, indicates that the example is an example of
         * the specified profile.
         */
        public String exampleCanonical() {
            return getString(FhirPropertyNames.PROPERTY_EXAMPLE_CANONICAL);
        }

        /**
         * The relative path for primary page for this resource within the IG.
         */
        public java.net.URI relativePath() {
            return getUri(FhirPropertyNames.PROPERTY_RELATIVE_PATH);
        }

        public static final class Builder extends FhirObject.Builder<ImplementationGuideResource1, ImplementationGuideResource1.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder reference(final Reference reference) {
                b.add(FhirPropertyNames.PROPERTY_REFERENCE, reference);
                return this;
            }

            public Builder exampleBoolean(final Boolean exampleBoolean) {
                b.add(FhirPropertyNames.PROPERTY_EXAMPLE_BOOLEAN, exampleBoolean);
                return this;
            }

            public Builder exampleCanonical(final String exampleCanonical) {
                b.add(FhirPropertyNames.PROPERTY_EXAMPLE_CANONICAL, exampleCanonical);
                return this;
            }

            public Builder relativePath(final java.net.URI relativePath) {
                b.add(FhirPropertyNames.PROPERTY_RELATIVE_PATH, relativePath.toString());
                return this;
            }

            public ImplementationGuideResource1 build() {
                return new ImplementationGuideResource1(b.build());
            }
        }
    }

    /**
     * A set of rules of how a particular interoperability or standards
     * problem is solved - typically through the use of FHIR resources. This
     * resource is used to gather all the parts of an implementation guide
     * into a logical whole and to publish a computable definition of all the
     * parts.
     */
    public static class ImplementationGuideTemplate extends FhirObject {
        public static final String RESOURCE_TYPE = "ImplementationGuideTemplate";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ImplementationGuideTemplate(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Type of template specified.
         */
        public String code() {
            return getString(FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * The source location for the template.
         */
        public String source() {
            return getString(FhirPropertyNames.PROPERTY_SOURCE);
        }

        /**
         * The scope in which the template applies.
         */
        public String scope() {
            return getString(FhirPropertyNames.PROPERTY_SCOPE);
        }

        public static final class Builder extends FhirObject.Builder<ImplementationGuideTemplate, ImplementationGuideTemplate.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final String code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder source(final String source) {
                b.add(FhirPropertyNames.PROPERTY_SOURCE, source);
                return this;
            }

            public Builder scope(final String scope) {
                b.add(FhirPropertyNames.PROPERTY_SCOPE, scope);
                return this;
            }

            public ImplementationGuideTemplate build() {
                return new ImplementationGuideTemplate(b.build());
            }
        }
    }
}
