/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Describes the event of a patient being administered a vaccine or a
 * record of an immunization as reported by a patient, a clinician or
 * another party.
 */
public class Immunization extends DomainResource {
    public static final String RESOURCE_TYPE = "Immunization";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Immunization(final JsonObject data) {
        super(data);
    }

    /**
     * A unique identifier assigned to this immunization record.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * Indicates the current status of the immunization event.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * Indicates the reason the immunization event was not performed.
     */
    public CodeableConcept statusReason() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_STATUS_REASON);
    }

    /**
     * Vaccine that was administered or was to be administered.
     */
    public CodeableConcept vaccineCode() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_VACCINE_CODE);
    }

    /**
     * The patient who either received or did not receive the immunization.
     */
    public Reference patient() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PATIENT);
    }

    /**
     * The visit or admission or other contact between patient and health
     * care provider the immunization was performed as part of.
     */
    public Reference encounter() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ENCOUNTER);
    }

    /**
     * Date vaccine administered or was to be administered.
     */
    public String occurrenceDateTime() {
        return getString(FhirPropertyNames.PROPERTY_OCCURRENCE_DATE_TIME);
    }

    /**
     * Date vaccine administered or was to be administered.
     */
    public String occurrenceString() {
        return getString(FhirPropertyNames.PROPERTY_OCCURRENCE_STRING);
    }

    /**
     * The date the occurrence of the immunization was first captured in the
     * record - potentially significantly after the occurrence of the event.
     */
    public java.time.Instant recorded() {
        return getInstant(FhirPropertyNames.PROPERTY_RECORDED);
    }

    /**
     * An indication that the content of the record is based on information
     * from the person who administered the vaccine. This reflects the
     * context under which the data was originally recorded.
     */
    public Boolean primarySource() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_PRIMARY_SOURCE);
    }

    /**
     * The source of the data when the report of the immunization event is
     * not based on information from the person who administered the vaccine.
     */
    public CodeableConcept reportOrigin() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_REPORT_ORIGIN);
    }

    /**
     * The service delivery location where the vaccine administration
     * occurred.
     */
    public Reference location() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_LOCATION);
    }

    /**
     * Name of vaccine manufacturer.
     */
    public Reference manufacturer() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_MANUFACTURER);
    }

    /**
     * Lot number of the  vaccine product.
     */
    public String lotNumber() {
        return getString(FhirPropertyNames.PROPERTY_LOT_NUMBER);
    }

    /**
     * Date vaccine batch expires.
     */
    public java.time.LocalDate expirationDate() {
        return getLocalDate(FhirPropertyNames.PROPERTY_EXPIRATION_DATE);
    }

    /**
     * Body site where vaccine was administered.
     */
    public CodeableConcept site() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_SITE);
    }

    /**
     * The path by which the vaccine product is taken into the body.
     */
    public CodeableConcept route() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_ROUTE);
    }

    /**
     * The quantity of vaccine product that was administered.
     */
    public Quantity doseQuantity() {
        return getObject(Quantity.class, FhirPropertyNames.PROPERTY_DOSE_QUANTITY);
    }

    /**
     * Indicates who performed the immunization event.
     */
    public java.util.List<ImmunizationPerformer> performer() {
        return getList(ImmunizationPerformer.class, FhirPropertyNames.PROPERTY_PERFORMER);
    }

    /**
     * Extra information about the immunization that is not conveyed by the
     * other attributes.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    /**
     * Reasons why the vaccine was administered.
     */
    public java.util.List<CodeableConcept> reasonCode() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_REASON_CODE);
    }

    /**
     * Condition, Observation or DiagnosticReport that supports why the
     * immunization was administered.
     */
    public java.util.List<Reference> reasonReference() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_REASON_REFERENCE);
    }

    /**
     * Indication if a dose is considered to be subpotent. By default, a dose
     * should be considered to be potent.
     */
    public Boolean isSubpotent() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_IS_SUBPOTENT);
    }

    /**
     * Reason why a dose is considered to be subpotent.
     */
    public java.util.List<CodeableConcept> subpotentReason() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_SUBPOTENT_REASON);
    }

    /**
     * Educational material presented to the patient (or guardian) at the
     * time of vaccine administration.
     */
    public java.util.List<ImmunizationEducation> education() {
        return getList(ImmunizationEducation.class, FhirPropertyNames.PROPERTY_EDUCATION);
    }

    /**
     * Indicates a patient's eligibility for a funding program.
     */
    public java.util.List<CodeableConcept> programEligibility() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_PROGRAM_ELIGIBILITY);
    }

    /**
     * Indicates the source of the vaccine actually administered. This may be
     * different than the patient eligibility (e.g. the patient may be
     * eligible for a publically purchased vaccine but due to inventory
     * issues, vaccine purchased with private funds was actually
     * administered).
     */
    public CodeableConcept fundingSource() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_FUNDING_SOURCE);
    }

    /**
     * Categorical data indicating that an adverse event is associated in
     * time to an immunization.
     */
    public java.util.List<ImmunizationReaction> reaction() {
        return getList(ImmunizationReaction.class, FhirPropertyNames.PROPERTY_REACTION);
    }

    /**
     * The protocol (set of recommendations) being followed by the provider
     * who administered the dose.
     */
    public java.util.List<ImmunizationProtocolApplied> protocolApplied() {
        return getList(ImmunizationProtocolApplied.class, FhirPropertyNames.PROPERTY_PROTOCOL_APPLIED);
    }

    public static final class Builder extends DomainResource.Builder<Immunization, Immunization.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder statusReason(final CodeableConcept statusReason) {
            b.add(FhirPropertyNames.PROPERTY_STATUS_REASON, statusReason);
            return this;
        }

        public Builder vaccineCode(final CodeableConcept vaccineCode) {
            b.add(FhirPropertyNames.PROPERTY_VACCINE_CODE, vaccineCode);
            return this;
        }

        public Builder patient(final Reference patient) {
            b.add(FhirPropertyNames.PROPERTY_PATIENT, patient);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(FhirPropertyNames.PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder occurrenceDateTime(final String occurrenceDateTime) {
            b.add(FhirPropertyNames.PROPERTY_OCCURRENCE_DATE_TIME, occurrenceDateTime);
            return this;
        }

        public Builder occurrenceString(final String occurrenceString) {
            b.add(FhirPropertyNames.PROPERTY_OCCURRENCE_STRING, occurrenceString);
            return this;
        }

        public Builder recorded(final java.time.Instant recorded) {
            b.add(FhirPropertyNames.PROPERTY_RECORDED, recorded.toString());
            return this;
        }

        public Builder primarySource(final Boolean primarySource) {
            b.add(FhirPropertyNames.PROPERTY_PRIMARY_SOURCE, primarySource);
            return this;
        }

        public Builder reportOrigin(final CodeableConcept reportOrigin) {
            b.add(FhirPropertyNames.PROPERTY_REPORT_ORIGIN, reportOrigin);
            return this;
        }

        public Builder location(final Reference location) {
            b.add(FhirPropertyNames.PROPERTY_LOCATION, location);
            return this;
        }

        public Builder manufacturer(final Reference manufacturer) {
            b.add(FhirPropertyNames.PROPERTY_MANUFACTURER, manufacturer);
            return this;
        }

        public Builder lotNumber(final String lotNumber) {
            b.add(FhirPropertyNames.PROPERTY_LOT_NUMBER, lotNumber);
            return this;
        }

        public Builder expirationDate(final java.time.LocalDate expirationDate) {
            b.add(FhirPropertyNames.PROPERTY_EXPIRATION_DATE, expirationDate.toString());
            return this;
        }

        public Builder site(final CodeableConcept site) {
            b.add(FhirPropertyNames.PROPERTY_SITE, site);
            return this;
        }

        public Builder route(final CodeableConcept route) {
            b.add(FhirPropertyNames.PROPERTY_ROUTE, route);
            return this;
        }

        public Builder doseQuantity(final Quantity doseQuantity) {
            b.add(FhirPropertyNames.PROPERTY_DOSE_QUANTITY, doseQuantity);
            return this;
        }

        public Builder performer(final java.util.List<ImmunizationPerformer> performer) {
            b.add(FhirPropertyNames.PROPERTY_PERFORMER, FhirObject.toArray(performer));
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder reasonCode(final java.util.List<CodeableConcept> reasonCode) {
            b.add(FhirPropertyNames.PROPERTY_REASON_CODE, FhirObject.toArray(reasonCode));
            return this;
        }

        public Builder reasonReference(final java.util.List<Reference> reasonReference) {
            b.add(FhirPropertyNames.PROPERTY_REASON_REFERENCE, FhirObject.toArray(reasonReference));
            return this;
        }

        public Builder isSubpotent(final Boolean isSubpotent) {
            b.add(FhirPropertyNames.PROPERTY_IS_SUBPOTENT, isSubpotent);
            return this;
        }

        public Builder subpotentReason(final java.util.List<CodeableConcept> subpotentReason) {
            b.add(FhirPropertyNames.PROPERTY_SUBPOTENT_REASON, FhirObject.toArray(subpotentReason));
            return this;
        }

        public Builder education(final java.util.List<ImmunizationEducation> education) {
            b.add(FhirPropertyNames.PROPERTY_EDUCATION, FhirObject.toArray(education));
            return this;
        }

        public Builder programEligibility(final java.util.List<CodeableConcept> programEligibility) {
            b.add(FhirPropertyNames.PROPERTY_PROGRAM_ELIGIBILITY, FhirObject.toArray(programEligibility));
            return this;
        }

        public Builder fundingSource(final CodeableConcept fundingSource) {
            b.add(FhirPropertyNames.PROPERTY_FUNDING_SOURCE, fundingSource);
            return this;
        }

        public Builder reaction(final java.util.List<ImmunizationReaction> reaction) {
            b.add(FhirPropertyNames.PROPERTY_REACTION, FhirObject.toArray(reaction));
            return this;
        }

        public Builder protocolApplied(final java.util.List<ImmunizationProtocolApplied> protocolApplied) {
            b.add(FhirPropertyNames.PROPERTY_PROTOCOL_APPLIED, FhirObject.toArray(protocolApplied));
            return this;
        }

        public Immunization build() {
            return new Immunization(b.build());
        }
    }

    /**
     * Describes the event of a patient being administered a vaccine or a
     * record of an immunization as reported by a patient, a clinician or
     * another party.
     */
    public static class ImmunizationEducation extends FhirObject {
        public static final String RESOURCE_TYPE = "ImmunizationEducation";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ImmunizationEducation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Identifier of the material presented to the patient.
         */
        public String documentType() {
            return getString(FhirPropertyNames.PROPERTY_DOCUMENT_TYPE);
        }

        /**
         * Reference pointer to the educational material given to the patient if
         * the information was on line.
         */
        public java.net.URI reference() {
            return getUri(FhirPropertyNames.PROPERTY_REFERENCE);
        }

        /**
         * Date the educational material was published.
         */
        public java.time.Instant publicationDate() {
            return getInstant(FhirPropertyNames.PROPERTY_PUBLICATION_DATE);
        }

        /**
         * Date the educational material was given to the patient.
         */
        public java.time.Instant presentationDate() {
            return getInstant(FhirPropertyNames.PROPERTY_PRESENTATION_DATE);
        }

        public static final class Builder extends FhirObject.Builder<ImmunizationEducation, ImmunizationEducation.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder documentType(final String documentType) {
                b.add(FhirPropertyNames.PROPERTY_DOCUMENT_TYPE, documentType);
                return this;
            }

            public Builder reference(final java.net.URI reference) {
                b.add(FhirPropertyNames.PROPERTY_REFERENCE, reference.toString());
                return this;
            }

            public Builder publicationDate(final java.time.Instant publicationDate) {
                b.add(FhirPropertyNames.PROPERTY_PUBLICATION_DATE, publicationDate.toString());
                return this;
            }

            public Builder presentationDate(final java.time.Instant presentationDate) {
                b.add(FhirPropertyNames.PROPERTY_PRESENTATION_DATE, presentationDate.toString());
                return this;
            }

            public ImmunizationEducation build() {
                return new ImmunizationEducation(b.build());
            }
        }
    }

    /**
     * Describes the event of a patient being administered a vaccine or a
     * record of an immunization as reported by a patient, a clinician or
     * another party.
     */
    public static class ImmunizationPerformer extends FhirObject {
        public static final String RESOURCE_TYPE = "ImmunizationPerformer";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ImmunizationPerformer(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Describes the type of performance (e.g. ordering provider,
         * administering provider, etc.).
         */
        public CodeableConcept function() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_FUNCTION);
        }

        /**
         * The practitioner or organization who performed the action.
         */
        public Reference actor() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_ACTOR);
        }

        public static final class Builder extends FhirObject.Builder<ImmunizationPerformer, ImmunizationPerformer.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder function(final CodeableConcept function) {
                b.add(FhirPropertyNames.PROPERTY_FUNCTION, function);
                return this;
            }

            public Builder actor(final Reference actor) {
                b.add(FhirPropertyNames.PROPERTY_ACTOR, actor);
                return this;
            }

            public ImmunizationPerformer build() {
                return new ImmunizationPerformer(b.build());
            }
        }
    }

    /**
     * Describes the event of a patient being administered a vaccine or a
     * record of an immunization as reported by a patient, a clinician or
     * another party.
     */
    public static class ImmunizationProtocolApplied extends FhirObject {
        public static final String RESOURCE_TYPE = "ImmunizationProtocolApplied";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ImmunizationProtocolApplied(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * One possible path to achieve presumed immunity against a disease -
         * within the context of an authority.
         */
        public String series() {
            return getString(FhirPropertyNames.PROPERTY_SERIES);
        }

        /**
         * Indicates the authority who published the protocol (e.g. ACIP) that is
         * being followed.
         */
        public Reference authority() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_AUTHORITY);
        }

        /**
         * The vaccine preventable disease the dose is being administered
         * against.
         */
        public java.util.List<CodeableConcept> targetDisease() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_TARGET_DISEASE);
        }

        /**
         * Nominal position in a series.
         */
        public Integer doseNumberPositiveInt() {
            return data.getInt(FhirPropertyNames.PROPERTY_DOSE_NUMBER_POSITIVE_INT);
        }

        /**
         * Nominal position in a series.
         */
        public String doseNumberString() {
            return getString(FhirPropertyNames.PROPERTY_DOSE_NUMBER_STRING);
        }

        /**
         * The recommended number of doses to achieve immunity.
         */
        public Integer seriesDosesPositiveInt() {
            return data.getInt(FhirPropertyNames.PROPERTY_SERIES_DOSES_POSITIVE_INT);
        }

        /**
         * The recommended number of doses to achieve immunity.
         */
        public String seriesDosesString() {
            return getString(FhirPropertyNames.PROPERTY_SERIES_DOSES_STRING);
        }

        public static final class Builder extends FhirObject.Builder<ImmunizationProtocolApplied, ImmunizationProtocolApplied.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder series(final String series) {
                b.add(FhirPropertyNames.PROPERTY_SERIES, series);
                return this;
            }

            public Builder authority(final Reference authority) {
                b.add(FhirPropertyNames.PROPERTY_AUTHORITY, authority);
                return this;
            }

            public Builder targetDisease(final java.util.List<CodeableConcept> targetDisease) {
                b.add(FhirPropertyNames.PROPERTY_TARGET_DISEASE, FhirObject.toArray(targetDisease));
                return this;
            }

            public Builder doseNumberPositiveInt(final Integer doseNumberPositiveInt) {
                b.add(FhirPropertyNames.PROPERTY_DOSE_NUMBER_POSITIVE_INT, doseNumberPositiveInt);
                return this;
            }

            public Builder doseNumberString(final String doseNumberString) {
                b.add(FhirPropertyNames.PROPERTY_DOSE_NUMBER_STRING, doseNumberString);
                return this;
            }

            public Builder seriesDosesPositiveInt(final Integer seriesDosesPositiveInt) {
                b.add(FhirPropertyNames.PROPERTY_SERIES_DOSES_POSITIVE_INT, seriesDosesPositiveInt);
                return this;
            }

            public Builder seriesDosesString(final String seriesDosesString) {
                b.add(FhirPropertyNames.PROPERTY_SERIES_DOSES_STRING, seriesDosesString);
                return this;
            }

            public ImmunizationProtocolApplied build() {
                return new ImmunizationProtocolApplied(b.build());
            }
        }
    }

    /**
     * Describes the event of a patient being administered a vaccine or a
     * record of an immunization as reported by a patient, a clinician or
     * another party.
     */
    public static class ImmunizationReaction extends FhirObject {
        public static final String RESOURCE_TYPE = "ImmunizationReaction";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ImmunizationReaction(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Date of reaction to the immunization.
         */
        public java.time.Instant date() {
            return getInstant(FhirPropertyNames.PROPERTY_DATE);
        }

        /**
         * Details of the reaction.
         */
        public Reference detail() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_DETAIL);
        }

        /**
         * Self-reported indicator.
         */
        public Boolean reported() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_REPORTED);
        }

        public static final class Builder extends FhirObject.Builder<ImmunizationReaction, ImmunizationReaction.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder date(final java.time.Instant date) {
                b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
                return this;
            }

            public Builder detail(final Reference detail) {
                b.add(FhirPropertyNames.PROPERTY_DETAIL, detail);
                return this;
            }

            public Builder reported(final Boolean reported) {
                b.add(FhirPropertyNames.PROPERTY_REPORTED, reported);
                return this;
            }

            public ImmunizationReaction build() {
                return new ImmunizationReaction(b.build());
            }
        }
    }
}
