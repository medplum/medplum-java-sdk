/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Identifies two or more records (resource instances) that refer to the
 * same real-world &quot;occurrence&quot;.
 */
public class Linkage extends DomainResource {
    public static final String RESOURCE_TYPE = "Linkage";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Linkage(final JsonObject data) {
        super(data);
    }

    /**
     * Indicates whether the asserted set of linkages are considered to be
     * &quot;in effect&quot;.
     */
    public Boolean active() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_ACTIVE);
    }

    /**
     * Identifies the user or organization responsible for asserting the
     * linkages as well as the user or organization who establishes the
     * context in which the nature of each linkage is evaluated.
     */
    public Reference author() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_AUTHOR);
    }

    /**
     * Identifies which record considered as the reference to the same
     * real-world occurrence as well as how the items should be evaluated
     * within the collection of linked items.
     */
    public java.util.List<LinkageItem> item() {
        return getList(LinkageItem.class, FhirPropertyNames.PROPERTY_ITEM);
    }

    public static final class Builder extends DomainResource.Builder<Linkage, Linkage.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder active(final Boolean active) {
            b.add(FhirPropertyNames.PROPERTY_ACTIVE, active);
            return this;
        }

        public Builder author(final Reference author) {
            b.add(FhirPropertyNames.PROPERTY_AUTHOR, author);
            return this;
        }

        public Builder item(final java.util.List<LinkageItem> item) {
            b.add(FhirPropertyNames.PROPERTY_ITEM, FhirObject.toArray(item));
            return this;
        }

        public Linkage build() {
            return new Linkage(b.build());
        }
    }

    /**
     * Identifies two or more records (resource instances) that refer to the
     * same real-world &quot;occurrence&quot;.
     */
    public static class LinkageItem extends FhirObject {
        public static final String RESOURCE_TYPE = "LinkageItem";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public LinkageItem(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Distinguishes which item is &quot;source of truth&quot; (if any) and which items
         * are no longer considered to be current representations.
         */
        public String type() {
            return getString(FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The resource instance being linked as part of the group.
         */
        public Reference resource() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_RESOURCE);
        }

        public static final class Builder extends FhirObject.Builder<LinkageItem, LinkageItem.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final String type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder resource(final Reference resource) {
                b.add(FhirPropertyNames.PROPERTY_RESOURCE, resource);
                return this;
            }

            public LinkageItem build() {
                return new LinkageItem(b.build());
            }
        }
    }
}
