/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * This resource provides eligibility and plan details from the
 * processing of an CoverageEligibilityRequest resource.
 */
public class CoverageEligibilityResponse extends DomainResource {
    public static final String RESOURCE_TYPE = "CoverageEligibilityResponse";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public CoverageEligibilityResponse(final JsonObject data) {
        super(data);
    }

    /**
     * A unique identifier assigned to this coverage eligiblity request.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The status of the resource instance.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * Code to specify whether requesting: prior authorization requirements
     * for some service categories or billing codes; benefits for coverages
     * specified or discovered; discovery and return of coverages for the
     * patient; and/or validation that the specified coverage is in-force at
     * the date/period specified or 'now' if not specified.
     */
    public java.util.List<String> purpose() {
        return getList(String.class, FhirPropertyNames.PROPERTY_PURPOSE);
    }

    /**
     * The party who is the beneficiary of the supplied coverage and for whom
     * eligibility is sought.
     */
    public Reference patient() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PATIENT);
    }

    /**
     * The date or dates when the enclosed suite of services were performed
     * or completed.
     */
    public String servicedDate() {
        return getString(FhirPropertyNames.PROPERTY_SERVICED_DATE);
    }

    /**
     * The date or dates when the enclosed suite of services were performed
     * or completed.
     */
    public Period servicedPeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_SERVICED_PERIOD);
    }

    /**
     * The date this resource was created.
     */
    public java.time.Instant created() {
        return getInstant(FhirPropertyNames.PROPERTY_CREATED);
    }

    /**
     * The provider which is responsible for the request.
     */
    public Reference requestor() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_REQUESTOR);
    }

    /**
     * Reference to the original request resource.
     */
    public Reference request() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_REQUEST);
    }

    /**
     * The outcome of the request processing.
     */
    public String outcome() {
        return getString(FhirPropertyNames.PROPERTY_OUTCOME);
    }

    /**
     * A human readable description of the status of the adjudication.
     */
    public String disposition() {
        return getString(FhirPropertyNames.PROPERTY_DISPOSITION);
    }

    /**
     * The Insurer who issued the coverage in question and is the author of
     * the response.
     */
    public Reference insurer() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_INSURER);
    }

    /**
     * Financial instruments for reimbursement for the health care products
     * and services.
     */
    public java.util.List<CoverageEligibilityResponseInsurance> insurance() {
        return getList(CoverageEligibilityResponseInsurance.class, FhirPropertyNames.PROPERTY_INSURANCE);
    }

    /**
     * A reference from the Insurer to which these services pertain to be
     * used on further communication and as proof that the request occurred.
     */
    public String preAuthRef() {
        return getString(FhirPropertyNames.PROPERTY_PRE_AUTH_REF);
    }

    /**
     * A code for the form to be used for printing the content.
     */
    public CodeableConcept form() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_FORM);
    }

    /**
     * Errors encountered during the processing of the request.
     */
    public java.util.List<CoverageEligibilityResponseError> error() {
        return getList(CoverageEligibilityResponseError.class, FhirPropertyNames.PROPERTY_ERROR);
    }

    public static final class Builder extends DomainResource.Builder<CoverageEligibilityResponse, CoverageEligibilityResponse.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder purpose(final java.util.List<String> purpose) {
            b.add(FhirPropertyNames.PROPERTY_PURPOSE, FhirObject.toStringArray(purpose));
            return this;
        }

        public Builder patient(final Reference patient) {
            b.add(FhirPropertyNames.PROPERTY_PATIENT, patient);
            return this;
        }

        public Builder servicedDate(final String servicedDate) {
            b.add(FhirPropertyNames.PROPERTY_SERVICED_DATE, servicedDate);
            return this;
        }

        public Builder servicedPeriod(final Period servicedPeriod) {
            b.add(FhirPropertyNames.PROPERTY_SERVICED_PERIOD, servicedPeriod);
            return this;
        }

        public Builder created(final java.time.Instant created) {
            b.add(FhirPropertyNames.PROPERTY_CREATED, created.toString());
            return this;
        }

        public Builder requestor(final Reference requestor) {
            b.add(FhirPropertyNames.PROPERTY_REQUESTOR, requestor);
            return this;
        }

        public Builder request(final Reference request) {
            b.add(FhirPropertyNames.PROPERTY_REQUEST, request);
            return this;
        }

        public Builder outcome(final String outcome) {
            b.add(FhirPropertyNames.PROPERTY_OUTCOME, outcome);
            return this;
        }

        public Builder disposition(final String disposition) {
            b.add(FhirPropertyNames.PROPERTY_DISPOSITION, disposition);
            return this;
        }

        public Builder insurer(final Reference insurer) {
            b.add(FhirPropertyNames.PROPERTY_INSURER, insurer);
            return this;
        }

        public Builder insurance(final java.util.List<CoverageEligibilityResponseInsurance> insurance) {
            b.add(FhirPropertyNames.PROPERTY_INSURANCE, FhirObject.toArray(insurance));
            return this;
        }

        public Builder preAuthRef(final String preAuthRef) {
            b.add(FhirPropertyNames.PROPERTY_PRE_AUTH_REF, preAuthRef);
            return this;
        }

        public Builder form(final CodeableConcept form) {
            b.add(FhirPropertyNames.PROPERTY_FORM, form);
            return this;
        }

        public Builder error(final java.util.List<CoverageEligibilityResponseError> error) {
            b.add(FhirPropertyNames.PROPERTY_ERROR, FhirObject.toArray(error));
            return this;
        }

        public CoverageEligibilityResponse build() {
            return new CoverageEligibilityResponse(b.build());
        }
    }

    /**
     * This resource provides eligibility and plan details from the
     * processing of an CoverageEligibilityRequest resource.
     */
    public static class CoverageEligibilityResponseBenefit extends FhirObject {
        public static final String RESOURCE_TYPE = "CoverageEligibilityResponseBenefit";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public CoverageEligibilityResponseBenefit(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Classification of benefit being provided.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The quantity of the benefit which is permitted under the coverage.
         */
        public Integer allowedUnsignedInt() {
            return data.getInt(FhirPropertyNames.PROPERTY_ALLOWED_UNSIGNED_INT);
        }

        /**
         * The quantity of the benefit which is permitted under the coverage.
         */
        public String allowedString() {
            return getString(FhirPropertyNames.PROPERTY_ALLOWED_STRING);
        }

        /**
         * The quantity of the benefit which is permitted under the coverage.
         */
        public Money allowedMoney() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_ALLOWED_MONEY);
        }

        /**
         * The quantity of the benefit which have been consumed to date.
         */
        public Integer usedUnsignedInt() {
            return data.getInt(FhirPropertyNames.PROPERTY_USED_UNSIGNED_INT);
        }

        /**
         * The quantity of the benefit which have been consumed to date.
         */
        public String usedString() {
            return getString(FhirPropertyNames.PROPERTY_USED_STRING);
        }

        /**
         * The quantity of the benefit which have been consumed to date.
         */
        public Money usedMoney() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_USED_MONEY);
        }

        public static final class Builder extends FhirObject.Builder<CoverageEligibilityResponseBenefit, CoverageEligibilityResponseBenefit.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder allowedUnsignedInt(final Integer allowedUnsignedInt) {
                b.add(FhirPropertyNames.PROPERTY_ALLOWED_UNSIGNED_INT, allowedUnsignedInt);
                return this;
            }

            public Builder allowedString(final String allowedString) {
                b.add(FhirPropertyNames.PROPERTY_ALLOWED_STRING, allowedString);
                return this;
            }

            public Builder allowedMoney(final Money allowedMoney) {
                b.add(FhirPropertyNames.PROPERTY_ALLOWED_MONEY, allowedMoney);
                return this;
            }

            public Builder usedUnsignedInt(final Integer usedUnsignedInt) {
                b.add(FhirPropertyNames.PROPERTY_USED_UNSIGNED_INT, usedUnsignedInt);
                return this;
            }

            public Builder usedString(final String usedString) {
                b.add(FhirPropertyNames.PROPERTY_USED_STRING, usedString);
                return this;
            }

            public Builder usedMoney(final Money usedMoney) {
                b.add(FhirPropertyNames.PROPERTY_USED_MONEY, usedMoney);
                return this;
            }

            public CoverageEligibilityResponseBenefit build() {
                return new CoverageEligibilityResponseBenefit(b.build());
            }
        }
    }

    /**
     * This resource provides eligibility and plan details from the
     * processing of an CoverageEligibilityRequest resource.
     */
    public static class CoverageEligibilityResponseError extends FhirObject {
        public static final String RESOURCE_TYPE = "CoverageEligibilityResponseError";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public CoverageEligibilityResponseError(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * An error code,from a specified code system, which details why the
         * eligibility check could not be performed.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        public static final class Builder extends FhirObject.Builder<CoverageEligibilityResponseError, CoverageEligibilityResponseError.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public CoverageEligibilityResponseError build() {
                return new CoverageEligibilityResponseError(b.build());
            }
        }
    }

    /**
     * This resource provides eligibility and plan details from the
     * processing of an CoverageEligibilityRequest resource.
     */
    public static class CoverageEligibilityResponseInsurance extends FhirObject {
        public static final String RESOURCE_TYPE = "CoverageEligibilityResponseInsurance";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public CoverageEligibilityResponseInsurance(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Reference to the insurance card level information contained in the
         * Coverage resource. The coverage issuing insurer will use these details
         * to locate the patient's actual coverage within the insurer's
         * information system.
         */
        public Reference coverage() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_COVERAGE);
        }

        /**
         * Flag indicating if the coverage provided is inforce currently if no
         * service date(s) specified or for the whole duration of the service
         * dates.
         */
        public Boolean inforce() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_INFORCE);
        }

        /**
         * The term of the benefits documented in this response.
         */
        public Period benefitPeriod() {
            return getObject(Period.class, FhirPropertyNames.PROPERTY_BENEFIT_PERIOD);
        }

        /**
         * Benefits and optionally current balances, and authorization details by
         * category or service.
         */
        public java.util.List<CoverageEligibilityResponseItem> item() {
            return getList(CoverageEligibilityResponseItem.class, FhirPropertyNames.PROPERTY_ITEM);
        }

        public static final class Builder extends FhirObject.Builder<CoverageEligibilityResponseInsurance, CoverageEligibilityResponseInsurance.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder coverage(final Reference coverage) {
                b.add(FhirPropertyNames.PROPERTY_COVERAGE, coverage);
                return this;
            }

            public Builder inforce(final Boolean inforce) {
                b.add(FhirPropertyNames.PROPERTY_INFORCE, inforce);
                return this;
            }

            public Builder benefitPeriod(final Period benefitPeriod) {
                b.add(FhirPropertyNames.PROPERTY_BENEFIT_PERIOD, benefitPeriod);
                return this;
            }

            public Builder item(final java.util.List<CoverageEligibilityResponseItem> item) {
                b.add(FhirPropertyNames.PROPERTY_ITEM, FhirObject.toArray(item));
                return this;
            }

            public CoverageEligibilityResponseInsurance build() {
                return new CoverageEligibilityResponseInsurance(b.build());
            }
        }
    }

    /**
     * This resource provides eligibility and plan details from the
     * processing of an CoverageEligibilityRequest resource.
     */
    public static class CoverageEligibilityResponseItem extends FhirObject {
        public static final String RESOURCE_TYPE = "CoverageEligibilityResponseItem";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public CoverageEligibilityResponseItem(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Code to identify the general type of benefits under which products and
         * services are provided.
         */
        public CodeableConcept category() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CATEGORY);
        }

        /**
         * This contains the product, service, drug or other billing code for the
         * item.
         */
        public CodeableConcept productOrService() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_PRODUCT_OR_SERVICE);
        }

        /**
         * Item typification or modifiers codes to convey additional context for
         * the product or service.
         */
        public java.util.List<CodeableConcept> modifier() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_MODIFIER);
        }

        /**
         * The practitioner who is eligible for the provision of the product or
         * service.
         */
        public Reference provider() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_PROVIDER);
        }

        /**
         * True if the indicated class of service is excluded from the plan,
         * missing or False indicates the product or service is included in the
         * coverage.
         */
        public Boolean excluded() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_EXCLUDED);
        }

        /**
         * A short name or tag for the benefit.
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * A richer description of the benefit or services covered.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * Is a flag to indicate whether the benefits refer to in-network
         * providers or out-of-network providers.
         */
        public CodeableConcept network() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_NETWORK);
        }

        /**
         * Indicates if the benefits apply to an individual or to the family.
         */
        public CodeableConcept unit() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_UNIT);
        }

        /**
         * The term or period of the values such as 'maximum lifetime benefit' or
         * 'maximum annual visits'.
         */
        public CodeableConcept term() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TERM);
        }

        /**
         * Benefits used to date.
         */
        public java.util.List<CoverageEligibilityResponseBenefit> benefit() {
            return getList(CoverageEligibilityResponseBenefit.class, FhirPropertyNames.PROPERTY_BENEFIT);
        }

        /**
         * A boolean flag indicating whether a preauthorization is required prior
         * to actual service delivery.
         */
        public Boolean authorizationRequired() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_AUTHORIZATION_REQUIRED);
        }

        /**
         * Codes or comments regarding information or actions associated with the
         * preauthorization.
         */
        public java.util.List<CodeableConcept> authorizationSupporting() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_AUTHORIZATION_SUPPORTING);
        }

        /**
         * A web location for obtaining requirements or descriptive information
         * regarding the preauthorization.
         */
        public java.net.URI authorizationUrl() {
            return getUri(FhirPropertyNames.PROPERTY_AUTHORIZATION_URL);
        }

        public static final class Builder extends FhirObject.Builder<CoverageEligibilityResponseItem, CoverageEligibilityResponseItem.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder category(final CodeableConcept category) {
                b.add(FhirPropertyNames.PROPERTY_CATEGORY, category);
                return this;
            }

            public Builder productOrService(final CodeableConcept productOrService) {
                b.add(FhirPropertyNames.PROPERTY_PRODUCT_OR_SERVICE, productOrService);
                return this;
            }

            public Builder modifier(final java.util.List<CodeableConcept> modifier) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER, FhirObject.toArray(modifier));
                return this;
            }

            public Builder provider(final Reference provider) {
                b.add(FhirPropertyNames.PROPERTY_PROVIDER, provider);
                return this;
            }

            public Builder excluded(final Boolean excluded) {
                b.add(FhirPropertyNames.PROPERTY_EXCLUDED, excluded);
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder network(final CodeableConcept network) {
                b.add(FhirPropertyNames.PROPERTY_NETWORK, network);
                return this;
            }

            public Builder unit(final CodeableConcept unit) {
                b.add(FhirPropertyNames.PROPERTY_UNIT, unit);
                return this;
            }

            public Builder term(final CodeableConcept term) {
                b.add(FhirPropertyNames.PROPERTY_TERM, term);
                return this;
            }

            public Builder benefit(final java.util.List<CoverageEligibilityResponseBenefit> benefit) {
                b.add(FhirPropertyNames.PROPERTY_BENEFIT, FhirObject.toArray(benefit));
                return this;
            }

            public Builder authorizationRequired(final Boolean authorizationRequired) {
                b.add(FhirPropertyNames.PROPERTY_AUTHORIZATION_REQUIRED, authorizationRequired);
                return this;
            }

            public Builder authorizationSupporting(final java.util.List<CodeableConcept> authorizationSupporting) {
                b.add(FhirPropertyNames.PROPERTY_AUTHORIZATION_SUPPORTING, FhirObject.toArray(authorizationSupporting));
                return this;
            }

            public Builder authorizationUrl(final java.net.URI authorizationUrl) {
                b.add(FhirPropertyNames.PROPERTY_AUTHORIZATION_URL, authorizationUrl.toString());
                return this;
            }

            public CoverageEligibilityResponseItem build() {
                return new CoverageEligibilityResponseItem(b.build());
            }
        }
    }
}
