/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * The MeasureReport resource contains the results of the calculation of
 * a measure; and optionally a reference to the resources involved in
 * that calculation.
 */
public class MeasureReport extends DomainResource {
    public static final String RESOURCE_TYPE = "MeasureReport";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public MeasureReport(final JsonObject data) {
        super(data);
    }

    /**
     * A formal identifier that is used to identify this MeasureReport when
     * it is represented in other formats or referenced in a specification,
     * model, design or an instance.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The MeasureReport status. No data will be available until the
     * MeasureReport status is complete.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * The type of measure report. This may be an individual report, which
     * provides the score for the measure for an individual member of the
     * population; a subject-listing, which returns the list of members that
     * meet the various criteria in the measure; a summary report, which
     * returns a population count for each of the criteria in the measure; or
     * a data-collection, which enables the MeasureReport to be used to
     * exchange the data-of-interest for a quality measure.
     */
    public String type() {
        return getString(FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * A reference to the Measure that was calculated to produce this report.
     */
    public String measure() {
        return getString(FhirPropertyNames.PROPERTY_MEASURE);
    }

    /**
     * Optional subject identifying the individual or individuals the report
     * is for.
     */
    public Reference subject() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * The date this measure report was generated.
     */
    public java.time.Instant date() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE);
    }

    /**
     * The individual, location, or organization that is reporting the data.
     */
    public Reference reporter() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_REPORTER);
    }

    /**
     * The reporting period for which the report was calculated.
     */
    public Period period() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_PERIOD);
    }

    /**
     * Whether improvement in the measure is noted by an increase or decrease
     * in the measure score.
     */
    public CodeableConcept improvementNotation() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_IMPROVEMENT_NOTATION);
    }

    /**
     * The results of the calculation, one for each population group in the
     * measure.
     */
    public java.util.List<MeasureReportGroup> group() {
        return getList(MeasureReportGroup.class, FhirPropertyNames.PROPERTY_GROUP);
    }

    /**
     * A reference to a Bundle containing the Resources that were used in the
     * calculation of this measure.
     */
    public java.util.List<Reference> evaluatedResource() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_EVALUATED_RESOURCE);
    }

    public static final class Builder extends DomainResource.Builder<MeasureReport, MeasureReport.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder type(final String type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, type);
            return this;
        }

        public Builder measure(final String measure) {
            b.add(FhirPropertyNames.PROPERTY_MEASURE, measure);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder reporter(final Reference reporter) {
            b.add(FhirPropertyNames.PROPERTY_REPORTER, reporter);
            return this;
        }

        public Builder period(final Period period) {
            b.add(FhirPropertyNames.PROPERTY_PERIOD, period);
            return this;
        }

        public Builder improvementNotation(final CodeableConcept improvementNotation) {
            b.add(FhirPropertyNames.PROPERTY_IMPROVEMENT_NOTATION, improvementNotation);
            return this;
        }

        public Builder group(final java.util.List<MeasureReportGroup> group) {
            b.add(FhirPropertyNames.PROPERTY_GROUP, FhirObject.toArray(group));
            return this;
        }

        public Builder evaluatedResource(final java.util.List<Reference> evaluatedResource) {
            b.add(FhirPropertyNames.PROPERTY_EVALUATED_RESOURCE, FhirObject.toArray(evaluatedResource));
            return this;
        }

        public MeasureReport build() {
            return new MeasureReport(b.build());
        }
    }

    /**
     * The MeasureReport resource contains the results of the calculation of
     * a measure; and optionally a reference to the resources involved in
     * that calculation.
     */
    public static class MeasureReportComponent extends FhirObject {
        public static final String RESOURCE_TYPE = "MeasureReportComponent";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MeasureReportComponent(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The code for the stratum component value.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * The stratum component value.
         */
        public CodeableConcept value() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_VALUE);
        }

        public static final class Builder extends FhirObject.Builder<MeasureReportComponent, MeasureReportComponent.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder value(final CodeableConcept value) {
                b.add(FhirPropertyNames.PROPERTY_VALUE, value);
                return this;
            }

            public MeasureReportComponent build() {
                return new MeasureReportComponent(b.build());
            }
        }
    }

    /**
     * The MeasureReport resource contains the results of the calculation of
     * a measure; and optionally a reference to the resources involved in
     * that calculation.
     */
    public static class MeasureReportGroup extends FhirObject {
        public static final String RESOURCE_TYPE = "MeasureReportGroup";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MeasureReportGroup(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The meaning of the population group as defined in the measure
         * definition.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * The populations that make up the population group, one for each type
         * of population appropriate for the measure.
         */
        public java.util.List<MeasureReportPopulation> population() {
            return getList(MeasureReportPopulation.class, FhirPropertyNames.PROPERTY_POPULATION);
        }

        /**
         * The measure score for this population group, calculated as appropriate
         * for the measure type and scoring method, and based on the contents of
         * the populations defined in the group.
         */
        public Quantity measureScore() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_MEASURE_SCORE);
        }

        /**
         * When a measure includes multiple stratifiers, there will be a
         * stratifier group for each stratifier defined by the measure.
         */
        public java.util.List<MeasureReportStratifier> stratifier() {
            return getList(MeasureReportStratifier.class, FhirPropertyNames.PROPERTY_STRATIFIER);
        }

        public static final class Builder extends FhirObject.Builder<MeasureReportGroup, MeasureReportGroup.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder population(final java.util.List<MeasureReportPopulation> population) {
                b.add(FhirPropertyNames.PROPERTY_POPULATION, FhirObject.toArray(population));
                return this;
            }

            public Builder measureScore(final Quantity measureScore) {
                b.add(FhirPropertyNames.PROPERTY_MEASURE_SCORE, measureScore);
                return this;
            }

            public Builder stratifier(final java.util.List<MeasureReportStratifier> stratifier) {
                b.add(FhirPropertyNames.PROPERTY_STRATIFIER, FhirObject.toArray(stratifier));
                return this;
            }

            public MeasureReportGroup build() {
                return new MeasureReportGroup(b.build());
            }
        }
    }

    /**
     * The MeasureReport resource contains the results of the calculation of
     * a measure; and optionally a reference to the resources involved in
     * that calculation.
     */
    public static class MeasureReportPopulation extends FhirObject {
        public static final String RESOURCE_TYPE = "MeasureReportPopulation";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MeasureReportPopulation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The type of the population.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * The number of members of the population.
         */
        public Integer count() {
            return data.getInt(FhirPropertyNames.PROPERTY_COUNT);
        }

        /**
         * This element refers to a List of subject level MeasureReport
         * resources, one for each subject in this population.
         */
        public Reference subjectResults() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT_RESULTS);
        }

        public static final class Builder extends FhirObject.Builder<MeasureReportPopulation, MeasureReportPopulation.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder count(final Integer count) {
                b.add(FhirPropertyNames.PROPERTY_COUNT, count);
                return this;
            }

            public Builder subjectResults(final Reference subjectResults) {
                b.add(FhirPropertyNames.PROPERTY_SUBJECT_RESULTS, subjectResults);
                return this;
            }

            public MeasureReportPopulation build() {
                return new MeasureReportPopulation(b.build());
            }
        }
    }

    /**
     * The MeasureReport resource contains the results of the calculation of
     * a measure; and optionally a reference to the resources involved in
     * that calculation.
     */
    public static class MeasureReportPopulation1 extends FhirObject {
        public static final String RESOURCE_TYPE = "MeasureReportPopulation1";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MeasureReportPopulation1(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The type of the population.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * The number of members of the population in this stratum.
         */
        public Integer count() {
            return data.getInt(FhirPropertyNames.PROPERTY_COUNT);
        }

        /**
         * This element refers to a List of subject level MeasureReport
         * resources, one for each subject in this population in this stratum.
         */
        public Reference subjectResults() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT_RESULTS);
        }

        public static final class Builder extends FhirObject.Builder<MeasureReportPopulation1, MeasureReportPopulation1.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder count(final Integer count) {
                b.add(FhirPropertyNames.PROPERTY_COUNT, count);
                return this;
            }

            public Builder subjectResults(final Reference subjectResults) {
                b.add(FhirPropertyNames.PROPERTY_SUBJECT_RESULTS, subjectResults);
                return this;
            }

            public MeasureReportPopulation1 build() {
                return new MeasureReportPopulation1(b.build());
            }
        }
    }

    /**
     * The MeasureReport resource contains the results of the calculation of
     * a measure; and optionally a reference to the resources involved in
     * that calculation.
     */
    public static class MeasureReportStratifier extends FhirObject {
        public static final String RESOURCE_TYPE = "MeasureReportStratifier";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MeasureReportStratifier(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The meaning of this stratifier, as defined in the measure definition.
         */
        public java.util.List<CodeableConcept> code() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * This element contains the results for a single stratum within the
         * stratifier. For example, when stratifying on administrative gender,
         * there will be four strata, one for each possible gender value.
         */
        public java.util.List<MeasureReportStratum> stratum() {
            return getList(MeasureReportStratum.class, FhirPropertyNames.PROPERTY_STRATUM);
        }

        public static final class Builder extends FhirObject.Builder<MeasureReportStratifier, MeasureReportStratifier.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final java.util.List<CodeableConcept> code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, FhirObject.toArray(code));
                return this;
            }

            public Builder stratum(final java.util.List<MeasureReportStratum> stratum) {
                b.add(FhirPropertyNames.PROPERTY_STRATUM, FhirObject.toArray(stratum));
                return this;
            }

            public MeasureReportStratifier build() {
                return new MeasureReportStratifier(b.build());
            }
        }
    }

    /**
     * The MeasureReport resource contains the results of the calculation of
     * a measure; and optionally a reference to the resources involved in
     * that calculation.
     */
    public static class MeasureReportStratum extends FhirObject {
        public static final String RESOURCE_TYPE = "MeasureReportStratum";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MeasureReportStratum(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The value for this stratum, expressed as a CodeableConcept. When
         * defining stratifiers on complex values, the value must be rendered
         * such that the value for each stratum within the stratifier is unique.
         */
        public CodeableConcept value() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_VALUE);
        }

        /**
         * A stratifier component value.
         */
        public java.util.List<MeasureReportComponent> component() {
            return getList(MeasureReportComponent.class, FhirPropertyNames.PROPERTY_COMPONENT);
        }

        /**
         * The populations that make up the stratum, one for each type of
         * population appropriate to the measure.
         */
        public java.util.List<MeasureReportPopulation1> population() {
            return getList(MeasureReportPopulation1.class, FhirPropertyNames.PROPERTY_POPULATION);
        }

        /**
         * The measure score for this stratum, calculated as appropriate for the
         * measure type and scoring method, and based on only the members of this
         * stratum.
         */
        public Quantity measureScore() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_MEASURE_SCORE);
        }

        public static final class Builder extends FhirObject.Builder<MeasureReportStratum, MeasureReportStratum.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder value(final CodeableConcept value) {
                b.add(FhirPropertyNames.PROPERTY_VALUE, value);
                return this;
            }

            public Builder component(final java.util.List<MeasureReportComponent> component) {
                b.add(FhirPropertyNames.PROPERTY_COMPONENT, FhirObject.toArray(component));
                return this;
            }

            public Builder population(final java.util.List<MeasureReportPopulation1> population) {
                b.add(FhirPropertyNames.PROPERTY_POPULATION, FhirObject.toArray(population));
                return this;
            }

            public Builder measureScore(final Quantity measureScore) {
                b.add(FhirPropertyNames.PROPERTY_MEASURE_SCORE, measureScore);
                return this;
            }

            public MeasureReportStratum build() {
                return new MeasureReportStratum(b.build());
            }
        }
    }
}
