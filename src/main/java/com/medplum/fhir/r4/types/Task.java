/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A task to be performed.
 */
public class Task extends DomainResource {
    public static final String RESOURCE_TYPE = "Task";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Task(final JsonObject data) {
        super(data);
    }

    /**
     * The business identifier for this task.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The URL pointing to a *FHIR*-defined protocol, guideline, orderset or
     * other definition that is adhered to in whole or in part by this Task.
     */
    public String instantiatesCanonical() {
        return getString(FhirPropertyNames.PROPERTY_INSTANTIATES_CANONICAL);
    }

    /**
     * The URL pointing to an *externally* maintained  protocol, guideline,
     * orderset or other definition that is adhered to in whole or in part by
     * this Task.
     */
    public java.net.URI instantiatesUri() {
        return getUri(FhirPropertyNames.PROPERTY_INSTANTIATES_URI);
    }

    /**
     * BasedOn refers to a higher-level authorization that triggered the
     * creation of the task.  It references a &quot;request&quot; resource such as a
     * ServiceRequest, MedicationRequest, ServiceRequest, CarePlan, etc.
     * which is distinct from the &quot;request&quot; resource the task is seeking to
     * fulfill.  This latter resource is referenced by FocusOn.  For example,
     * based on a ServiceRequest (= BasedOn), a task is created to fulfill a
     * procedureRequest ( = FocusOn ) to collect a specimen from a patient.
     */
    public java.util.List<Reference> basedOn() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_BASED_ON);
    }

    /**
     * An identifier that links together multiple tasks and other requests
     * that were created in the same context.
     */
    public Identifier groupIdentifier() {
        return getObject(Identifier.class, FhirPropertyNames.PROPERTY_GROUP_IDENTIFIER);
    }

    /**
     * Task that this particular task is part of.
     */
    public java.util.List<Reference> partOf() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_PART_OF);
    }

    /**
     * The current status of the task.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * An explanation as to why this task is held, failed, was refused, etc.
     */
    public CodeableConcept statusReason() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_STATUS_REASON);
    }

    /**
     * Contains business-specific nuances of the business state.
     */
    public CodeableConcept businessStatus() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_BUSINESS_STATUS);
    }

    /**
     * Indicates the &quot;level&quot; of actionability associated with the Task, i.e.
     * i+R[9]Cs this a proposed task, a planned task, an actionable task,
     * etc.
     */
    public String intent() {
        return getString(FhirPropertyNames.PROPERTY_INTENT);
    }

    /**
     * Indicates how quickly the Task should be addressed with respect to
     * other requests.
     */
    public String priority() {
        return getString(FhirPropertyNames.PROPERTY_PRIORITY);
    }

    /**
     * A name or code (or both) briefly describing what the task involves.
     */
    public CodeableConcept code() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
    }

    /**
     * A free-text description of what is to be performed.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * The request being actioned or the resource being manipulated by this
     * task.
     */
    public Reference focus() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_FOCUS);
    }

    /**
     * The entity who benefits from the performance of the service specified
     * in the task (e.g., the patient).
     */
    public Reference forValue() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_FOR);
    }

    /**
     * The healthcare event  (e.g. a patient and healthcare provider
     * interaction) during which this task was created.
     */
    public Reference encounter() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ENCOUNTER);
    }

    /**
     * Identifies the time action was first taken against the task (start)
     * and/or the time final action was taken against the task prior to
     * marking it as completed (end).
     */
    public Period executionPeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_EXECUTION_PERIOD);
    }

    /**
     * The date and time this task was created.
     */
    public java.time.Instant authoredOn() {
        return getInstant(FhirPropertyNames.PROPERTY_AUTHORED_ON);
    }

    /**
     * The date and time of last modification to this task.
     */
    public java.time.Instant lastModified() {
        return getInstant(FhirPropertyNames.PROPERTY_LAST_MODIFIED);
    }

    /**
     * The creator of the task.
     */
    public Reference requester() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_REQUESTER);
    }

    /**
     * The kind of participant that should perform the task.
     */
    public java.util.List<CodeableConcept> performerType() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_PERFORMER_TYPE);
    }

    /**
     * Individual organization or Device currently responsible for task
     * execution.
     */
    public Reference owner() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_OWNER);
    }

    /**
     * Principal physical location where the this task is performed.
     */
    public Reference location() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_LOCATION);
    }

    /**
     * A description or code indicating why this task needs to be performed.
     */
    public CodeableConcept reasonCode() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_REASON_CODE);
    }

    /**
     * A resource reference indicating why this task needs to be performed.
     */
    public Reference reasonReference() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_REASON_REFERENCE);
    }

    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or
     * pre-determinations that may be relevant to the Task.
     */
    public java.util.List<Reference> insurance() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_INSURANCE);
    }

    /**
     * Free-text information captured about the task as it progresses.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    /**
     * Links to Provenance records for past versions of this Task that
     * identify key state transitions or updates that are likely to be
     * relevant to a user looking at the current version of the task.
     */
    public java.util.List<Reference> relevantHistory() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_RELEVANT_HISTORY);
    }

    /**
     * If the Task.focus is a request resource and the task is seeking
     * fulfillment (i.e. is asking for the request to be actioned), this
     * element identifies any limitations on what parts of the referenced
     * request should be actioned.
     */
    public TaskRestriction restriction() {
        return getObject(TaskRestriction.class, FhirPropertyNames.PROPERTY_RESTRICTION);
    }

    /**
     * Additional information that may be needed in the execution of the
     * task.
     */
    public java.util.List<TaskInput> input() {
        return getList(TaskInput.class, FhirPropertyNames.PROPERTY_INPUT);
    }

    /**
     * Outputs produced by the Task.
     */
    public java.util.List<TaskOutput> output() {
        return getList(TaskOutput.class, FhirPropertyNames.PROPERTY_OUTPUT);
    }

    public static final class Builder extends DomainResource.Builder<Task, Task.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder instantiatesCanonical(final String instantiatesCanonical) {
            b.add(FhirPropertyNames.PROPERTY_INSTANTIATES_CANONICAL, instantiatesCanonical);
            return this;
        }

        public Builder instantiatesUri(final java.net.URI instantiatesUri) {
            b.add(FhirPropertyNames.PROPERTY_INSTANTIATES_URI, instantiatesUri.toString());
            return this;
        }

        public Builder basedOn(final java.util.List<Reference> basedOn) {
            b.add(FhirPropertyNames.PROPERTY_BASED_ON, FhirObject.toArray(basedOn));
            return this;
        }

        public Builder groupIdentifier(final Identifier groupIdentifier) {
            b.add(FhirPropertyNames.PROPERTY_GROUP_IDENTIFIER, groupIdentifier);
            return this;
        }

        public Builder partOf(final java.util.List<Reference> partOf) {
            b.add(FhirPropertyNames.PROPERTY_PART_OF, FhirObject.toArray(partOf));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder statusReason(final CodeableConcept statusReason) {
            b.add(FhirPropertyNames.PROPERTY_STATUS_REASON, statusReason);
            return this;
        }

        public Builder businessStatus(final CodeableConcept businessStatus) {
            b.add(FhirPropertyNames.PROPERTY_BUSINESS_STATUS, businessStatus);
            return this;
        }

        public Builder intent(final String intent) {
            b.add(FhirPropertyNames.PROPERTY_INTENT, intent);
            return this;
        }

        public Builder priority(final String priority) {
            b.add(FhirPropertyNames.PROPERTY_PRIORITY, priority);
            return this;
        }

        public Builder code(final CodeableConcept code) {
            b.add(FhirPropertyNames.PROPERTY_CODE, code);
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder focus(final Reference focus) {
            b.add(FhirPropertyNames.PROPERTY_FOCUS, focus);
            return this;
        }

        public Builder forValue(final Reference forValue) {
            b.add(FhirPropertyNames.PROPERTY_FOR, forValue);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(FhirPropertyNames.PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder executionPeriod(final Period executionPeriod) {
            b.add(FhirPropertyNames.PROPERTY_EXECUTION_PERIOD, executionPeriod);
            return this;
        }

        public Builder authoredOn(final java.time.Instant authoredOn) {
            b.add(FhirPropertyNames.PROPERTY_AUTHORED_ON, authoredOn.toString());
            return this;
        }

        public Builder lastModified(final java.time.Instant lastModified) {
            b.add(FhirPropertyNames.PROPERTY_LAST_MODIFIED, lastModified.toString());
            return this;
        }

        public Builder requester(final Reference requester) {
            b.add(FhirPropertyNames.PROPERTY_REQUESTER, requester);
            return this;
        }

        public Builder performerType(final java.util.List<CodeableConcept> performerType) {
            b.add(FhirPropertyNames.PROPERTY_PERFORMER_TYPE, FhirObject.toArray(performerType));
            return this;
        }

        public Builder owner(final Reference owner) {
            b.add(FhirPropertyNames.PROPERTY_OWNER, owner);
            return this;
        }

        public Builder location(final Reference location) {
            b.add(FhirPropertyNames.PROPERTY_LOCATION, location);
            return this;
        }

        public Builder reasonCode(final CodeableConcept reasonCode) {
            b.add(FhirPropertyNames.PROPERTY_REASON_CODE, reasonCode);
            return this;
        }

        public Builder reasonReference(final Reference reasonReference) {
            b.add(FhirPropertyNames.PROPERTY_REASON_REFERENCE, reasonReference);
            return this;
        }

        public Builder insurance(final java.util.List<Reference> insurance) {
            b.add(FhirPropertyNames.PROPERTY_INSURANCE, FhirObject.toArray(insurance));
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder relevantHistory(final java.util.List<Reference> relevantHistory) {
            b.add(FhirPropertyNames.PROPERTY_RELEVANT_HISTORY, FhirObject.toArray(relevantHistory));
            return this;
        }

        public Builder restriction(final TaskRestriction restriction) {
            b.add(FhirPropertyNames.PROPERTY_RESTRICTION, restriction);
            return this;
        }

        public Builder input(final java.util.List<TaskInput> input) {
            b.add(FhirPropertyNames.PROPERTY_INPUT, FhirObject.toArray(input));
            return this;
        }

        public Builder output(final java.util.List<TaskOutput> output) {
            b.add(FhirPropertyNames.PROPERTY_OUTPUT, FhirObject.toArray(output));
            return this;
        }

        public Task build() {
            return new Task(b.build());
        }
    }

    /**
     * A task to be performed.
     */
    public static class TaskInput extends FhirObject {
        public static final String RESOURCE_TYPE = "TaskInput";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TaskInput(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A code or description indicating how the input is intended to be used
         * as part of the task execution.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueBase64Binary() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_BASE64_BINARY);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Boolean valueBoolean() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_VALUE_BOOLEAN);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueCanonical() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_CANONICAL);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueCode() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_CODE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueDate() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_DATE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueDateTime() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_DATE_TIME);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Integer valueDecimal() {
            return data.getInt(FhirPropertyNames.PROPERTY_VALUE_DECIMAL);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueId() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_ID);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueInstant() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_INSTANT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Integer valueInteger() {
            return data.getInt(FhirPropertyNames.PROPERTY_VALUE_INTEGER);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueMarkdown() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_MARKDOWN);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueOid() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_OID);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Integer valuePositiveInt() {
            return data.getInt(FhirPropertyNames.PROPERTY_VALUE_POSITIVE_INT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueString() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_STRING);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueTime() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_TIME);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Integer valueUnsignedInt() {
            return data.getInt(FhirPropertyNames.PROPERTY_VALUE_UNSIGNED_INT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueUri() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_URI);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueUrl() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_URL);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueUuid() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_UUID);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Address valueAddress() {
            return getObject(Address.class, FhirPropertyNames.PROPERTY_VALUE_ADDRESS);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Age valueAge() {
            return getObject(Age.class, FhirPropertyNames.PROPERTY_VALUE_AGE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Annotation valueAnnotation() {
            return getObject(Annotation.class, FhirPropertyNames.PROPERTY_VALUE_ANNOTATION);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Attachment valueAttachment() {
            return getObject(Attachment.class, FhirPropertyNames.PROPERTY_VALUE_ATTACHMENT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public CodeableConcept valueCodeableConcept() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_VALUE_CODEABLE_CONCEPT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Coding valueCoding() {
            return getObject(Coding.class, FhirPropertyNames.PROPERTY_VALUE_CODING);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public ContactPoint valueContactPoint() {
            return getObject(ContactPoint.class, FhirPropertyNames.PROPERTY_VALUE_CONTACT_POINT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Count valueCount() {
            return getObject(Count.class, FhirPropertyNames.PROPERTY_VALUE_COUNT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Distance valueDistance() {
            return getObject(Distance.class, FhirPropertyNames.PROPERTY_VALUE_DISTANCE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Duration valueDuration() {
            return getObject(Duration.class, FhirPropertyNames.PROPERTY_VALUE_DURATION);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public HumanName valueHumanName() {
            return getObject(HumanName.class, FhirPropertyNames.PROPERTY_VALUE_HUMAN_NAME);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Identifier valueIdentifier() {
            return getObject(Identifier.class, FhirPropertyNames.PROPERTY_VALUE_IDENTIFIER);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Money valueMoney() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_VALUE_MONEY);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Period valuePeriod() {
            return getObject(Period.class, FhirPropertyNames.PROPERTY_VALUE_PERIOD);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Quantity valueQuantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_VALUE_QUANTITY);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Range valueRange() {
            return getObject(Range.class, FhirPropertyNames.PROPERTY_VALUE_RANGE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Ratio valueRatio() {
            return getObject(Ratio.class, FhirPropertyNames.PROPERTY_VALUE_RATIO);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Reference valueReference() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_VALUE_REFERENCE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public SampledData valueSampledData() {
            return getObject(SampledData.class, FhirPropertyNames.PROPERTY_VALUE_SAMPLED_DATA);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Signature valueSignature() {
            return getObject(Signature.class, FhirPropertyNames.PROPERTY_VALUE_SIGNATURE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Timing valueTiming() {
            return getObject(Timing.class, FhirPropertyNames.PROPERTY_VALUE_TIMING);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public ContactDetail valueContactDetail() {
            return getObject(ContactDetail.class, FhirPropertyNames.PROPERTY_VALUE_CONTACT_DETAIL);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Contributor valueContributor() {
            return getObject(Contributor.class, FhirPropertyNames.PROPERTY_VALUE_CONTRIBUTOR);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public DataRequirement valueDataRequirement() {
            return getObject(DataRequirement.class, FhirPropertyNames.PROPERTY_VALUE_DATA_REQUIREMENT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Expression valueExpression() {
            return getObject(Expression.class, FhirPropertyNames.PROPERTY_VALUE_EXPRESSION);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public ParameterDefinition valueParameterDefinition() {
            return getObject(ParameterDefinition.class, FhirPropertyNames.PROPERTY_VALUE_PARAMETER_DEFINITION);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public RelatedArtifact valueRelatedArtifact() {
            return getObject(RelatedArtifact.class, FhirPropertyNames.PROPERTY_VALUE_RELATED_ARTIFACT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public TriggerDefinition valueTriggerDefinition() {
            return getObject(TriggerDefinition.class, FhirPropertyNames.PROPERTY_VALUE_TRIGGER_DEFINITION);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public UsageContext valueUsageContext() {
            return getObject(UsageContext.class, FhirPropertyNames.PROPERTY_VALUE_USAGE_CONTEXT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Dosage valueDosage() {
            return getObject(Dosage.class, FhirPropertyNames.PROPERTY_VALUE_DOSAGE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Meta valueMeta() {
            return getObject(Meta.class, FhirPropertyNames.PROPERTY_VALUE_META);
        }

        public static final class Builder extends FhirObject.Builder<TaskInput, TaskInput.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder valueBase64Binary(final String valueBase64Binary) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_BASE64_BINARY, valueBase64Binary);
                return this;
            }

            public Builder valueBoolean(final Boolean valueBoolean) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_BOOLEAN, valueBoolean);
                return this;
            }

            public Builder valueCanonical(final String valueCanonical) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CANONICAL, valueCanonical);
                return this;
            }

            public Builder valueCode(final String valueCode) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CODE, valueCode);
                return this;
            }

            public Builder valueDate(final String valueDate) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DATE, valueDate);
                return this;
            }

            public Builder valueDateTime(final String valueDateTime) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DATE_TIME, valueDateTime);
                return this;
            }

            public Builder valueDecimal(final Integer valueDecimal) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DECIMAL, valueDecimal);
                return this;
            }

            public Builder valueId(final String valueId) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_ID, valueId);
                return this;
            }

            public Builder valueInstant(final String valueInstant) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_INSTANT, valueInstant);
                return this;
            }

            public Builder valueInteger(final Integer valueInteger) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_INTEGER, valueInteger);
                return this;
            }

            public Builder valueMarkdown(final String valueMarkdown) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_MARKDOWN, valueMarkdown);
                return this;
            }

            public Builder valueOid(final String valueOid) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_OID, valueOid);
                return this;
            }

            public Builder valuePositiveInt(final Integer valuePositiveInt) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_POSITIVE_INT, valuePositiveInt);
                return this;
            }

            public Builder valueString(final String valueString) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_STRING, valueString);
                return this;
            }

            public Builder valueTime(final String valueTime) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_TIME, valueTime);
                return this;
            }

            public Builder valueUnsignedInt(final Integer valueUnsignedInt) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_UNSIGNED_INT, valueUnsignedInt);
                return this;
            }

            public Builder valueUri(final String valueUri) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_URI, valueUri);
                return this;
            }

            public Builder valueUrl(final String valueUrl) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_URL, valueUrl);
                return this;
            }

            public Builder valueUuid(final String valueUuid) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_UUID, valueUuid);
                return this;
            }

            public Builder valueAddress(final Address valueAddress) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_ADDRESS, valueAddress);
                return this;
            }

            public Builder valueAge(final Age valueAge) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_AGE, valueAge);
                return this;
            }

            public Builder valueAnnotation(final Annotation valueAnnotation) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_ANNOTATION, valueAnnotation);
                return this;
            }

            public Builder valueAttachment(final Attachment valueAttachment) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_ATTACHMENT, valueAttachment);
                return this;
            }

            public Builder valueCodeableConcept(final CodeableConcept valueCodeableConcept) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CODEABLE_CONCEPT, valueCodeableConcept);
                return this;
            }

            public Builder valueCoding(final Coding valueCoding) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CODING, valueCoding);
                return this;
            }

            public Builder valueContactPoint(final ContactPoint valueContactPoint) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CONTACT_POINT, valueContactPoint);
                return this;
            }

            public Builder valueCount(final Count valueCount) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_COUNT, valueCount);
                return this;
            }

            public Builder valueDistance(final Distance valueDistance) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DISTANCE, valueDistance);
                return this;
            }

            public Builder valueDuration(final Duration valueDuration) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DURATION, valueDuration);
                return this;
            }

            public Builder valueHumanName(final HumanName valueHumanName) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_HUMAN_NAME, valueHumanName);
                return this;
            }

            public Builder valueIdentifier(final Identifier valueIdentifier) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_IDENTIFIER, valueIdentifier);
                return this;
            }

            public Builder valueMoney(final Money valueMoney) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_MONEY, valueMoney);
                return this;
            }

            public Builder valuePeriod(final Period valuePeriod) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_PERIOD, valuePeriod);
                return this;
            }

            public Builder valueQuantity(final Quantity valueQuantity) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_QUANTITY, valueQuantity);
                return this;
            }

            public Builder valueRange(final Range valueRange) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_RANGE, valueRange);
                return this;
            }

            public Builder valueRatio(final Ratio valueRatio) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_RATIO, valueRatio);
                return this;
            }

            public Builder valueReference(final Reference valueReference) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_REFERENCE, valueReference);
                return this;
            }

            public Builder valueSampledData(final SampledData valueSampledData) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_SAMPLED_DATA, valueSampledData);
                return this;
            }

            public Builder valueSignature(final Signature valueSignature) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_SIGNATURE, valueSignature);
                return this;
            }

            public Builder valueTiming(final Timing valueTiming) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_TIMING, valueTiming);
                return this;
            }

            public Builder valueContactDetail(final ContactDetail valueContactDetail) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CONTACT_DETAIL, valueContactDetail);
                return this;
            }

            public Builder valueContributor(final Contributor valueContributor) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CONTRIBUTOR, valueContributor);
                return this;
            }

            public Builder valueDataRequirement(final DataRequirement valueDataRequirement) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DATA_REQUIREMENT, valueDataRequirement);
                return this;
            }

            public Builder valueExpression(final Expression valueExpression) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_EXPRESSION, valueExpression);
                return this;
            }

            public Builder valueParameterDefinition(final ParameterDefinition valueParameterDefinition) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_PARAMETER_DEFINITION, valueParameterDefinition);
                return this;
            }

            public Builder valueRelatedArtifact(final RelatedArtifact valueRelatedArtifact) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_RELATED_ARTIFACT, valueRelatedArtifact);
                return this;
            }

            public Builder valueTriggerDefinition(final TriggerDefinition valueTriggerDefinition) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_TRIGGER_DEFINITION, valueTriggerDefinition);
                return this;
            }

            public Builder valueUsageContext(final UsageContext valueUsageContext) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_USAGE_CONTEXT, valueUsageContext);
                return this;
            }

            public Builder valueDosage(final Dosage valueDosage) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DOSAGE, valueDosage);
                return this;
            }

            public Builder valueMeta(final Meta valueMeta) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_META, valueMeta);
                return this;
            }

            public TaskInput build() {
                return new TaskInput(b.build());
            }
        }
    }

    /**
     * A task to be performed.
     */
    public static class TaskOutput extends FhirObject {
        public static final String RESOURCE_TYPE = "TaskOutput";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TaskOutput(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The name of the Output parameter.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueBase64Binary() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_BASE64_BINARY);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Boolean valueBoolean() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_VALUE_BOOLEAN);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueCanonical() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_CANONICAL);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueCode() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_CODE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueDate() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_DATE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueDateTime() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_DATE_TIME);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Integer valueDecimal() {
            return data.getInt(FhirPropertyNames.PROPERTY_VALUE_DECIMAL);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueId() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_ID);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueInstant() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_INSTANT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Integer valueInteger() {
            return data.getInt(FhirPropertyNames.PROPERTY_VALUE_INTEGER);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueMarkdown() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_MARKDOWN);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueOid() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_OID);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Integer valuePositiveInt() {
            return data.getInt(FhirPropertyNames.PROPERTY_VALUE_POSITIVE_INT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueString() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_STRING);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueTime() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_TIME);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Integer valueUnsignedInt() {
            return data.getInt(FhirPropertyNames.PROPERTY_VALUE_UNSIGNED_INT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueUri() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_URI);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueUrl() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_URL);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueUuid() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_UUID);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Address valueAddress() {
            return getObject(Address.class, FhirPropertyNames.PROPERTY_VALUE_ADDRESS);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Age valueAge() {
            return getObject(Age.class, FhirPropertyNames.PROPERTY_VALUE_AGE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Annotation valueAnnotation() {
            return getObject(Annotation.class, FhirPropertyNames.PROPERTY_VALUE_ANNOTATION);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Attachment valueAttachment() {
            return getObject(Attachment.class, FhirPropertyNames.PROPERTY_VALUE_ATTACHMENT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public CodeableConcept valueCodeableConcept() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_VALUE_CODEABLE_CONCEPT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Coding valueCoding() {
            return getObject(Coding.class, FhirPropertyNames.PROPERTY_VALUE_CODING);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public ContactPoint valueContactPoint() {
            return getObject(ContactPoint.class, FhirPropertyNames.PROPERTY_VALUE_CONTACT_POINT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Count valueCount() {
            return getObject(Count.class, FhirPropertyNames.PROPERTY_VALUE_COUNT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Distance valueDistance() {
            return getObject(Distance.class, FhirPropertyNames.PROPERTY_VALUE_DISTANCE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Duration valueDuration() {
            return getObject(Duration.class, FhirPropertyNames.PROPERTY_VALUE_DURATION);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public HumanName valueHumanName() {
            return getObject(HumanName.class, FhirPropertyNames.PROPERTY_VALUE_HUMAN_NAME);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Identifier valueIdentifier() {
            return getObject(Identifier.class, FhirPropertyNames.PROPERTY_VALUE_IDENTIFIER);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Money valueMoney() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_VALUE_MONEY);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Period valuePeriod() {
            return getObject(Period.class, FhirPropertyNames.PROPERTY_VALUE_PERIOD);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Quantity valueQuantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_VALUE_QUANTITY);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Range valueRange() {
            return getObject(Range.class, FhirPropertyNames.PROPERTY_VALUE_RANGE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Ratio valueRatio() {
            return getObject(Ratio.class, FhirPropertyNames.PROPERTY_VALUE_RATIO);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Reference valueReference() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_VALUE_REFERENCE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public SampledData valueSampledData() {
            return getObject(SampledData.class, FhirPropertyNames.PROPERTY_VALUE_SAMPLED_DATA);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Signature valueSignature() {
            return getObject(Signature.class, FhirPropertyNames.PROPERTY_VALUE_SIGNATURE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Timing valueTiming() {
            return getObject(Timing.class, FhirPropertyNames.PROPERTY_VALUE_TIMING);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public ContactDetail valueContactDetail() {
            return getObject(ContactDetail.class, FhirPropertyNames.PROPERTY_VALUE_CONTACT_DETAIL);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Contributor valueContributor() {
            return getObject(Contributor.class, FhirPropertyNames.PROPERTY_VALUE_CONTRIBUTOR);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public DataRequirement valueDataRequirement() {
            return getObject(DataRequirement.class, FhirPropertyNames.PROPERTY_VALUE_DATA_REQUIREMENT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Expression valueExpression() {
            return getObject(Expression.class, FhirPropertyNames.PROPERTY_VALUE_EXPRESSION);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public ParameterDefinition valueParameterDefinition() {
            return getObject(ParameterDefinition.class, FhirPropertyNames.PROPERTY_VALUE_PARAMETER_DEFINITION);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public RelatedArtifact valueRelatedArtifact() {
            return getObject(RelatedArtifact.class, FhirPropertyNames.PROPERTY_VALUE_RELATED_ARTIFACT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public TriggerDefinition valueTriggerDefinition() {
            return getObject(TriggerDefinition.class, FhirPropertyNames.PROPERTY_VALUE_TRIGGER_DEFINITION);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public UsageContext valueUsageContext() {
            return getObject(UsageContext.class, FhirPropertyNames.PROPERTY_VALUE_USAGE_CONTEXT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Dosage valueDosage() {
            return getObject(Dosage.class, FhirPropertyNames.PROPERTY_VALUE_DOSAGE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Meta valueMeta() {
            return getObject(Meta.class, FhirPropertyNames.PROPERTY_VALUE_META);
        }

        public static final class Builder extends FhirObject.Builder<TaskOutput, TaskOutput.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder valueBase64Binary(final String valueBase64Binary) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_BASE64_BINARY, valueBase64Binary);
                return this;
            }

            public Builder valueBoolean(final Boolean valueBoolean) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_BOOLEAN, valueBoolean);
                return this;
            }

            public Builder valueCanonical(final String valueCanonical) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CANONICAL, valueCanonical);
                return this;
            }

            public Builder valueCode(final String valueCode) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CODE, valueCode);
                return this;
            }

            public Builder valueDate(final String valueDate) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DATE, valueDate);
                return this;
            }

            public Builder valueDateTime(final String valueDateTime) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DATE_TIME, valueDateTime);
                return this;
            }

            public Builder valueDecimal(final Integer valueDecimal) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DECIMAL, valueDecimal);
                return this;
            }

            public Builder valueId(final String valueId) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_ID, valueId);
                return this;
            }

            public Builder valueInstant(final String valueInstant) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_INSTANT, valueInstant);
                return this;
            }

            public Builder valueInteger(final Integer valueInteger) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_INTEGER, valueInteger);
                return this;
            }

            public Builder valueMarkdown(final String valueMarkdown) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_MARKDOWN, valueMarkdown);
                return this;
            }

            public Builder valueOid(final String valueOid) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_OID, valueOid);
                return this;
            }

            public Builder valuePositiveInt(final Integer valuePositiveInt) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_POSITIVE_INT, valuePositiveInt);
                return this;
            }

            public Builder valueString(final String valueString) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_STRING, valueString);
                return this;
            }

            public Builder valueTime(final String valueTime) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_TIME, valueTime);
                return this;
            }

            public Builder valueUnsignedInt(final Integer valueUnsignedInt) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_UNSIGNED_INT, valueUnsignedInt);
                return this;
            }

            public Builder valueUri(final String valueUri) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_URI, valueUri);
                return this;
            }

            public Builder valueUrl(final String valueUrl) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_URL, valueUrl);
                return this;
            }

            public Builder valueUuid(final String valueUuid) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_UUID, valueUuid);
                return this;
            }

            public Builder valueAddress(final Address valueAddress) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_ADDRESS, valueAddress);
                return this;
            }

            public Builder valueAge(final Age valueAge) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_AGE, valueAge);
                return this;
            }

            public Builder valueAnnotation(final Annotation valueAnnotation) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_ANNOTATION, valueAnnotation);
                return this;
            }

            public Builder valueAttachment(final Attachment valueAttachment) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_ATTACHMENT, valueAttachment);
                return this;
            }

            public Builder valueCodeableConcept(final CodeableConcept valueCodeableConcept) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CODEABLE_CONCEPT, valueCodeableConcept);
                return this;
            }

            public Builder valueCoding(final Coding valueCoding) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CODING, valueCoding);
                return this;
            }

            public Builder valueContactPoint(final ContactPoint valueContactPoint) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CONTACT_POINT, valueContactPoint);
                return this;
            }

            public Builder valueCount(final Count valueCount) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_COUNT, valueCount);
                return this;
            }

            public Builder valueDistance(final Distance valueDistance) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DISTANCE, valueDistance);
                return this;
            }

            public Builder valueDuration(final Duration valueDuration) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DURATION, valueDuration);
                return this;
            }

            public Builder valueHumanName(final HumanName valueHumanName) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_HUMAN_NAME, valueHumanName);
                return this;
            }

            public Builder valueIdentifier(final Identifier valueIdentifier) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_IDENTIFIER, valueIdentifier);
                return this;
            }

            public Builder valueMoney(final Money valueMoney) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_MONEY, valueMoney);
                return this;
            }

            public Builder valuePeriod(final Period valuePeriod) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_PERIOD, valuePeriod);
                return this;
            }

            public Builder valueQuantity(final Quantity valueQuantity) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_QUANTITY, valueQuantity);
                return this;
            }

            public Builder valueRange(final Range valueRange) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_RANGE, valueRange);
                return this;
            }

            public Builder valueRatio(final Ratio valueRatio) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_RATIO, valueRatio);
                return this;
            }

            public Builder valueReference(final Reference valueReference) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_REFERENCE, valueReference);
                return this;
            }

            public Builder valueSampledData(final SampledData valueSampledData) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_SAMPLED_DATA, valueSampledData);
                return this;
            }

            public Builder valueSignature(final Signature valueSignature) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_SIGNATURE, valueSignature);
                return this;
            }

            public Builder valueTiming(final Timing valueTiming) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_TIMING, valueTiming);
                return this;
            }

            public Builder valueContactDetail(final ContactDetail valueContactDetail) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CONTACT_DETAIL, valueContactDetail);
                return this;
            }

            public Builder valueContributor(final Contributor valueContributor) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CONTRIBUTOR, valueContributor);
                return this;
            }

            public Builder valueDataRequirement(final DataRequirement valueDataRequirement) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DATA_REQUIREMENT, valueDataRequirement);
                return this;
            }

            public Builder valueExpression(final Expression valueExpression) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_EXPRESSION, valueExpression);
                return this;
            }

            public Builder valueParameterDefinition(final ParameterDefinition valueParameterDefinition) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_PARAMETER_DEFINITION, valueParameterDefinition);
                return this;
            }

            public Builder valueRelatedArtifact(final RelatedArtifact valueRelatedArtifact) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_RELATED_ARTIFACT, valueRelatedArtifact);
                return this;
            }

            public Builder valueTriggerDefinition(final TriggerDefinition valueTriggerDefinition) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_TRIGGER_DEFINITION, valueTriggerDefinition);
                return this;
            }

            public Builder valueUsageContext(final UsageContext valueUsageContext) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_USAGE_CONTEXT, valueUsageContext);
                return this;
            }

            public Builder valueDosage(final Dosage valueDosage) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DOSAGE, valueDosage);
                return this;
            }

            public Builder valueMeta(final Meta valueMeta) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_META, valueMeta);
                return this;
            }

            public TaskOutput build() {
                return new TaskOutput(b.build());
            }
        }
    }

    /**
     * A task to be performed.
     */
    public static class TaskRestriction extends FhirObject {
        public static final String RESOURCE_TYPE = "TaskRestriction";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TaskRestriction(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Indicates the number of times the requested action should occur.
         */
        public Integer repetitions() {
            return data.getInt(FhirPropertyNames.PROPERTY_REPETITIONS);
        }

        /**
         * Over what time-period is fulfillment sought.
         */
        public Period period() {
            return getObject(Period.class, FhirPropertyNames.PROPERTY_PERIOD);
        }

        /**
         * For requests that are targeted to more than on potential
         * recipient/target, for whom is fulfillment sought?
         */
        public java.util.List<Reference> recipient() {
            return getList(Reference.class, FhirPropertyNames.PROPERTY_RECIPIENT);
        }

        public static final class Builder extends FhirObject.Builder<TaskRestriction, TaskRestriction.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder repetitions(final Integer repetitions) {
                b.add(FhirPropertyNames.PROPERTY_REPETITIONS, repetitions);
                return this;
            }

            public Builder period(final Period period) {
                b.add(FhirPropertyNames.PROPERTY_PERIOD, period);
                return this;
            }

            public Builder recipient(final java.util.List<Reference> recipient) {
                b.add(FhirPropertyNames.PROPERTY_RECIPIENT, FhirObject.toArray(recipient));
                return this;
            }

            public TaskRestriction build() {
                return new TaskRestriction(b.build());
            }
        }
    }
}
