/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A process where a researcher or organization plans and then executes a
 * series of steps intended to increase the field of healthcare-related
 * knowledge.  This includes studies of safety, efficacy, comparative
 * effectiveness and other information about medications, devices,
 * therapies and other interventional and investigative techniques.  A
 * ResearchStudy involves the gathering of information about human or
 * animal subjects.
 */
public class ResearchStudy extends DomainResource {
    public static final String RESOURCE_TYPE = "ResearchStudy";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ResearchStudy(final JsonObject data) {
        super(data);
    }

    /**
     * Identifiers assigned to this research study by the sponsor or other
     * systems.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * A short, descriptive user-friendly label for the study.
     */
    public String title() {
        return getString(FhirPropertyNames.PROPERTY_TITLE);
    }

    /**
     * The set of steps expected to be performed as part of the execution of
     * the study.
     */
    public java.util.List<Reference> protocol() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_PROTOCOL);
    }

    /**
     * A larger research study of which this particular study is a component
     * or step.
     */
    public java.util.List<Reference> partOf() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_PART_OF);
    }

    /**
     * The current state of the study.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * The type of study based upon the intent of the study's activities. A
     * classification of the intent of the study.
     */
    public CodeableConcept primaryPurposeType() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_PRIMARY_PURPOSE_TYPE);
    }

    /**
     * The stage in the progression of a therapy from initial experimental
     * use in humans in clinical trials to post-market evaluation.
     */
    public CodeableConcept phase() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_PHASE);
    }

    /**
     * Codes categorizing the type of study such as investigational vs.
     * observational, type of blinding, type of randomization, safety vs.
     * efficacy, etc.
     */
    public java.util.List<CodeableConcept> category() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_CATEGORY);
    }

    /**
     * The medication(s), food(s), therapy(ies), device(s) or other concerns
     * or interventions that the study is seeking to gain more information
     * about.
     */
    public java.util.List<CodeableConcept> focus() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_FOCUS);
    }

    /**
     * The condition that is the focus of the study.  For example, In a study
     * to examine risk factors for Lupus, might have as an inclusion
     * criterion &quot;healthy volunteer&quot;, but the target condition code would be
     * a Lupus SNOMED code.
     */
    public java.util.List<CodeableConcept> condition() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_CONDITION);
    }

    /**
     * Contact details to assist a user in learning more about or engaging
     * with the study.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_CONTACT);
    }

    /**
     * Citations, references and other related documents.
     */
    public java.util.List<RelatedArtifact> relatedArtifact() {
        return getList(RelatedArtifact.class, FhirPropertyNames.PROPERTY_RELATED_ARTIFACT);
    }

    /**
     * Key terms to aid in searching for or filtering the study.
     */
    public java.util.List<CodeableConcept> keyword() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_KEYWORD);
    }

    /**
     * Indicates a country, state or other region where the study is taking
     * place.
     */
    public java.util.List<CodeableConcept> location() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_LOCATION);
    }

    /**
     * A full description of how the study is being conducted.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * Reference to a Group that defines the criteria for and quantity of
     * subjects participating in the study.  E.g. &quot; 200 female Europeans
     * between the ages of 20 and 45 with early onset diabetes&quot;.
     */
    public java.util.List<Reference> enrollment() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_ENROLLMENT);
    }

    /**
     * Identifies the start date and the expected (or actual, depending on
     * status) end date for the study.
     */
    public Period period() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_PERIOD);
    }

    /**
     * An organization that initiates the investigation and is legally
     * responsible for the study.
     */
    public Reference sponsor() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SPONSOR);
    }

    /**
     * A researcher in a study who oversees multiple aspects of the study,
     * such as concept development, protocol writing, protocol submission for
     * IRB approval, participant recruitment, informed consent, data
     * collection, analysis, interpretation and presentation.
     */
    public Reference principalInvestigator() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PRINCIPAL_INVESTIGATOR);
    }

    /**
     * A facility in which study activities are conducted.
     */
    public java.util.List<Reference> site() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_SITE);
    }

    /**
     * A description and/or code explaining the premature termination of the
     * study.
     */
    public CodeableConcept reasonStopped() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_REASON_STOPPED);
    }

    /**
     * Comments made about the study by the performer, subject or other
     * participants.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    /**
     * Describes an expected sequence of events for one of the participants
     * of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B,
     * wash-out, follow-up.
     */
    public java.util.List<ResearchStudyArm> arm() {
        return getList(ResearchStudyArm.class, FhirPropertyNames.PROPERTY_ARM);
    }

    /**
     * A goal that the study is aiming to achieve in terms of a scientific
     * question to be answered by the analysis of data collected during the
     * study.
     */
    public java.util.List<ResearchStudyObjective> objective() {
        return getList(ResearchStudyObjective.class, FhirPropertyNames.PROPERTY_OBJECTIVE);
    }

    public static final class Builder extends DomainResource.Builder<ResearchStudy, ResearchStudy.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder title(final String title) {
            b.add(FhirPropertyNames.PROPERTY_TITLE, title);
            return this;
        }

        public Builder protocol(final java.util.List<Reference> protocol) {
            b.add(FhirPropertyNames.PROPERTY_PROTOCOL, FhirObject.toArray(protocol));
            return this;
        }

        public Builder partOf(final java.util.List<Reference> partOf) {
            b.add(FhirPropertyNames.PROPERTY_PART_OF, FhirObject.toArray(partOf));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder primaryPurposeType(final CodeableConcept primaryPurposeType) {
            b.add(FhirPropertyNames.PROPERTY_PRIMARY_PURPOSE_TYPE, primaryPurposeType);
            return this;
        }

        public Builder phase(final CodeableConcept phase) {
            b.add(FhirPropertyNames.PROPERTY_PHASE, phase);
            return this;
        }

        public Builder category(final java.util.List<CodeableConcept> category) {
            b.add(FhirPropertyNames.PROPERTY_CATEGORY, FhirObject.toArray(category));
            return this;
        }

        public Builder focus(final java.util.List<CodeableConcept> focus) {
            b.add(FhirPropertyNames.PROPERTY_FOCUS, FhirObject.toArray(focus));
            return this;
        }

        public Builder condition(final java.util.List<CodeableConcept> condition) {
            b.add(FhirPropertyNames.PROPERTY_CONDITION, FhirObject.toArray(condition));
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(FhirPropertyNames.PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder relatedArtifact(final java.util.List<RelatedArtifact> relatedArtifact) {
            b.add(FhirPropertyNames.PROPERTY_RELATED_ARTIFACT, FhirObject.toArray(relatedArtifact));
            return this;
        }

        public Builder keyword(final java.util.List<CodeableConcept> keyword) {
            b.add(FhirPropertyNames.PROPERTY_KEYWORD, FhirObject.toArray(keyword));
            return this;
        }

        public Builder location(final java.util.List<CodeableConcept> location) {
            b.add(FhirPropertyNames.PROPERTY_LOCATION, FhirObject.toArray(location));
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder enrollment(final java.util.List<Reference> enrollment) {
            b.add(FhirPropertyNames.PROPERTY_ENROLLMENT, FhirObject.toArray(enrollment));
            return this;
        }

        public Builder period(final Period period) {
            b.add(FhirPropertyNames.PROPERTY_PERIOD, period);
            return this;
        }

        public Builder sponsor(final Reference sponsor) {
            b.add(FhirPropertyNames.PROPERTY_SPONSOR, sponsor);
            return this;
        }

        public Builder principalInvestigator(final Reference principalInvestigator) {
            b.add(FhirPropertyNames.PROPERTY_PRINCIPAL_INVESTIGATOR, principalInvestigator);
            return this;
        }

        public Builder site(final java.util.List<Reference> site) {
            b.add(FhirPropertyNames.PROPERTY_SITE, FhirObject.toArray(site));
            return this;
        }

        public Builder reasonStopped(final CodeableConcept reasonStopped) {
            b.add(FhirPropertyNames.PROPERTY_REASON_STOPPED, reasonStopped);
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder arm(final java.util.List<ResearchStudyArm> arm) {
            b.add(FhirPropertyNames.PROPERTY_ARM, FhirObject.toArray(arm));
            return this;
        }

        public Builder objective(final java.util.List<ResearchStudyObjective> objective) {
            b.add(FhirPropertyNames.PROPERTY_OBJECTIVE, FhirObject.toArray(objective));
            return this;
        }

        public ResearchStudy build() {
            return new ResearchStudy(b.build());
        }
    }

    /**
     * A process where a researcher or organization plans and then executes a
     * series of steps intended to increase the field of healthcare-related
     * knowledge.  This includes studies of safety, efficacy, comparative
     * effectiveness and other information about medications, devices,
     * therapies and other interventional and investigative techniques.  A
     * ResearchStudy involves the gathering of information about human or
     * animal subjects.
     */
    public static class ResearchStudyArm extends FhirObject {
        public static final String RESOURCE_TYPE = "ResearchStudyArm";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ResearchStudyArm(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Unique, human-readable label for this arm of the study.
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * Categorization of study arm, e.g. experimental, active comparator,
         * placebo comparater.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * A succinct description of the path through the study that would be
         * followed by a subject adhering to this arm.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        public static final class Builder extends FhirObject.Builder<ResearchStudyArm, ResearchStudyArm.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public ResearchStudyArm build() {
                return new ResearchStudyArm(b.build());
            }
        }
    }

    /**
     * A process where a researcher or organization plans and then executes a
     * series of steps intended to increase the field of healthcare-related
     * knowledge.  This includes studies of safety, efficacy, comparative
     * effectiveness and other information about medications, devices,
     * therapies and other interventional and investigative techniques.  A
     * ResearchStudy involves the gathering of information about human or
     * animal subjects.
     */
    public static class ResearchStudyObjective extends FhirObject {
        public static final String RESOURCE_TYPE = "ResearchStudyObjective";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ResearchStudyObjective(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Unique, human-readable label for this objective of the study.
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * The kind of study objective.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        public static final class Builder extends FhirObject.Builder<ResearchStudyObjective, ResearchStudyObjective.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public ResearchStudyObjective build() {
                return new ResearchStudyObjective(b.build());
            }
        }
    }
}
