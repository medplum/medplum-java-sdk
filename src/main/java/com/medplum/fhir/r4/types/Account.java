/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A financial tool for tracking value accrued for a particular purpose.
 * In the healthcare field, used to track charges for a patient, cost
 * centers, etc.
 */
public class Account extends DomainResource {
    public static final String RESOURCE_TYPE = "Account";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Account(final JsonObject data) {
        super(data);
    }

    /**
     * Unique identifier used to reference the account.  Might or might not
     * be intended for human use (e.g. credit card number).
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * Indicates whether the account is presently used/usable or not.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * Categorizes the account for reporting and searching purposes.
     */
    public CodeableConcept type() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * Name used for the account when displaying it to humans in reports,
     * etc.
     */
    public String name() {
        return getString(FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * Identifies the entity which incurs the expenses. While the immediate
     * recipients of services or goods might be entities related to the
     * subject, the expenses were ultimately incurred by the subject of the
     * Account.
     */
    public java.util.List<Reference> subject() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * The date range of services associated with this account.
     */
    public Period servicePeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_SERVICE_PERIOD);
    }

    /**
     * The party(s) that are responsible for covering the payment of this
     * account, and what order should they be applied to the account.
     */
    public java.util.List<AccountCoverage> coverage() {
        return getList(AccountCoverage.class, FhirPropertyNames.PROPERTY_COVERAGE);
    }

    /**
     * Indicates the service area, hospital, department, etc. with
     * responsibility for managing the Account.
     */
    public Reference owner() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_OWNER);
    }

    /**
     * Provides additional information about what the account tracks and how
     * it is used.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * The parties responsible for balancing the account if other payment
     * options fall short.
     */
    public java.util.List<AccountGuarantor> guarantor() {
        return getList(AccountGuarantor.class, FhirPropertyNames.PROPERTY_GUARANTOR);
    }

    /**
     * Reference to a parent Account.
     */
    public Reference partOf() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PART_OF);
    }

    public static final class Builder extends DomainResource.Builder<Account, Account.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder type(final CodeableConcept type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, type);
            return this;
        }

        public Builder name(final String name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, name);
            return this;
        }

        public Builder subject(final java.util.List<Reference> subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, FhirObject.toArray(subject));
            return this;
        }

        public Builder servicePeriod(final Period servicePeriod) {
            b.add(FhirPropertyNames.PROPERTY_SERVICE_PERIOD, servicePeriod);
            return this;
        }

        public Builder coverage(final java.util.List<AccountCoverage> coverage) {
            b.add(FhirPropertyNames.PROPERTY_COVERAGE, FhirObject.toArray(coverage));
            return this;
        }

        public Builder owner(final Reference owner) {
            b.add(FhirPropertyNames.PROPERTY_OWNER, owner);
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder guarantor(final java.util.List<AccountGuarantor> guarantor) {
            b.add(FhirPropertyNames.PROPERTY_GUARANTOR, FhirObject.toArray(guarantor));
            return this;
        }

        public Builder partOf(final Reference partOf) {
            b.add(FhirPropertyNames.PROPERTY_PART_OF, partOf);
            return this;
        }

        public Account build() {
            return new Account(b.build());
        }
    }

    /**
     * A financial tool for tracking value accrued for a particular purpose.
     * In the healthcare field, used to track charges for a patient, cost
     * centers, etc.
     */
    public static class AccountCoverage extends FhirObject {
        public static final String RESOURCE_TYPE = "AccountCoverage";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public AccountCoverage(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The party(s) that contribute to payment (or part of) of the charges
         * applied to this account (including self-pay).
         *
         * A coverage may only be responsible for specific types of charges, and
         * the sequence of the coverages in the account could be important when
         * processing billing.
         */
        public Reference coverage() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_COVERAGE);
        }

        /**
         * The priority of the coverage in the context of this account.
         */
        public Integer priority() {
            return data.getInt(FhirPropertyNames.PROPERTY_PRIORITY);
        }

        public static final class Builder extends FhirObject.Builder<AccountCoverage, AccountCoverage.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder coverage(final Reference coverage) {
                b.add(FhirPropertyNames.PROPERTY_COVERAGE, coverage);
                return this;
            }

            public Builder priority(final Integer priority) {
                b.add(FhirPropertyNames.PROPERTY_PRIORITY, priority);
                return this;
            }

            public AccountCoverage build() {
                return new AccountCoverage(b.build());
            }
        }
    }

    /**
     * A financial tool for tracking value accrued for a particular purpose.
     * In the healthcare field, used to track charges for a patient, cost
     * centers, etc.
     */
    public static class AccountGuarantor extends FhirObject {
        public static final String RESOURCE_TYPE = "AccountGuarantor";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public AccountGuarantor(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The entity who is responsible.
         */
        public Reference party() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_PARTY);
        }

        /**
         * A guarantor may be placed on credit hold or otherwise have their role
         * temporarily suspended.
         */
        public Boolean onHold() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_ON_HOLD);
        }

        /**
         * The timeframe during which the guarantor accepts responsibility for
         * the account.
         */
        public Period period() {
            return getObject(Period.class, FhirPropertyNames.PROPERTY_PERIOD);
        }

        public static final class Builder extends FhirObject.Builder<AccountGuarantor, AccountGuarantor.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder party(final Reference party) {
                b.add(FhirPropertyNames.PROPERTY_PARTY, party);
                return this;
            }

            public Builder onHold(final Boolean onHold) {
                b.add(FhirPropertyNames.PROPERTY_ON_HOLD, onHold);
                return this;
            }

            public Builder period(final Period period) {
                b.add(FhirPropertyNames.PROPERTY_PERIOD, period);
                return this;
            }

            public AccountGuarantor build() {
                return new AccountGuarantor(b.build());
            }
        }
    }
}
