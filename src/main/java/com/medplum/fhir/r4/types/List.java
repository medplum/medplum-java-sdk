/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A list is a curated collection of resources.
 */
public class List extends DomainResource {
    public static final String RESOURCE_TYPE = "List";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public List(final JsonObject data) {
        super(data);
    }

    /**
     * Identifier for the List assigned for business purposes outside the
     * context of FHIR.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * Indicates the current state of this list.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * How this list was prepared - whether it is a working list that is
     * suitable for being maintained on an ongoing basis, or if it represents
     * a snapshot of a list of items from another source, or whether it is a
     * prepared list where items may be marked as added, modified or deleted.
     */
    public String mode() {
        return getString(FhirPropertyNames.PROPERTY_MODE);
    }

    /**
     * A label for the list assigned by the author.
     */
    public String title() {
        return getString(FhirPropertyNames.PROPERTY_TITLE);
    }

    /**
     * This code defines the purpose of the list - why it was created.
     */
    public CodeableConcept code() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
    }

    /**
     * The common subject (or patient) of the resources that are in the list
     * if there is one.
     */
    public Reference subject() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * The encounter that is the context in which this list was created.
     */
    public Reference encounter() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ENCOUNTER);
    }

    /**
     * The date that the list was prepared.
     */
    public java.time.Instant date() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE);
    }

    /**
     * The entity responsible for deciding what the contents of the list
     * were. Where the list was created by a human, this is the same as the
     * author of the list.
     */
    public Reference source() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SOURCE);
    }

    /**
     * What order applies to the items in the list.
     */
    public CodeableConcept orderedBy() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_ORDERED_BY);
    }

    /**
     * Comments that apply to the overall list.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    /**
     * Entries in this list.
     */
    public java.util.List<ListEntry> entry() {
        return getList(ListEntry.class, FhirPropertyNames.PROPERTY_ENTRY);
    }

    /**
     * If the list is empty, why the list is empty.
     */
    public CodeableConcept emptyReason() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_EMPTY_REASON);
    }

    public static final class Builder extends DomainResource.Builder<List, List.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder mode(final String mode) {
            b.add(FhirPropertyNames.PROPERTY_MODE, mode);
            return this;
        }

        public Builder title(final String title) {
            b.add(FhirPropertyNames.PROPERTY_TITLE, title);
            return this;
        }

        public Builder code(final CodeableConcept code) {
            b.add(FhirPropertyNames.PROPERTY_CODE, code);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(FhirPropertyNames.PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder source(final Reference source) {
            b.add(FhirPropertyNames.PROPERTY_SOURCE, source);
            return this;
        }

        public Builder orderedBy(final CodeableConcept orderedBy) {
            b.add(FhirPropertyNames.PROPERTY_ORDERED_BY, orderedBy);
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder entry(final java.util.List<ListEntry> entry) {
            b.add(FhirPropertyNames.PROPERTY_ENTRY, FhirObject.toArray(entry));
            return this;
        }

        public Builder emptyReason(final CodeableConcept emptyReason) {
            b.add(FhirPropertyNames.PROPERTY_EMPTY_REASON, emptyReason);
            return this;
        }

        public List build() {
            return new List(b.build());
        }
    }

    /**
     * A list is a curated collection of resources.
     */
    public static class ListEntry extends FhirObject {
        public static final String RESOURCE_TYPE = "ListEntry";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ListEntry(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The flag allows the system constructing the list to indicate the role
         * and significance of the item in the list.
         */
        public CodeableConcept flag() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_FLAG);
        }

        /**
         * True if this item is marked as deleted in the list.
         */
        public Boolean deleted() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_DELETED);
        }

        /**
         * When this item was added to the list.
         */
        public java.time.Instant date() {
            return getInstant(FhirPropertyNames.PROPERTY_DATE);
        }

        /**
         * A reference to the actual resource from which data was derived.
         */
        public Reference item() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_ITEM);
        }

        public static final class Builder extends FhirObject.Builder<ListEntry, ListEntry.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder flag(final CodeableConcept flag) {
                b.add(FhirPropertyNames.PROPERTY_FLAG, flag);
                return this;
            }

            public Builder deleted(final Boolean deleted) {
                b.add(FhirPropertyNames.PROPERTY_DELETED, deleted);
                return this;
            }

            public Builder date(final java.time.Instant date) {
                b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
                return this;
            }

            public Builder item(final Reference item) {
                b.add(FhirPropertyNames.PROPERTY_ITEM, item);
                return this;
            }

            public ListEntry build() {
                return new ListEntry(b.build());
            }
        }
    }
}
