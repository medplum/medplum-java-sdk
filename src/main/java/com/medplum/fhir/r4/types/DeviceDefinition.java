/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * The characteristics, operational status and capabilities of a
 * medical-related component of a medical device.
 */
public class DeviceDefinition extends DomainResource {
    public static final String RESOURCE_TYPE = "DeviceDefinition";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public DeviceDefinition(final JsonObject data) {
        super(data);
    }

    /**
     * Unique instance identifiers assigned to a device by the software,
     * manufacturers, other organizations or owners. For example: handle ID.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * Unique device identifier (UDI) assigned to device label or package.
     * Note that the Device may include multiple udiCarriers as it either may
     * include just the udiCarrier for the jurisdiction it is sold, or for
     * multiple jurisdictions it could have been sold.
     */
    public java.util.List<DeviceDefinitionUdiDeviceIdentifier> udiDeviceIdentifier() {
        return getList(DeviceDefinitionUdiDeviceIdentifier.class, FhirPropertyNames.PROPERTY_UDI_DEVICE_IDENTIFIER);
    }

    /**
     * A name of the manufacturer.
     */
    public String manufacturerString() {
        return getString(FhirPropertyNames.PROPERTY_MANUFACTURER_STRING);
    }

    /**
     * A name of the manufacturer.
     */
    public Reference manufacturerReference() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_MANUFACTURER_REFERENCE);
    }

    /**
     * A name given to the device to identify it.
     */
    public java.util.List<DeviceDefinitionDeviceName> deviceName() {
        return getList(DeviceDefinitionDeviceName.class, FhirPropertyNames.PROPERTY_DEVICE_NAME);
    }

    /**
     * The model number for the device.
     */
    public String modelNumber() {
        return getString(FhirPropertyNames.PROPERTY_MODEL_NUMBER);
    }

    /**
     * What kind of device or device system this is.
     */
    public CodeableConcept type() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * The capabilities supported on a  device, the standards to which the
     * device conforms for a particular purpose, and used for the
     * communication.
     */
    public java.util.List<DeviceDefinitionSpecialization> specialization() {
        return getList(DeviceDefinitionSpecialization.class, FhirPropertyNames.PROPERTY_SPECIALIZATION);
    }

    /**
     * The available versions of the device, e.g., software versions.
     */
    public java.util.List<String> version() {
        return getList(String.class, FhirPropertyNames.PROPERTY_VERSION);
    }

    /**
     * Safety characteristics of the device.
     */
    public java.util.List<CodeableConcept> safety() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_SAFETY);
    }

    /**
     * Shelf Life and storage information.
     */
    public java.util.List<ProductShelfLife> shelfLifeStorage() {
        return getList(ProductShelfLife.class, FhirPropertyNames.PROPERTY_SHELF_LIFE_STORAGE);
    }

    /**
     * Dimensions, color etc.
     */
    public ProdCharacteristic physicalCharacteristics() {
        return getObject(ProdCharacteristic.class, FhirPropertyNames.PROPERTY_PHYSICAL_CHARACTERISTICS);
    }

    /**
     * Language code for the human-readable text strings produced by the
     * device (all supported).
     */
    public java.util.List<CodeableConcept> languageCode() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_LANGUAGE_CODE);
    }

    /**
     * Device capabilities.
     */
    public java.util.List<DeviceDefinitionCapability> capability() {
        return getList(DeviceDefinitionCapability.class, FhirPropertyNames.PROPERTY_CAPABILITY);
    }

    /**
     * The actual configuration settings of a device as it actually operates,
     * e.g., regulation status, time properties.
     */
    public java.util.List<DeviceDefinitionProperty> property() {
        return getList(DeviceDefinitionProperty.class, FhirPropertyNames.PROPERTY_PROPERTY);
    }

    /**
     * An organization that is responsible for the provision and ongoing
     * maintenance of the device.
     */
    public Reference owner() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_OWNER);
    }

    /**
     * Contact details for an organization or a particular human that is
     * responsible for the device.
     */
    public java.util.List<ContactPoint> contact() {
        return getList(ContactPoint.class, FhirPropertyNames.PROPERTY_CONTACT);
    }

    /**
     * A network address on which the device may be contacted directly.
     */
    public java.net.URI url() {
        return getUri(FhirPropertyNames.PROPERTY_URL);
    }

    /**
     * Access to on-line information about the device.
     */
    public java.net.URI onlineInformation() {
        return getUri(FhirPropertyNames.PROPERTY_ONLINE_INFORMATION);
    }

    /**
     * Descriptive information, usage information or implantation information
     * that is not captured in an existing element.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    /**
     * The quantity of the device present in the packaging (e.g. the number
     * of devices present in a pack, or the number of devices in the same
     * package of the medicinal product).
     */
    public Quantity quantity() {
        return getObject(Quantity.class, FhirPropertyNames.PROPERTY_QUANTITY);
    }

    /**
     * The parent device it can be part of.
     */
    public Reference parentDevice() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PARENT_DEVICE);
    }

    /**
     * A substance used to create the material(s) of which the device is
     * made.
     */
    public java.util.List<DeviceDefinitionMaterial> material() {
        return getList(DeviceDefinitionMaterial.class, FhirPropertyNames.PROPERTY_MATERIAL);
    }

    public static final class Builder extends DomainResource.Builder<DeviceDefinition, DeviceDefinition.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder udiDeviceIdentifier(final java.util.List<DeviceDefinitionUdiDeviceIdentifier> udiDeviceIdentifier) {
            b.add(FhirPropertyNames.PROPERTY_UDI_DEVICE_IDENTIFIER, FhirObject.toArray(udiDeviceIdentifier));
            return this;
        }

        public Builder manufacturerString(final String manufacturerString) {
            b.add(FhirPropertyNames.PROPERTY_MANUFACTURER_STRING, manufacturerString);
            return this;
        }

        public Builder manufacturerReference(final Reference manufacturerReference) {
            b.add(FhirPropertyNames.PROPERTY_MANUFACTURER_REFERENCE, manufacturerReference);
            return this;
        }

        public Builder deviceName(final java.util.List<DeviceDefinitionDeviceName> deviceName) {
            b.add(FhirPropertyNames.PROPERTY_DEVICE_NAME, FhirObject.toArray(deviceName));
            return this;
        }

        public Builder modelNumber(final String modelNumber) {
            b.add(FhirPropertyNames.PROPERTY_MODEL_NUMBER, modelNumber);
            return this;
        }

        public Builder type(final CodeableConcept type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, type);
            return this;
        }

        public Builder specialization(final java.util.List<DeviceDefinitionSpecialization> specialization) {
            b.add(FhirPropertyNames.PROPERTY_SPECIALIZATION, FhirObject.toArray(specialization));
            return this;
        }

        public Builder version(final java.util.List<String> version) {
            b.add(FhirPropertyNames.PROPERTY_VERSION, FhirObject.toStringArray(version));
            return this;
        }

        public Builder safety(final java.util.List<CodeableConcept> safety) {
            b.add(FhirPropertyNames.PROPERTY_SAFETY, FhirObject.toArray(safety));
            return this;
        }

        public Builder shelfLifeStorage(final java.util.List<ProductShelfLife> shelfLifeStorage) {
            b.add(FhirPropertyNames.PROPERTY_SHELF_LIFE_STORAGE, FhirObject.toArray(shelfLifeStorage));
            return this;
        }

        public Builder physicalCharacteristics(final ProdCharacteristic physicalCharacteristics) {
            b.add(FhirPropertyNames.PROPERTY_PHYSICAL_CHARACTERISTICS, physicalCharacteristics);
            return this;
        }

        public Builder languageCode(final java.util.List<CodeableConcept> languageCode) {
            b.add(FhirPropertyNames.PROPERTY_LANGUAGE_CODE, FhirObject.toArray(languageCode));
            return this;
        }

        public Builder capability(final java.util.List<DeviceDefinitionCapability> capability) {
            b.add(FhirPropertyNames.PROPERTY_CAPABILITY, FhirObject.toArray(capability));
            return this;
        }

        public Builder property(final java.util.List<DeviceDefinitionProperty> property) {
            b.add(FhirPropertyNames.PROPERTY_PROPERTY, FhirObject.toArray(property));
            return this;
        }

        public Builder owner(final Reference owner) {
            b.add(FhirPropertyNames.PROPERTY_OWNER, owner);
            return this;
        }

        public Builder contact(final java.util.List<ContactPoint> contact) {
            b.add(FhirPropertyNames.PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder url(final java.net.URI url) {
            b.add(FhirPropertyNames.PROPERTY_URL, url.toString());
            return this;
        }

        public Builder onlineInformation(final java.net.URI onlineInformation) {
            b.add(FhirPropertyNames.PROPERTY_ONLINE_INFORMATION, onlineInformation.toString());
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder quantity(final Quantity quantity) {
            b.add(FhirPropertyNames.PROPERTY_QUANTITY, quantity);
            return this;
        }

        public Builder parentDevice(final Reference parentDevice) {
            b.add(FhirPropertyNames.PROPERTY_PARENT_DEVICE, parentDevice);
            return this;
        }

        public Builder material(final java.util.List<DeviceDefinitionMaterial> material) {
            b.add(FhirPropertyNames.PROPERTY_MATERIAL, FhirObject.toArray(material));
            return this;
        }

        public DeviceDefinition build() {
            return new DeviceDefinition(b.build());
        }
    }

    /**
     * The characteristics, operational status and capabilities of a
     * medical-related component of a medical device.
     */
    public static class DeviceDefinitionCapability extends FhirObject {
        public static final String RESOURCE_TYPE = "DeviceDefinitionCapability";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public DeviceDefinitionCapability(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Type of capability.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Description of capability.
         */
        public java.util.List<CodeableConcept> description() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        public static final class Builder extends FhirObject.Builder<DeviceDefinitionCapability, DeviceDefinitionCapability.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder description(final java.util.List<CodeableConcept> description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, FhirObject.toArray(description));
                return this;
            }

            public DeviceDefinitionCapability build() {
                return new DeviceDefinitionCapability(b.build());
            }
        }
    }

    /**
     * The characteristics, operational status and capabilities of a
     * medical-related component of a medical device.
     */
    public static class DeviceDefinitionDeviceName extends FhirObject {
        public static final String RESOURCE_TYPE = "DeviceDefinitionDeviceName";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public DeviceDefinitionDeviceName(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The name of the device.
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * The type of deviceName.
         * UDILabelName | UserFriendlyName | PatientReportedName |
         * ManufactureDeviceName | ModelName.
         */
        public String type() {
            return getString(FhirPropertyNames.PROPERTY_TYPE);
        }

        public static final class Builder extends FhirObject.Builder<DeviceDefinitionDeviceName, DeviceDefinitionDeviceName.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder type(final String type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public DeviceDefinitionDeviceName build() {
                return new DeviceDefinitionDeviceName(b.build());
            }
        }
    }

    /**
     * The characteristics, operational status and capabilities of a
     * medical-related component of a medical device.
     */
    public static class DeviceDefinitionMaterial extends FhirObject {
        public static final String RESOURCE_TYPE = "DeviceDefinitionMaterial";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public DeviceDefinitionMaterial(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The substance.
         */
        public CodeableConcept substance() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_SUBSTANCE);
        }

        /**
         * Indicates an alternative material of the device.
         */
        public Boolean alternate() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_ALTERNATE);
        }

        /**
         * Whether the substance is a known or suspected allergen.
         */
        public Boolean allergenicIndicator() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_ALLERGENIC_INDICATOR);
        }

        public static final class Builder extends FhirObject.Builder<DeviceDefinitionMaterial, DeviceDefinitionMaterial.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder substance(final CodeableConcept substance) {
                b.add(FhirPropertyNames.PROPERTY_SUBSTANCE, substance);
                return this;
            }

            public Builder alternate(final Boolean alternate) {
                b.add(FhirPropertyNames.PROPERTY_ALTERNATE, alternate);
                return this;
            }

            public Builder allergenicIndicator(final Boolean allergenicIndicator) {
                b.add(FhirPropertyNames.PROPERTY_ALLERGENIC_INDICATOR, allergenicIndicator);
                return this;
            }

            public DeviceDefinitionMaterial build() {
                return new DeviceDefinitionMaterial(b.build());
            }
        }
    }

    /**
     * The characteristics, operational status and capabilities of a
     * medical-related component of a medical device.
     */
    public static class DeviceDefinitionProperty extends FhirObject {
        public static final String RESOURCE_TYPE = "DeviceDefinitionProperty";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public DeviceDefinitionProperty(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Code that specifies the property DeviceDefinitionPropetyCode
         * (Extensible).
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Property value as a quantity.
         */
        public java.util.List<Quantity> valueQuantity() {
            return getList(Quantity.class, FhirPropertyNames.PROPERTY_VALUE_QUANTITY);
        }

        /**
         * Property value as a code, e.g., NTP4 (synced to NTP).
         */
        public java.util.List<CodeableConcept> valueCode() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_VALUE_CODE);
        }

        public static final class Builder extends FhirObject.Builder<DeviceDefinitionProperty, DeviceDefinitionProperty.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder valueQuantity(final java.util.List<Quantity> valueQuantity) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_QUANTITY, FhirObject.toArray(valueQuantity));
                return this;
            }

            public Builder valueCode(final java.util.List<CodeableConcept> valueCode) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CODE, FhirObject.toArray(valueCode));
                return this;
            }

            public DeviceDefinitionProperty build() {
                return new DeviceDefinitionProperty(b.build());
            }
        }
    }

    /**
     * The characteristics, operational status and capabilities of a
     * medical-related component of a medical device.
     */
    public static class DeviceDefinitionSpecialization extends FhirObject {
        public static final String RESOURCE_TYPE = "DeviceDefinitionSpecialization";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public DeviceDefinitionSpecialization(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The standard that is used to operate and communicate.
         */
        public String systemType() {
            return getString(FhirPropertyNames.PROPERTY_SYSTEM_TYPE);
        }

        /**
         * The version of the standard that is used to operate and communicate.
         */
        public String version() {
            return getString(FhirPropertyNames.PROPERTY_VERSION);
        }

        public static final class Builder extends FhirObject.Builder<DeviceDefinitionSpecialization, DeviceDefinitionSpecialization.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder systemType(final String systemType) {
                b.add(FhirPropertyNames.PROPERTY_SYSTEM_TYPE, systemType);
                return this;
            }

            public Builder version(final String version) {
                b.add(FhirPropertyNames.PROPERTY_VERSION, version);
                return this;
            }

            public DeviceDefinitionSpecialization build() {
                return new DeviceDefinitionSpecialization(b.build());
            }
        }
    }

    /**
     * The characteristics, operational status and capabilities of a
     * medical-related component of a medical device.
     */
    public static class DeviceDefinitionUdiDeviceIdentifier extends FhirObject {
        public static final String RESOURCE_TYPE = "DeviceDefinitionUdiDeviceIdentifier";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public DeviceDefinitionUdiDeviceIdentifier(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The identifier that is to be associated with every Device that
         * references this DeviceDefintiion for the issuer and jurisdication
         * porvided in the DeviceDefinition.udiDeviceIdentifier.
         */
        public String deviceIdentifier() {
            return getString(FhirPropertyNames.PROPERTY_DEVICE_IDENTIFIER);
        }

        /**
         * The organization that assigns the identifier algorithm.
         */
        public java.net.URI issuer() {
            return getUri(FhirPropertyNames.PROPERTY_ISSUER);
        }

        /**
         * The jurisdiction to which the deviceIdentifier applies.
         */
        public java.net.URI jurisdiction() {
            return getUri(FhirPropertyNames.PROPERTY_JURISDICTION);
        }

        public static final class Builder extends FhirObject.Builder<DeviceDefinitionUdiDeviceIdentifier, DeviceDefinitionUdiDeviceIdentifier.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder deviceIdentifier(final String deviceIdentifier) {
                b.add(FhirPropertyNames.PROPERTY_DEVICE_IDENTIFIER, deviceIdentifier);
                return this;
            }

            public Builder issuer(final java.net.URI issuer) {
                b.add(FhirPropertyNames.PROPERTY_ISSUER, issuer.toString());
                return this;
            }

            public Builder jurisdiction(final java.net.URI jurisdiction) {
                b.add(FhirPropertyNames.PROPERTY_JURISDICTION, jurisdiction.toString());
                return this;
            }

            public DeviceDefinitionUdiDeviceIdentifier build() {
                return new DeviceDefinitionUdiDeviceIdentifier(b.build());
            }
        }
    }
}
