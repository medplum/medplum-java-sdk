/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * The regulatory authorization of a medicinal product.
 */
public class MedicinalProductAuthorization extends DomainResource {
    public static final String RESOURCE_TYPE = "MedicinalProductAuthorization";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public MedicinalProductAuthorization(final JsonObject data) {
        super(data);
    }

    /**
     * Business identifier for the marketing authorization, as assigned by a
     * regulator.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The medicinal product that is being authorized.
     */
    public Reference subject() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * The country in which the marketing authorization has been granted.
     */
    public java.util.List<CodeableConcept> country() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_COUNTRY);
    }

    /**
     * Jurisdiction within a country.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_JURISDICTION);
    }

    /**
     * The status of the marketing authorization.
     */
    public CodeableConcept status() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * The date at which the given status has become applicable.
     */
    public java.time.Instant statusDate() {
        return getInstant(FhirPropertyNames.PROPERTY_STATUS_DATE);
    }

    /**
     * The date when a suspended the marketing or the marketing authorization
     * of the product is anticipated to be restored.
     */
    public java.time.Instant restoreDate() {
        return getInstant(FhirPropertyNames.PROPERTY_RESTORE_DATE);
    }

    /**
     * The beginning of the time period in which the marketing authorization
     * is in the specific status shall be specified A complete date
     * consisting of day, month and year shall be specified using the ISO
     * 8601 date format.
     */
    public Period validityPeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_VALIDITY_PERIOD);
    }

    /**
     * A period of time after authorization before generic product
     * applicatiosn can be submitted.
     */
    public Period dataExclusivityPeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_DATA_EXCLUSIVITY_PERIOD);
    }

    /**
     * The date when the first authorization was granted by a Medicines
     * Regulatory Agency.
     */
    public java.time.Instant dateOfFirstAuthorization() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE_OF_FIRST_AUTHORIZATION);
    }

    /**
     * Date of first marketing authorization for a company's new medicinal
     * product in any country in the World.
     */
    public java.time.Instant internationalBirthDate() {
        return getInstant(FhirPropertyNames.PROPERTY_INTERNATIONAL_BIRTH_DATE);
    }

    /**
     * The legal framework against which this authorization is granted.
     */
    public CodeableConcept legalBasis() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_LEGAL_BASIS);
    }

    /**
     * Authorization in areas within a country.
     */
    public java.util.List<MedicinalProductAuthorizationJurisdictionalAuthorization> jurisdictionalAuthorization() {
        return getList(MedicinalProductAuthorizationJurisdictionalAuthorization.class, FhirPropertyNames.PROPERTY_JURISDICTIONAL_AUTHORIZATION);
    }

    /**
     * Marketing Authorization Holder.
     */
    public Reference holder() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_HOLDER);
    }

    /**
     * Medicines Regulatory Agency.
     */
    public Reference regulator() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_REGULATOR);
    }

    /**
     * The regulatory procedure for granting or amending a marketing
     * authorization.
     */
    public MedicinalProductAuthorizationProcedure procedure() {
        return getObject(MedicinalProductAuthorizationProcedure.class, FhirPropertyNames.PROPERTY_PROCEDURE);
    }

    public static final class Builder extends DomainResource.Builder<MedicinalProductAuthorization, MedicinalProductAuthorization.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder country(final java.util.List<CodeableConcept> country) {
            b.add(FhirPropertyNames.PROPERTY_COUNTRY, FhirObject.toArray(country));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(FhirPropertyNames.PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder status(final CodeableConcept status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder statusDate(final java.time.Instant statusDate) {
            b.add(FhirPropertyNames.PROPERTY_STATUS_DATE, statusDate.toString());
            return this;
        }

        public Builder restoreDate(final java.time.Instant restoreDate) {
            b.add(FhirPropertyNames.PROPERTY_RESTORE_DATE, restoreDate.toString());
            return this;
        }

        public Builder validityPeriod(final Period validityPeriod) {
            b.add(FhirPropertyNames.PROPERTY_VALIDITY_PERIOD, validityPeriod);
            return this;
        }

        public Builder dataExclusivityPeriod(final Period dataExclusivityPeriod) {
            b.add(FhirPropertyNames.PROPERTY_DATA_EXCLUSIVITY_PERIOD, dataExclusivityPeriod);
            return this;
        }

        public Builder dateOfFirstAuthorization(final java.time.Instant dateOfFirstAuthorization) {
            b.add(FhirPropertyNames.PROPERTY_DATE_OF_FIRST_AUTHORIZATION, dateOfFirstAuthorization.toString());
            return this;
        }

        public Builder internationalBirthDate(final java.time.Instant internationalBirthDate) {
            b.add(FhirPropertyNames.PROPERTY_INTERNATIONAL_BIRTH_DATE, internationalBirthDate.toString());
            return this;
        }

        public Builder legalBasis(final CodeableConcept legalBasis) {
            b.add(FhirPropertyNames.PROPERTY_LEGAL_BASIS, legalBasis);
            return this;
        }

    public Builder jurisdictionalAuthorization(final
            java.util.List<MedicinalProductAuthorizationJurisdictionalAuthorization> jurisdictionalAuthorization) {
            b.add(FhirPropertyNames.PROPERTY_JURISDICTIONAL_AUTHORIZATION, FhirObject.toArray(jurisdictionalAuthorization));
            return this;
        }

        public Builder holder(final Reference holder) {
            b.add(FhirPropertyNames.PROPERTY_HOLDER, holder);
            return this;
        }

        public Builder regulator(final Reference regulator) {
            b.add(FhirPropertyNames.PROPERTY_REGULATOR, regulator);
            return this;
        }

        public Builder procedure(final MedicinalProductAuthorizationProcedure procedure) {
            b.add(FhirPropertyNames.PROPERTY_PROCEDURE, procedure);
            return this;
        }

        public MedicinalProductAuthorization build() {
            return new MedicinalProductAuthorization(b.build());
        }
    }

    /**
     * The regulatory authorization of a medicinal product.
     */
    public static class MedicinalProductAuthorizationJurisdictionalAuthorization extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicinalProductAuthorizationJurisdictionalAuthorization";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicinalProductAuthorizationJurisdictionalAuthorization(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The assigned number for the marketing authorization.
         */
        public java.util.List<Identifier> identifier() {
            return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
        }

        /**
         * Country of authorization.
         */
        public CodeableConcept country() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_COUNTRY);
        }

        /**
         * Jurisdiction within a country.
         */
        public java.util.List<CodeableConcept> jurisdiction() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_JURISDICTION);
        }

        /**
         * The legal status of supply in a jurisdiction or region.
         */
        public CodeableConcept legalStatusOfSupply() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_LEGAL_STATUS_OF_SUPPLY);
        }

        /**
         * The start and expected end date of the authorization.
         */
        public Period validityPeriod() {
            return getObject(Period.class, FhirPropertyNames.PROPERTY_VALIDITY_PERIOD);
        }

        public static final class Builder extends
                FhirObject.Builder<MedicinalProductAuthorizationJurisdictionalAuthorization,
                MedicinalProductAuthorizationJurisdictionalAuthorization.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder identifier(final java.util.List<Identifier> identifier) {
                b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
                return this;
            }

            public Builder country(final CodeableConcept country) {
                b.add(FhirPropertyNames.PROPERTY_COUNTRY, country);
                return this;
            }

            public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
                b.add(FhirPropertyNames.PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
                return this;
            }

            public Builder legalStatusOfSupply(final CodeableConcept legalStatusOfSupply) {
                b.add(FhirPropertyNames.PROPERTY_LEGAL_STATUS_OF_SUPPLY, legalStatusOfSupply);
                return this;
            }

            public Builder validityPeriod(final Period validityPeriod) {
                b.add(FhirPropertyNames.PROPERTY_VALIDITY_PERIOD, validityPeriod);
                return this;
            }

            public MedicinalProductAuthorizationJurisdictionalAuthorization build() {
                return new MedicinalProductAuthorizationJurisdictionalAuthorization(b.build());
            }
        }
    }

    /**
     * The regulatory authorization of a medicinal product.
     */
    public static class MedicinalProductAuthorizationProcedure extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicinalProductAuthorizationProcedure";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicinalProductAuthorizationProcedure(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Identifier for this procedure.
         */
        public Identifier identifier() {
            return getObject(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
        }

        /**
         * Type of procedure.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Date of procedure.
         */
        public Period datePeriod() {
            return getObject(Period.class, FhirPropertyNames.PROPERTY_DATE_PERIOD);
        }

        /**
         * Date of procedure.
         */
        public String dateDateTime() {
            return getString(FhirPropertyNames.PROPERTY_DATE_DATE_TIME);
        }

        /**
         * Applcations submitted to obtain a marketing authorization.
         */
        public java.util.List<MedicinalProductAuthorizationProcedure> application() {
            return getList(MedicinalProductAuthorizationProcedure.class, FhirPropertyNames.PROPERTY_APPLICATION);
        }

        public static final class Builder extends FhirObject.Builder<MedicinalProductAuthorizationProcedure, MedicinalProductAuthorizationProcedure.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder identifier(final Identifier identifier) {
                b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, identifier);
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder datePeriod(final Period datePeriod) {
                b.add(FhirPropertyNames.PROPERTY_DATE_PERIOD, datePeriod);
                return this;
            }

            public Builder dateDateTime(final String dateDateTime) {
                b.add(FhirPropertyNames.PROPERTY_DATE_DATE_TIME, dateDateTime);
                return this;
            }

            public Builder application(final java.util.List<MedicinalProductAuthorizationProcedure> application) {
                b.add(FhirPropertyNames.PROPERTY_APPLICATION, FhirObject.toArray(application));
                return this;
            }

            public MedicinalProductAuthorizationProcedure build() {
                return new MedicinalProductAuthorizationProcedure(b.build());
            }
        }
    }
}
