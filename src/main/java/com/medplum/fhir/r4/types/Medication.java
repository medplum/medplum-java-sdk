/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * This resource is primarily used for the identification and definition
 * of a medication for the purposes of prescribing, dispensing, and
 * administering a medication as well as for making statements about
 * medication use.
 */
public class Medication extends DomainResource {
    public static final String RESOURCE_TYPE = "Medication";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Medication(final JsonObject data) {
        super(data);
    }

    /**
     * Business identifier for this medication.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * A code (or set of codes) that specify this medication, or a textual
     * description if no code is available. Usage note: This could be a
     * standard medication code such as a code from RxNorm, SNOMED CT, IDMP
     * etc. It could also be a national or local formulary code, optionally
     * with translations to other code systems.
     */
    public CodeableConcept code() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
    }

    /**
     * A code to indicate if the medication is in active use.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * Describes the details of the manufacturer of the medication product.
     * This is not intended to represent the distributor of a medication
     * product.
     */
    public Reference manufacturer() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_MANUFACTURER);
    }

    /**
     * Describes the form of the item.  Powder; tablets; capsule.
     */
    public CodeableConcept form() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_FORM);
    }

    /**
     * Specific amount of the drug in the packaged product.  For example,
     * when specifying a product that has the same strength (For example,
     * Insulin glargine 100 unit per mL solution for injection), this
     * attribute provides additional clarification of the package amount (For
     * example, 3 mL, 10mL, etc.).
     */
    public Ratio amount() {
        return getObject(Ratio.class, FhirPropertyNames.PROPERTY_AMOUNT);
    }

    /**
     * Identifies a particular constituent of interest in the product.
     */
    public java.util.List<MedicationIngredient> ingredient() {
        return getList(MedicationIngredient.class, FhirPropertyNames.PROPERTY_INGREDIENT);
    }

    /**
     * Information that only applies to packages (not products).
     */
    public MedicationBatch batch() {
        return getObject(MedicationBatch.class, FhirPropertyNames.PROPERTY_BATCH);
    }

    public static final class Builder extends DomainResource.Builder<Medication, Medication.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder code(final CodeableConcept code) {
            b.add(FhirPropertyNames.PROPERTY_CODE, code);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder manufacturer(final Reference manufacturer) {
            b.add(FhirPropertyNames.PROPERTY_MANUFACTURER, manufacturer);
            return this;
        }

        public Builder form(final CodeableConcept form) {
            b.add(FhirPropertyNames.PROPERTY_FORM, form);
            return this;
        }

        public Builder amount(final Ratio amount) {
            b.add(FhirPropertyNames.PROPERTY_AMOUNT, amount);
            return this;
        }

        public Builder ingredient(final java.util.List<MedicationIngredient> ingredient) {
            b.add(FhirPropertyNames.PROPERTY_INGREDIENT, FhirObject.toArray(ingredient));
            return this;
        }

        public Builder batch(final MedicationBatch batch) {
            b.add(FhirPropertyNames.PROPERTY_BATCH, batch);
            return this;
        }

        public Medication build() {
            return new Medication(b.build());
        }
    }

    /**
     * This resource is primarily used for the identification and definition
     * of a medication for the purposes of prescribing, dispensing, and
     * administering a medication as well as for making statements about
     * medication use.
     */
    public static class MedicationBatch extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationBatch";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationBatch(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The assigned lot number of a batch of the specified product.
         */
        public String lotNumber() {
            return getString(FhirPropertyNames.PROPERTY_LOT_NUMBER);
        }

        /**
         * When this specific batch of product will expire.
         */
        public java.time.Instant expirationDate() {
            return getInstant(FhirPropertyNames.PROPERTY_EXPIRATION_DATE);
        }

        public static final class Builder extends FhirObject.Builder<MedicationBatch, MedicationBatch.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder lotNumber(final String lotNumber) {
                b.add(FhirPropertyNames.PROPERTY_LOT_NUMBER, lotNumber);
                return this;
            }

            public Builder expirationDate(final java.time.Instant expirationDate) {
                b.add(FhirPropertyNames.PROPERTY_EXPIRATION_DATE, expirationDate.toString());
                return this;
            }

            public MedicationBatch build() {
                return new MedicationBatch(b.build());
            }
        }
    }

    /**
     * This resource is primarily used for the identification and definition
     * of a medication for the purposes of prescribing, dispensing, and
     * administering a medication as well as for making statements about
     * medication use.
     */
    public static class MedicationIngredient extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationIngredient";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationIngredient(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The actual ingredient - either a substance (simple ingredient) or
         * another medication of a medication.
         */
        public CodeableConcept itemCodeableConcept() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_ITEM_CODEABLE_CONCEPT);
        }

        /**
         * The actual ingredient - either a substance (simple ingredient) or
         * another medication of a medication.
         */
        public Reference itemReference() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_ITEM_REFERENCE);
        }

        /**
         * Indication of whether this ingredient affects the therapeutic action
         * of the drug.
         */
        public Boolean isActive() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_IS_ACTIVE);
        }

        /**
         * Specifies how many (or how much) of the items there are in this
         * Medication.  For example, 250 mg per tablet.  This is expressed as a
         * ratio where the numerator is 250mg and the denominator is 1 tablet.
         */
        public Ratio strength() {
            return getObject(Ratio.class, FhirPropertyNames.PROPERTY_STRENGTH);
        }

        public static final class Builder extends FhirObject.Builder<MedicationIngredient, MedicationIngredient.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder itemCodeableConcept(final CodeableConcept itemCodeableConcept) {
                b.add(FhirPropertyNames.PROPERTY_ITEM_CODEABLE_CONCEPT, itemCodeableConcept);
                return this;
            }

            public Builder itemReference(final Reference itemReference) {
                b.add(FhirPropertyNames.PROPERTY_ITEM_REFERENCE, itemReference);
                return this;
            }

            public Builder isActive(final Boolean isActive) {
                b.add(FhirPropertyNames.PROPERTY_IS_ACTIVE, isActive);
                return this;
            }

            public Builder strength(final Ratio strength) {
                b.add(FhirPropertyNames.PROPERTY_STRENGTH, strength);
                return this;
            }

            public MedicationIngredient build() {
                return new MedicationIngredient(b.build());
            }
        }
    }
}
