/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A expression that is evaluated in a specified context and returns a
 * value. The context of use of the expression must specify the context
 * in which the expression is evaluated, and how the result of the
 * expression is used.
 */
public class Expression extends FhirObject {
    public static final String RESOURCE_TYPE = "Expression";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Expression(final JsonObject data) {
        super(data);
    }

    /**
     * Unique id for the element within a resource (for internal references).
     * This may be any string value that does not contain spaces.
     */
    public String id() {
        return getString(FhirPropertyNames.PROPERTY_ID);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the element. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
    }

    /**
     * A brief, natural language description of the condition that
     * effectively communicates the intended semantics.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * A short name assigned to the expression to allow for multiple reuse of
     * the expression in the context where it is defined.
     */
    public String name() {
        return getString(FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * The media type of the language for the expression.
     */
    public String language() {
        return getString(FhirPropertyNames.PROPERTY_LANGUAGE);
    }

    /**
     * An expression in the specified language that returns a value.
     */
    public String expression() {
        return getString(FhirPropertyNames.PROPERTY_EXPRESSION);
    }

    /**
     * A URI that defines where the expression is found.
     */
    public java.net.URI reference() {
        return getUri(FhirPropertyNames.PROPERTY_REFERENCE);
    }

    public static final class Builder extends FhirObject.Builder<Expression, Expression.Builder> {

        private Builder() {
            super();
        }

        private Builder(final JsonObject data) {
            super(data);
        }

        public Builder id(final String id) {
            b.add(FhirPropertyNames.PROPERTY_ID, id);
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder name(final String name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, name);
            return this;
        }

        public Builder language(final String language) {
            b.add(FhirPropertyNames.PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder expression(final String expression) {
            b.add(FhirPropertyNames.PROPERTY_EXPRESSION, expression);
            return this;
        }

        public Builder reference(final java.net.URI reference) {
            b.add(FhirPropertyNames.PROPERTY_REFERENCE, reference.toString());
            return this;
        }

        public Expression build() {
            return new Expression(b.build());
        }
    }
}
