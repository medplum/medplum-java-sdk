/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Source material shall capture information on the taxonomic and
 * anatomical origins as well as the fraction of a material that can
 * result in or can be modified to form a substance. This set of data
 * elements shall be used to define polymer substances isolated from
 * biological matrices. Taxonomic and anatomical origins shall be
 * described using a controlled vocabulary as required. This information
 * is captured for naturally derived polymers ( . starch) and
 * structurally diverse substances. For Organisms belonging to the
 * Kingdom Plantae the Substance level defines the fresh material of a
 * single species or infraspecies, the Herbal Drug and the Herbal
 * preparation. For Herbal preparations, the fraction information will be
 * captured at the Substance information level and additional information
 * for herbal extracts will be captured at the Specified Substance Group
 * 1 information level. See for further explanation the Substance Class:
 * Structurally Diverse and the herbal annex.
 */
public class SubstanceSourceMaterial extends DomainResource {
    public static final String RESOURCE_TYPE = "SubstanceSourceMaterial";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public SubstanceSourceMaterial(final JsonObject data) {
        super(data);
    }

    /**
     * General high level classification of the source material specific to
     * the origin of the material.
     */
    public CodeableConcept sourceMaterialClass() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_SOURCE_MATERIAL_CLASS);
    }

    /**
     * The type of the source material shall be specified based on a
     * controlled vocabulary. For vaccines, this subclause refers to the
     * class of infectious agent.
     */
    public CodeableConcept sourceMaterialType() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_SOURCE_MATERIAL_TYPE);
    }

    /**
     * The state of the source material when extracted.
     */
    public CodeableConcept sourceMaterialState() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_SOURCE_MATERIAL_STATE);
    }

    /**
     * The unique identifier associated with the source material parent
     * organism shall be specified.
     */
    public Identifier organismId() {
        return getObject(Identifier.class, FhirPropertyNames.PROPERTY_ORGANISM_ID);
    }

    /**
     * The organism accepted Scientific name shall be provided based on the
     * organism taxonomy.
     */
    public String organismName() {
        return getString(FhirPropertyNames.PROPERTY_ORGANISM_NAME);
    }

    /**
     * The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID
     * of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L.
     * (Whole plant).
     */
    public java.util.List<Identifier> parentSubstanceId() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_PARENT_SUBSTANCE_ID);
    }

    /**
     * The parent substance of the Herbal Drug, or Herbal preparation.
     */
    public java.util.List<String> parentSubstanceName() {
        return getList(String.class, FhirPropertyNames.PROPERTY_PARENT_SUBSTANCE_NAME);
    }

    /**
     * The country where the plant material is harvested or the countries
     * where the plasma is sourced from as laid down in accordance with the
     * Plasma Master File. For &ldquo;Plasma-derived substances&rdquo; the attribute
     * country of origin provides information about the countries used for
     * the manufacturing of the Cryopoor plama or Crioprecipitate.
     */
    public java.util.List<CodeableConcept> countryOfOrigin() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_COUNTRY_OF_ORIGIN);
    }

    /**
     * The place/region where the plant is harvested or the places/regions
     * where the animal source material has its habitat.
     */
    public java.util.List<String> geographicalLocation() {
        return getList(String.class, FhirPropertyNames.PROPERTY_GEOGRAPHICAL_LOCATION);
    }

    /**
     * Stage of life for animals, plants, insects and microorganisms. This
     * information shall be provided only when the substance is significantly
     * different in these stages (e.g. foetal bovine serum).
     */
    public CodeableConcept developmentStage() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_DEVELOPMENT_STAGE);
    }

    /**
     * Many complex materials are fractions of parts of plants, animals, or
     * minerals. Fraction elements are often necessary to define both
     * Substances and Specified Group 1 Substances. For substances derived
     * from Plants, fraction information will be captured at the Substance
     * information level ( . Oils, Juices and Exudates). Additional
     * information for Extracts, such as extraction solvent composition, will
     * be captured at the Specified Substance Group 1 information level. For
     * plasma-derived products fraction information will be captured at the
     * Substance and the Specified Substance Group 1 levels.
     */
    public java.util.List<SubstanceSourceMaterialFractionDescription> fractionDescription() {
        return getList(SubstanceSourceMaterialFractionDescription.class, FhirPropertyNames.PROPERTY_FRACTION_DESCRIPTION);
    }

    /**
     * This subclause describes the organism which the substance is derived
     * from. For vaccines, the parent organism shall be specified based on
     * these subclause elements. As an example, full taxonomy will be
     * described for the Substance Name: ., Leaf.
     */
    public SubstanceSourceMaterialOrganism organism() {
        return getObject(SubstanceSourceMaterialOrganism.class, FhirPropertyNames.PROPERTY_ORGANISM);
    }

    /**
     * To do.
     */
    public java.util.List<SubstanceSourceMaterialPartDescription> partDescription() {
        return getList(SubstanceSourceMaterialPartDescription.class, FhirPropertyNames.PROPERTY_PART_DESCRIPTION);
    }

    public static final class Builder extends DomainResource.Builder<SubstanceSourceMaterial, SubstanceSourceMaterial.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder sourceMaterialClass(final CodeableConcept sourceMaterialClass) {
            b.add(FhirPropertyNames.PROPERTY_SOURCE_MATERIAL_CLASS, sourceMaterialClass);
            return this;
        }

        public Builder sourceMaterialType(final CodeableConcept sourceMaterialType) {
            b.add(FhirPropertyNames.PROPERTY_SOURCE_MATERIAL_TYPE, sourceMaterialType);
            return this;
        }

        public Builder sourceMaterialState(final CodeableConcept sourceMaterialState) {
            b.add(FhirPropertyNames.PROPERTY_SOURCE_MATERIAL_STATE, sourceMaterialState);
            return this;
        }

        public Builder organismId(final Identifier organismId) {
            b.add(FhirPropertyNames.PROPERTY_ORGANISM_ID, organismId);
            return this;
        }

        public Builder organismName(final String organismName) {
            b.add(FhirPropertyNames.PROPERTY_ORGANISM_NAME, organismName);
            return this;
        }

        public Builder parentSubstanceId(final java.util.List<Identifier> parentSubstanceId) {
            b.add(FhirPropertyNames.PROPERTY_PARENT_SUBSTANCE_ID, FhirObject.toArray(parentSubstanceId));
            return this;
        }

        public Builder parentSubstanceName(final java.util.List<String> parentSubstanceName) {
            b.add(FhirPropertyNames.PROPERTY_PARENT_SUBSTANCE_NAME, FhirObject.toStringArray(parentSubstanceName));
            return this;
        }

        public Builder countryOfOrigin(final java.util.List<CodeableConcept> countryOfOrigin) {
            b.add(FhirPropertyNames.PROPERTY_COUNTRY_OF_ORIGIN, FhirObject.toArray(countryOfOrigin));
            return this;
        }

        public Builder geographicalLocation(final java.util.List<String> geographicalLocation) {
            b.add(FhirPropertyNames.PROPERTY_GEOGRAPHICAL_LOCATION, FhirObject.toStringArray(geographicalLocation));
            return this;
        }

        public Builder developmentStage(final CodeableConcept developmentStage) {
            b.add(FhirPropertyNames.PROPERTY_DEVELOPMENT_STAGE, developmentStage);
            return this;
        }

        public Builder fractionDescription(final java.util.List<SubstanceSourceMaterialFractionDescription> fractionDescription) {
            b.add(FhirPropertyNames.PROPERTY_FRACTION_DESCRIPTION, FhirObject.toArray(fractionDescription));
            return this;
        }

        public Builder organism(final SubstanceSourceMaterialOrganism organism) {
            b.add(FhirPropertyNames.PROPERTY_ORGANISM, organism);
            return this;
        }

        public Builder partDescription(final java.util.List<SubstanceSourceMaterialPartDescription> partDescription) {
            b.add(FhirPropertyNames.PROPERTY_PART_DESCRIPTION, FhirObject.toArray(partDescription));
            return this;
        }

        public SubstanceSourceMaterial build() {
            return new SubstanceSourceMaterial(b.build());
        }
    }

    /**
     * Source material shall capture information on the taxonomic and
     * anatomical origins as well as the fraction of a material that can
     * result in or can be modified to form a substance. This set of data
     * elements shall be used to define polymer substances isolated from
     * biological matrices. Taxonomic and anatomical origins shall be
     * described using a controlled vocabulary as required. This information
     * is captured for naturally derived polymers ( . starch) and
     * structurally diverse substances. For Organisms belonging to the
     * Kingdom Plantae the Substance level defines the fresh material of a
     * single species or infraspecies, the Herbal Drug and the Herbal
     * preparation. For Herbal preparations, the fraction information will be
     * captured at the Substance information level and additional information
     * for herbal extracts will be captured at the Specified Substance Group
     * 1 information level. See for further explanation the Substance Class:
     * Structurally Diverse and the herbal annex.
     */
    public static class SubstanceSourceMaterialAuthor extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceSourceMaterialAuthor";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceSourceMaterialAuthor(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The type of author of an organism species shall be specified. The
         * parenthetical author of an organism species refers to the first author
         * who published the plant/animal name (of any rank). The primary author
         * of an organism species refers to the first author(s), who validly
         * published the plant/animal name.
         */
        public CodeableConcept authorType() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_AUTHOR_TYPE);
        }

        /**
         * The author of an organism species shall be specified. The author year
         * of an organism shall also be specified when applicable; refers to the
         * year in which the first author(s) published the infraspecific
         * plant/animal name (of any rank).
         */
        public String authorDescription() {
            return getString(FhirPropertyNames.PROPERTY_AUTHOR_DESCRIPTION);
        }

        public static final class Builder extends FhirObject.Builder<SubstanceSourceMaterialAuthor, SubstanceSourceMaterialAuthor.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder authorType(final CodeableConcept authorType) {
                b.add(FhirPropertyNames.PROPERTY_AUTHOR_TYPE, authorType);
                return this;
            }

            public Builder authorDescription(final String authorDescription) {
                b.add(FhirPropertyNames.PROPERTY_AUTHOR_DESCRIPTION, authorDescription);
                return this;
            }

            public SubstanceSourceMaterialAuthor build() {
                return new SubstanceSourceMaterialAuthor(b.build());
            }
        }
    }

    /**
     * Source material shall capture information on the taxonomic and
     * anatomical origins as well as the fraction of a material that can
     * result in or can be modified to form a substance. This set of data
     * elements shall be used to define polymer substances isolated from
     * biological matrices. Taxonomic and anatomical origins shall be
     * described using a controlled vocabulary as required. This information
     * is captured for naturally derived polymers ( . starch) and
     * structurally diverse substances. For Organisms belonging to the
     * Kingdom Plantae the Substance level defines the fresh material of a
     * single species or infraspecies, the Herbal Drug and the Herbal
     * preparation. For Herbal preparations, the fraction information will be
     * captured at the Substance information level and additional information
     * for herbal extracts will be captured at the Specified Substance Group
     * 1 information level. See for further explanation the Substance Class:
     * Structurally Diverse and the herbal annex.
     */
    public static class SubstanceSourceMaterialFractionDescription extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceSourceMaterialFractionDescription";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceSourceMaterialFractionDescription(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * This element is capturing information about the fraction of a plant
         * part, or human plasma for fractionation.
         */
        public String fraction() {
            return getString(FhirPropertyNames.PROPERTY_FRACTION);
        }

        /**
         * The specific type of the material constituting the component. For
         * Herbal preparations the particulars of the extracts (liquid/dry) is
         * described in Specified Substance Group 1.
         */
        public CodeableConcept materialType() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_MATERIAL_TYPE);
        }

        public static final class Builder extends FhirObject.Builder<SubstanceSourceMaterialFractionDescription,
                SubstanceSourceMaterialFractionDescription.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder fraction(final String fraction) {
                b.add(FhirPropertyNames.PROPERTY_FRACTION, fraction);
                return this;
            }

            public Builder materialType(final CodeableConcept materialType) {
                b.add(FhirPropertyNames.PROPERTY_MATERIAL_TYPE, materialType);
                return this;
            }

            public SubstanceSourceMaterialFractionDescription build() {
                return new SubstanceSourceMaterialFractionDescription(b.build());
            }
        }
    }

    /**
     * Source material shall capture information on the taxonomic and
     * anatomical origins as well as the fraction of a material that can
     * result in or can be modified to form a substance. This set of data
     * elements shall be used to define polymer substances isolated from
     * biological matrices. Taxonomic and anatomical origins shall be
     * described using a controlled vocabulary as required. This information
     * is captured for naturally derived polymers ( . starch) and
     * structurally diverse substances. For Organisms belonging to the
     * Kingdom Plantae the Substance level defines the fresh material of a
     * single species or infraspecies, the Herbal Drug and the Herbal
     * preparation. For Herbal preparations, the fraction information will be
     * captured at the Substance information level and additional information
     * for herbal extracts will be captured at the Specified Substance Group
     * 1 information level. See for further explanation the Substance Class:
     * Structurally Diverse and the herbal annex.
     */
    public static class SubstanceSourceMaterialHybrid extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceSourceMaterialHybrid";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceSourceMaterialHybrid(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The identifier of the maternal species constituting the hybrid
         * organism shall be specified based on a controlled vocabulary. For
         * plants, the parents aren&rsquo;t always known, and it is unlikely that it
         * will be known which is maternal and which is paternal.
         */
        public String maternalOrganismId() {
            return getString(FhirPropertyNames.PROPERTY_MATERNAL_ORGANISM_ID);
        }

        /**
         * The name of the maternal species constituting the hybrid organism
         * shall be specified. For plants, the parents aren&rsquo;t always known, and
         * it is unlikely that it will be known which is maternal and which is
         * paternal.
         */
        public String maternalOrganismName() {
            return getString(FhirPropertyNames.PROPERTY_MATERNAL_ORGANISM_NAME);
        }

        /**
         * The identifier of the paternal species constituting the hybrid
         * organism shall be specified based on a controlled vocabulary.
         */
        public String paternalOrganismId() {
            return getString(FhirPropertyNames.PROPERTY_PATERNAL_ORGANISM_ID);
        }

        /**
         * The name of the paternal species constituting the hybrid organism
         * shall be specified.
         */
        public String paternalOrganismName() {
            return getString(FhirPropertyNames.PROPERTY_PATERNAL_ORGANISM_NAME);
        }

        /**
         * The hybrid type of an organism shall be specified.
         */
        public CodeableConcept hybridType() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_HYBRID_TYPE);
        }

        public static final class Builder extends FhirObject.Builder<SubstanceSourceMaterialHybrid, SubstanceSourceMaterialHybrid.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder maternalOrganismId(final String maternalOrganismId) {
                b.add(FhirPropertyNames.PROPERTY_MATERNAL_ORGANISM_ID, maternalOrganismId);
                return this;
            }

            public Builder maternalOrganismName(final String maternalOrganismName) {
                b.add(FhirPropertyNames.PROPERTY_MATERNAL_ORGANISM_NAME, maternalOrganismName);
                return this;
            }

            public Builder paternalOrganismId(final String paternalOrganismId) {
                b.add(FhirPropertyNames.PROPERTY_PATERNAL_ORGANISM_ID, paternalOrganismId);
                return this;
            }

            public Builder paternalOrganismName(final String paternalOrganismName) {
                b.add(FhirPropertyNames.PROPERTY_PATERNAL_ORGANISM_NAME, paternalOrganismName);
                return this;
            }

            public Builder hybridType(final CodeableConcept hybridType) {
                b.add(FhirPropertyNames.PROPERTY_HYBRID_TYPE, hybridType);
                return this;
            }

            public SubstanceSourceMaterialHybrid build() {
                return new SubstanceSourceMaterialHybrid(b.build());
            }
        }
    }

    /**
     * Source material shall capture information on the taxonomic and
     * anatomical origins as well as the fraction of a material that can
     * result in or can be modified to form a substance. This set of data
     * elements shall be used to define polymer substances isolated from
     * biological matrices. Taxonomic and anatomical origins shall be
     * described using a controlled vocabulary as required. This information
     * is captured for naturally derived polymers ( . starch) and
     * structurally diverse substances. For Organisms belonging to the
     * Kingdom Plantae the Substance level defines the fresh material of a
     * single species or infraspecies, the Herbal Drug and the Herbal
     * preparation. For Herbal preparations, the fraction information will be
     * captured at the Substance information level and additional information
     * for herbal extracts will be captured at the Specified Substance Group
     * 1 information level. See for further explanation the Substance Class:
     * Structurally Diverse and the herbal annex.
     */
    public static class SubstanceSourceMaterialOrganism extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceSourceMaterialOrganism";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceSourceMaterialOrganism(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The family of an organism shall be specified.
         */
        public CodeableConcept family() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_FAMILY);
        }

        /**
         * The genus of an organism shall be specified; refers to the Latin
         * epithet of the genus element of the plant/animal scientific name; it
         * is present in names for genera, species and infraspecies.
         */
        public CodeableConcept genus() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_GENUS);
        }

        /**
         * The species of an organism shall be specified; refers to the Latin
         * epithet of the species of the plant/animal; it is present in names for
         * species and infraspecies.
         */
        public CodeableConcept species() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_SPECIES);
        }

        /**
         * The Intraspecific type of an organism shall be specified.
         */
        public CodeableConcept intraspecificType() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_INTRASPECIFIC_TYPE);
        }

        /**
         * The intraspecific description of an organism shall be specified based
         * on a controlled vocabulary. For Influenza Vaccine, the intraspecific
         * description shall contain the syntax of the antigen in line with the
         * WHO convention.
         */
        public String intraspecificDescription() {
            return getString(FhirPropertyNames.PROPERTY_INTRASPECIFIC_DESCRIPTION);
        }

        /**
         * 4.9.13.6.1 Author type (Conditional).
         */
        public java.util.List<SubstanceSourceMaterialAuthor> author() {
            return getList(SubstanceSourceMaterialAuthor.class, FhirPropertyNames.PROPERTY_AUTHOR);
        }

        /**
         * 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
         */
        public SubstanceSourceMaterialHybrid hybrid() {
            return getObject(SubstanceSourceMaterialHybrid.class, FhirPropertyNames.PROPERTY_HYBRID);
        }

        /**
         * 4.9.13.7.1 Kingdom (Conditional).
         */
        public SubstanceSourceMaterialOrganismGeneral organismGeneral() {
            return getObject(SubstanceSourceMaterialOrganismGeneral.class, FhirPropertyNames.PROPERTY_ORGANISM_GENERAL);
        }

        public static final class Builder extends FhirObject.Builder<SubstanceSourceMaterialOrganism, SubstanceSourceMaterialOrganism.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder family(final CodeableConcept family) {
                b.add(FhirPropertyNames.PROPERTY_FAMILY, family);
                return this;
            }

            public Builder genus(final CodeableConcept genus) {
                b.add(FhirPropertyNames.PROPERTY_GENUS, genus);
                return this;
            }

            public Builder species(final CodeableConcept species) {
                b.add(FhirPropertyNames.PROPERTY_SPECIES, species);
                return this;
            }

            public Builder intraspecificType(final CodeableConcept intraspecificType) {
                b.add(FhirPropertyNames.PROPERTY_INTRASPECIFIC_TYPE, intraspecificType);
                return this;
            }

            public Builder intraspecificDescription(final String intraspecificDescription) {
                b.add(FhirPropertyNames.PROPERTY_INTRASPECIFIC_DESCRIPTION, intraspecificDescription);
                return this;
            }

            public Builder author(final java.util.List<SubstanceSourceMaterialAuthor> author) {
                b.add(FhirPropertyNames.PROPERTY_AUTHOR, FhirObject.toArray(author));
                return this;
            }

            public Builder hybrid(final SubstanceSourceMaterialHybrid hybrid) {
                b.add(FhirPropertyNames.PROPERTY_HYBRID, hybrid);
                return this;
            }

            public Builder organismGeneral(final SubstanceSourceMaterialOrganismGeneral organismGeneral) {
                b.add(FhirPropertyNames.PROPERTY_ORGANISM_GENERAL, organismGeneral);
                return this;
            }

            public SubstanceSourceMaterialOrganism build() {
                return new SubstanceSourceMaterialOrganism(b.build());
            }
        }
    }

    /**
     * Source material shall capture information on the taxonomic and
     * anatomical origins as well as the fraction of a material that can
     * result in or can be modified to form a substance. This set of data
     * elements shall be used to define polymer substances isolated from
     * biological matrices. Taxonomic and anatomical origins shall be
     * described using a controlled vocabulary as required. This information
     * is captured for naturally derived polymers ( . starch) and
     * structurally diverse substances. For Organisms belonging to the
     * Kingdom Plantae the Substance level defines the fresh material of a
     * single species or infraspecies, the Herbal Drug and the Herbal
     * preparation. For Herbal preparations, the fraction information will be
     * captured at the Substance information level and additional information
     * for herbal extracts will be captured at the Specified Substance Group
     * 1 information level. See for further explanation the Substance Class:
     * Structurally Diverse and the herbal annex.
     */
    public static class SubstanceSourceMaterialOrganismGeneral extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceSourceMaterialOrganismGeneral";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceSourceMaterialOrganismGeneral(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The kingdom of an organism shall be specified.
         */
        public CodeableConcept kingdom() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_KINGDOM);
        }

        /**
         * The phylum of an organism shall be specified.
         */
        public CodeableConcept phylum() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_PHYLUM);
        }

        /**
         * The class of an organism shall be specified.
         */
        public CodeableConcept classValue() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CLASS);
        }

        /**
         * The order of an organism shall be specified,.
         */
        public CodeableConcept order() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_ORDER);
        }

        public static final class Builder extends FhirObject.Builder<SubstanceSourceMaterialOrganismGeneral, SubstanceSourceMaterialOrganismGeneral.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder kingdom(final CodeableConcept kingdom) {
                b.add(FhirPropertyNames.PROPERTY_KINGDOM, kingdom);
                return this;
            }

            public Builder phylum(final CodeableConcept phylum) {
                b.add(FhirPropertyNames.PROPERTY_PHYLUM, phylum);
                return this;
            }

            public Builder classValue(final CodeableConcept classValue) {
                b.add(FhirPropertyNames.PROPERTY_CLASS, classValue);
                return this;
            }

            public Builder order(final CodeableConcept order) {
                b.add(FhirPropertyNames.PROPERTY_ORDER, order);
                return this;
            }

            public SubstanceSourceMaterialOrganismGeneral build() {
                return new SubstanceSourceMaterialOrganismGeneral(b.build());
            }
        }
    }

    /**
     * Source material shall capture information on the taxonomic and
     * anatomical origins as well as the fraction of a material that can
     * result in or can be modified to form a substance. This set of data
     * elements shall be used to define polymer substances isolated from
     * biological matrices. Taxonomic and anatomical origins shall be
     * described using a controlled vocabulary as required. This information
     * is captured for naturally derived polymers ( . starch) and
     * structurally diverse substances. For Organisms belonging to the
     * Kingdom Plantae the Substance level defines the fresh material of a
     * single species or infraspecies, the Herbal Drug and the Herbal
     * preparation. For Herbal preparations, the fraction information will be
     * captured at the Substance information level and additional information
     * for herbal extracts will be captured at the Specified Substance Group
     * 1 information level. See for further explanation the Substance Class:
     * Structurally Diverse and the herbal annex.
     */
    public static class SubstanceSourceMaterialPartDescription extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceSourceMaterialPartDescription";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceSourceMaterialPartDescription(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Entity of anatomical origin of source material within an organism.
         */
        public CodeableConcept part() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_PART);
        }

        /**
         * The detailed anatomic location when the part can be extracted from
         * different anatomical locations of the organism. Multiple alternative
         * locations may apply.
         */
        public CodeableConcept partLocation() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_PART_LOCATION);
        }

        public static final class Builder extends FhirObject.Builder<SubstanceSourceMaterialPartDescription, SubstanceSourceMaterialPartDescription.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder part(final CodeableConcept part) {
                b.add(FhirPropertyNames.PROPERTY_PART, part);
                return this;
            }

            public Builder partLocation(final CodeableConcept partLocation) {
                b.add(FhirPropertyNames.PROPERTY_PART_LOCATION, partLocation);
                return this;
            }

            public SubstanceSourceMaterialPartDescription build() {
                return new SubstanceSourceMaterialPartDescription(b.build());
            }
        }
    }
}
