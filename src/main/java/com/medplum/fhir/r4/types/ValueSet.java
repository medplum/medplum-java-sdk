/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A ValueSet resource instance specifies a set of codes drawn from one
 * or more code systems, intended for use in a particular context. Value
 * sets link between [[[CodeSystem]]] definitions and their use in [coded
 * elements](terminologies.html).
 */
public class ValueSet extends DomainResource {
    public static final String RESOURCE_TYPE = "ValueSet";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ValueSet(final JsonObject data) {
        super(data);
    }

    /**
     * An absolute URI that is used to identify this value set when it is
     * referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative
     * instance of this value set is (or will be) published. This URL can be
     * the target of a canonical reference. It SHALL remain the same when the
     * value set is stored on different servers.
     */
    public java.net.URI url() {
        return getUri(FhirPropertyNames.PROPERTY_URL);
    }

    /**
     * A formal identifier that is used to identify this value set when it is
     * represented in other formats, or referenced in a specification, model,
     * design or an instance.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The identifier that is used to identify this version of the value set
     * when it is referenced in a specification, model, design or instance.
     * This is an arbitrary value managed by the value set author and is not
     * expected to be globally unique. For example, it might be a timestamp
     * (e.g. yyyymmdd) if a managed version is not available. There is also
     * no expectation that versions can be placed in a lexicographical
     * sequence.
     */
    public String version() {
        return getString(FhirPropertyNames.PROPERTY_VERSION);
    }

    /**
     * A natural language name identifying the value set. This name should be
     * usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    public String name() {
        return getString(FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * A short, descriptive, user-friendly title for the value set.
     */
    public String title() {
        return getString(FhirPropertyNames.PROPERTY_TITLE);
    }

    /**
     * The status of this value set. Enables tracking the life-cycle of the
     * content. The status of the value set applies to the value set
     * definition (ValueSet.compose) and the associated ValueSet metadata.
     * Expansions do not have a state.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * A Boolean value to indicate that this value set is authored for
     * testing purposes (or education/evaluation/marketing) and is not
     * intended to be used for genuine usage.
     */
    public Boolean experimental() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_EXPERIMENTAL);
    }

    /**
     * The date (and optionally time) when the value set was created or
     * revised (e.g. the 'content logical definition').
     */
    public java.time.Instant date() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE);
    }

    /**
     * The name of the organization or individual that published the value
     * set.
     */
    public String publisher() {
        return getString(FhirPropertyNames.PROPERTY_PUBLISHER);
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_CONTACT);
    }

    /**
     * A free text natural language description of the value set from a
     * consumer's perspective. The textual description specifies the span of
     * meanings for concepts to be included within the Value Set Expansion,
     * and also may specify the intended use and limitations of the Value
     * Set.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs
     * (insurance plans, studies, ...) and may be used to assist with
     * indexing and searching for appropriate value set instances.
     */
    public java.util.List<UsageContext> useContext() {
        return getList(UsageContext.class, FhirPropertyNames.PROPERTY_USE_CONTEXT);
    }

    /**
     * A legal or geographic region in which the value set is intended to be
     * used.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_JURISDICTION);
    }

    /**
     * If this is set to 'true', then no new versions of the content logical
     * definition can be created.  Note: Other metadata might still change.
     */
    public Boolean immutable() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_IMMUTABLE);
    }

    /**
     * Explanation of why this value set is needed and why it has been
     * designed as it has.
     */
    public String purpose() {
        return getString(FhirPropertyNames.PROPERTY_PURPOSE);
    }

    /**
     * A copyright statement relating to the value set and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the value set.
     */
    public String copyright() {
        return getString(FhirPropertyNames.PROPERTY_COPYRIGHT);
    }

    /**
     * A set of criteria that define the contents of the value set by
     * including or excluding codes selected from the specified code
     * system(s) that the value set draws from. This is also known as the
     * Content Logical Definition (CLD).
     */
    public ValueSetCompose compose() {
        return getObject(ValueSetCompose.class, FhirPropertyNames.PROPERTY_COMPOSE);
    }

    /**
     * A value set can also be &quot;expanded&quot;, where the value set is turned into
     * a simple collection of enumerated codes. This element holds the
     * expansion, if it has been performed.
     */
    public ValueSetExpansion expansion() {
        return getObject(ValueSetExpansion.class, FhirPropertyNames.PROPERTY_EXPANSION);
    }

    public static final class Builder extends DomainResource.Builder<ValueSet, ValueSet.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder url(final java.net.URI url) {
            b.add(FhirPropertyNames.PROPERTY_URL, url.toString());
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder version(final String version) {
            b.add(FhirPropertyNames.PROPERTY_VERSION, version);
            return this;
        }

        public Builder name(final String name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, name);
            return this;
        }

        public Builder title(final String title) {
            b.add(FhirPropertyNames.PROPERTY_TITLE, title);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder experimental(final Boolean experimental) {
            b.add(FhirPropertyNames.PROPERTY_EXPERIMENTAL, experimental);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder publisher(final String publisher) {
            b.add(FhirPropertyNames.PROPERTY_PUBLISHER, publisher);
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(FhirPropertyNames.PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder useContext(final java.util.List<UsageContext> useContext) {
            b.add(FhirPropertyNames.PROPERTY_USE_CONTEXT, FhirObject.toArray(useContext));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(FhirPropertyNames.PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder immutable(final Boolean immutable) {
            b.add(FhirPropertyNames.PROPERTY_IMMUTABLE, immutable);
            return this;
        }

        public Builder purpose(final String purpose) {
            b.add(FhirPropertyNames.PROPERTY_PURPOSE, purpose);
            return this;
        }

        public Builder copyright(final String copyright) {
            b.add(FhirPropertyNames.PROPERTY_COPYRIGHT, copyright);
            return this;
        }

        public Builder compose(final ValueSetCompose compose) {
            b.add(FhirPropertyNames.PROPERTY_COMPOSE, compose);
            return this;
        }

        public Builder expansion(final ValueSetExpansion expansion) {
            b.add(FhirPropertyNames.PROPERTY_EXPANSION, expansion);
            return this;
        }

        public ValueSet build() {
            return new ValueSet(b.build());
        }
    }

    /**
     * A ValueSet resource instance specifies a set of codes drawn from one
     * or more code systems, intended for use in a particular context. Value
     * sets link between [[[CodeSystem]]] definitions and their use in [coded
     * elements](terminologies.html).
     */
    public static class ValueSetCompose extends FhirObject {
        public static final String RESOURCE_TYPE = "ValueSetCompose";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ValueSetCompose(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The Locked Date is  the effective date that is used to determine the
         * version of all referenced Code Systems and Value Set Definitions
         * included in the compose that are not already tied to a specific
         * version.
         */
        public java.time.LocalDate lockedDate() {
            return getLocalDate(FhirPropertyNames.PROPERTY_LOCKED_DATE);
        }

        /**
         * Whether inactive codes - codes that are not approved for current use -
         * are in the value set. If inactive = true, inactive codes are to be
         * included in the expansion, if inactive = false, the inactive codes
         * will not be included in the expansion. If absent, the behavior is
         * determined by the implementation, or by the applicable $expand
         * parameters (but generally, inactive codes would be expected to be
         * included).
         */
        public Boolean inactive() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_INACTIVE);
        }

        /**
         * Include one or more codes from a code system or other value set(s).
         */
        public java.util.List<ValueSetInclude> include() {
            return getList(ValueSetInclude.class, FhirPropertyNames.PROPERTY_INCLUDE);
        }

        /**
         * Exclude one or more codes from the value set based on code system
         * filters and/or other value sets.
         */
        public java.util.List<ValueSetInclude> exclude() {
            return getList(ValueSetInclude.class, FhirPropertyNames.PROPERTY_EXCLUDE);
        }

        public static final class Builder extends FhirObject.Builder<ValueSetCompose, ValueSetCompose.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder lockedDate(final java.time.LocalDate lockedDate) {
                b.add(FhirPropertyNames.PROPERTY_LOCKED_DATE, lockedDate.toString());
                return this;
            }

            public Builder inactive(final Boolean inactive) {
                b.add(FhirPropertyNames.PROPERTY_INACTIVE, inactive);
                return this;
            }

            public Builder include(final java.util.List<ValueSetInclude> include) {
                b.add(FhirPropertyNames.PROPERTY_INCLUDE, FhirObject.toArray(include));
                return this;
            }

            public Builder exclude(final java.util.List<ValueSetInclude> exclude) {
                b.add(FhirPropertyNames.PROPERTY_EXCLUDE, FhirObject.toArray(exclude));
                return this;
            }

            public ValueSetCompose build() {
                return new ValueSetCompose(b.build());
            }
        }
    }

    /**
     * A ValueSet resource instance specifies a set of codes drawn from one
     * or more code systems, intended for use in a particular context. Value
     * sets link between [[[CodeSystem]]] definitions and their use in [coded
     * elements](terminologies.html).
     */
    public static class ValueSetConcept extends FhirObject {
        public static final String RESOURCE_TYPE = "ValueSetConcept";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ValueSetConcept(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Specifies a code for the concept to be included or excluded.
         */
        public String code() {
            return getString(FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * The text to display to the user for this concept in the context of
         * this valueset. If no display is provided, then applications using the
         * value set use the display specified for the code by the system.
         */
        public String display() {
            return getString(FhirPropertyNames.PROPERTY_DISPLAY);
        }

        /**
         * Additional representations for this concept when used in this value
         * set - other languages, aliases, specialized purposes, used for
         * particular purposes, etc.
         */
        public java.util.List<ValueSetDesignation> designation() {
            return getList(ValueSetDesignation.class, FhirPropertyNames.PROPERTY_DESIGNATION);
        }

        public static final class Builder extends FhirObject.Builder<ValueSetConcept, ValueSetConcept.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final String code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder display(final String display) {
                b.add(FhirPropertyNames.PROPERTY_DISPLAY, display);
                return this;
            }

            public Builder designation(final java.util.List<ValueSetDesignation> designation) {
                b.add(FhirPropertyNames.PROPERTY_DESIGNATION, FhirObject.toArray(designation));
                return this;
            }

            public ValueSetConcept build() {
                return new ValueSetConcept(b.build());
            }
        }
    }

    /**
     * A ValueSet resource instance specifies a set of codes drawn from one
     * or more code systems, intended for use in a particular context. Value
     * sets link between [[[CodeSystem]]] definitions and their use in [coded
     * elements](terminologies.html).
     */
    public static class ValueSetContains extends FhirObject {
        public static final String RESOURCE_TYPE = "ValueSetContains";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ValueSetContains(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * An absolute URI which is the code system in which the code for this
         * item in the expansion is defined.
         */
        public java.net.URI system() {
            return getUri(FhirPropertyNames.PROPERTY_SYSTEM);
        }

        /**
         * If true, this entry is included in the expansion for navigational
         * purposes, and the user cannot select the code directly as a proper
         * value.
         */
        public Boolean abstractValue() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_ABSTRACT);
        }

        /**
         * If the concept is inactive in the code system that defines it.
         * Inactive codes are those that are no longer to be used, but are
         * maintained by the code system for understanding legacy data. It might
         * not be known or specified whether an concept is inactive (and it may
         * depend on the context of use).
         */
        public Boolean inactive() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_INACTIVE);
        }

        /**
         * The version of the code system from this code was taken. Note that a
         * well-maintained code system does not need the version reported,
         * because the meaning of codes is consistent across versions. However
         * this cannot consistently be assured, and when the meaning is not
         * guaranteed to be consistent, the version SHOULD be exchanged.
         */
        public String version() {
            return getString(FhirPropertyNames.PROPERTY_VERSION);
        }

        /**
         * The code for this item in the expansion hierarchy. If this code is
         * missing the entry in the hierarchy is a place holder (abstract) and
         * does not represent a valid code in the value set.
         */
        public String code() {
            return getString(FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * The recommended display for this item in the expansion.
         */
        public String display() {
            return getString(FhirPropertyNames.PROPERTY_DISPLAY);
        }

        /**
         * Additional representations for this item - other languages, aliases,
         * specialized purposes, used for particular purposes, etc. These are
         * relevant when the conditions of the expansion do not fix to a single
         * correct representation.
         */
        public java.util.List<ValueSetDesignation> designation() {
            return getList(ValueSetDesignation.class, FhirPropertyNames.PROPERTY_DESIGNATION);
        }

        /**
         * Other codes and entries contained under this entry in the hierarchy.
         */
        public java.util.List<ValueSetContains> contains() {
            return getList(ValueSetContains.class, FhirPropertyNames.PROPERTY_CONTAINS);
        }

        public static final class Builder extends FhirObject.Builder<ValueSetContains, ValueSetContains.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder system(final java.net.URI system) {
                b.add(FhirPropertyNames.PROPERTY_SYSTEM, system.toString());
                return this;
            }

            public Builder abstractValue(final Boolean abstractValue) {
                b.add(FhirPropertyNames.PROPERTY_ABSTRACT, abstractValue);
                return this;
            }

            public Builder inactive(final Boolean inactive) {
                b.add(FhirPropertyNames.PROPERTY_INACTIVE, inactive);
                return this;
            }

            public Builder version(final String version) {
                b.add(FhirPropertyNames.PROPERTY_VERSION, version);
                return this;
            }

            public Builder code(final String code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder display(final String display) {
                b.add(FhirPropertyNames.PROPERTY_DISPLAY, display);
                return this;
            }

            public Builder designation(final java.util.List<ValueSetDesignation> designation) {
                b.add(FhirPropertyNames.PROPERTY_DESIGNATION, FhirObject.toArray(designation));
                return this;
            }

            public Builder contains(final java.util.List<ValueSetContains> contains) {
                b.add(FhirPropertyNames.PROPERTY_CONTAINS, FhirObject.toArray(contains));
                return this;
            }

            public ValueSetContains build() {
                return new ValueSetContains(b.build());
            }
        }
    }

    /**
     * A ValueSet resource instance specifies a set of codes drawn from one
     * or more code systems, intended for use in a particular context. Value
     * sets link between [[[CodeSystem]]] definitions and their use in [coded
     * elements](terminologies.html).
     */
    public static class ValueSetDesignation extends FhirObject {
        public static final String RESOURCE_TYPE = "ValueSetDesignation";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ValueSetDesignation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The language this designation is defined for.
         */
        public String language() {
            return getString(FhirPropertyNames.PROPERTY_LANGUAGE);
        }

        /**
         * A code that represents types of uses of designations.
         */
        public Coding use() {
            return getObject(Coding.class, FhirPropertyNames.PROPERTY_USE);
        }

        /**
         * The text value for this designation.
         */
        public String value() {
            return getString(FhirPropertyNames.PROPERTY_VALUE);
        }

        public static final class Builder extends FhirObject.Builder<ValueSetDesignation, ValueSetDesignation.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder language(final String language) {
                b.add(FhirPropertyNames.PROPERTY_LANGUAGE, language);
                return this;
            }

            public Builder use(final Coding use) {
                b.add(FhirPropertyNames.PROPERTY_USE, use);
                return this;
            }

            public Builder value(final String value) {
                b.add(FhirPropertyNames.PROPERTY_VALUE, value);
                return this;
            }

            public ValueSetDesignation build() {
                return new ValueSetDesignation(b.build());
            }
        }
    }

    /**
     * A ValueSet resource instance specifies a set of codes drawn from one
     * or more code systems, intended for use in a particular context. Value
     * sets link between [[[CodeSystem]]] definitions and their use in [coded
     * elements](terminologies.html).
     */
    public static class ValueSetExpansion extends FhirObject {
        public static final String RESOURCE_TYPE = "ValueSetExpansion";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ValueSetExpansion(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * An identifier that uniquely identifies this expansion of the valueset,
         * based on a unique combination of the provided parameters, the system
         * default parameters, and the underlying system code system versions
         * etc. Systems may re-use the same identifier as long as those factors
         * remain the same, and the expansion is the same, but are not required
         * to do so. This is a business identifier.
         */
        public java.net.URI identifier() {
            return getUri(FhirPropertyNames.PROPERTY_IDENTIFIER);
        }

        /**
         * The time at which the expansion was produced by the expanding system.
         */
        public java.time.Instant timestamp() {
            return getInstant(FhirPropertyNames.PROPERTY_TIMESTAMP);
        }

        /**
         * The total number of concepts in the expansion. If the number of
         * concept nodes in this resource is less than the stated number, then
         * the server can return more using the offset parameter.
         */
        public Integer total() {
            return data.getInt(FhirPropertyNames.PROPERTY_TOTAL);
        }

        /**
         * If paging is being used, the offset at which this resource starts.
         * I.e. this resource is a partial view into the expansion. If paging is
         * not being used, this element SHALL NOT be present.
         */
        public Integer offset() {
            return data.getInt(FhirPropertyNames.PROPERTY_OFFSET);
        }

        /**
         * A parameter that controlled the expansion process. These parameters
         * may be used by users of expanded value sets to check whether the
         * expansion is suitable for a particular purpose, or to pick the correct
         * expansion.
         */
        public java.util.List<ValueSetParameter> parameter() {
            return getList(ValueSetParameter.class, FhirPropertyNames.PROPERTY_PARAMETER);
        }

        /**
         * The codes that are contained in the value set expansion.
         */
        public java.util.List<ValueSetContains> contains() {
            return getList(ValueSetContains.class, FhirPropertyNames.PROPERTY_CONTAINS);
        }

        public static final class Builder extends FhirObject.Builder<ValueSetExpansion, ValueSetExpansion.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder identifier(final java.net.URI identifier) {
                b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, identifier.toString());
                return this;
            }

            public Builder timestamp(final java.time.Instant timestamp) {
                b.add(FhirPropertyNames.PROPERTY_TIMESTAMP, timestamp.toString());
                return this;
            }

            public Builder total(final Integer total) {
                b.add(FhirPropertyNames.PROPERTY_TOTAL, total);
                return this;
            }

            public Builder offset(final Integer offset) {
                b.add(FhirPropertyNames.PROPERTY_OFFSET, offset);
                return this;
            }

            public Builder parameter(final java.util.List<ValueSetParameter> parameter) {
                b.add(FhirPropertyNames.PROPERTY_PARAMETER, FhirObject.toArray(parameter));
                return this;
            }

            public Builder contains(final java.util.List<ValueSetContains> contains) {
                b.add(FhirPropertyNames.PROPERTY_CONTAINS, FhirObject.toArray(contains));
                return this;
            }

            public ValueSetExpansion build() {
                return new ValueSetExpansion(b.build());
            }
        }
    }

    /**
     * A ValueSet resource instance specifies a set of codes drawn from one
     * or more code systems, intended for use in a particular context. Value
     * sets link between [[[CodeSystem]]] definitions and their use in [coded
     * elements](terminologies.html).
     */
    public static class ValueSetFilter extends FhirObject {
        public static final String RESOURCE_TYPE = "ValueSetFilter";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ValueSetFilter(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A code that identifies a property or a filter defined in the code
         * system.
         */
        public String property() {
            return getString(FhirPropertyNames.PROPERTY_PROPERTY);
        }

        /**
         * The kind of operation to perform as a part of the filter criteria.
         */
        public String op() {
            return getString(FhirPropertyNames.PROPERTY_OP);
        }

        /**
         * The match value may be either a code defined by the system, or a
         * string value, which is a regex match on the literal string of the
         * property value  (if the filter represents a property defined in
         * CodeSystem) or of the system filter value (if the filter represents a
         * filter defined in CodeSystem) when the operation is 'regex', or one of
         * the values (true and false), when the operation is 'exists'.
         */
        public String value() {
            return getString(FhirPropertyNames.PROPERTY_VALUE);
        }

        public static final class Builder extends FhirObject.Builder<ValueSetFilter, ValueSetFilter.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder property(final String property) {
                b.add(FhirPropertyNames.PROPERTY_PROPERTY, property);
                return this;
            }

            public Builder op(final String op) {
                b.add(FhirPropertyNames.PROPERTY_OP, op);
                return this;
            }

            public Builder value(final String value) {
                b.add(FhirPropertyNames.PROPERTY_VALUE, value);
                return this;
            }

            public ValueSetFilter build() {
                return new ValueSetFilter(b.build());
            }
        }
    }

    /**
     * A ValueSet resource instance specifies a set of codes drawn from one
     * or more code systems, intended for use in a particular context. Value
     * sets link between [[[CodeSystem]]] definitions and their use in [coded
     * elements](terminologies.html).
     */
    public static class ValueSetInclude extends FhirObject {
        public static final String RESOURCE_TYPE = "ValueSetInclude";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ValueSetInclude(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * An absolute URI which is the code system from which the selected codes
         * come from.
         */
        public java.net.URI system() {
            return getUri(FhirPropertyNames.PROPERTY_SYSTEM);
        }

        /**
         * The version of the code system that the codes are selected from, or
         * the special version '*' for all versions.
         */
        public String version() {
            return getString(FhirPropertyNames.PROPERTY_VERSION);
        }

        /**
         * Specifies a concept to be included or excluded.
         */
        public java.util.List<ValueSetConcept> concept() {
            return getList(ValueSetConcept.class, FhirPropertyNames.PROPERTY_CONCEPT);
        }

        /**
         * Select concepts by specify a matching criterion based on the
         * properties (including relationships) defined by the system, or on
         * filters defined by the system. If multiple filters are specified, they
         * SHALL all be true.
         */
        public java.util.List<ValueSetFilter> filter() {
            return getList(ValueSetFilter.class, FhirPropertyNames.PROPERTY_FILTER);
        }

        /**
         * Selects the concepts found in this value set (based on its value set
         * definition). This is an absolute URI that is a reference to
         * ValueSet.url.  If multiple value sets are specified this includes the
         * union of the contents of all of the referenced value sets.
         */
        public java.util.List<String> valueSet() {
            return getList(String.class, FhirPropertyNames.PROPERTY_VALUE_SET);
        }

        public static final class Builder extends FhirObject.Builder<ValueSetInclude, ValueSetInclude.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder system(final java.net.URI system) {
                b.add(FhirPropertyNames.PROPERTY_SYSTEM, system.toString());
                return this;
            }

            public Builder version(final String version) {
                b.add(FhirPropertyNames.PROPERTY_VERSION, version);
                return this;
            }

            public Builder concept(final java.util.List<ValueSetConcept> concept) {
                b.add(FhirPropertyNames.PROPERTY_CONCEPT, FhirObject.toArray(concept));
                return this;
            }

            public Builder filter(final java.util.List<ValueSetFilter> filter) {
                b.add(FhirPropertyNames.PROPERTY_FILTER, FhirObject.toArray(filter));
                return this;
            }

            public Builder valueSet(final java.util.List<String> valueSet) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_SET, FhirObject.toStringArray(valueSet));
                return this;
            }

            public ValueSetInclude build() {
                return new ValueSetInclude(b.build());
            }
        }
    }

    /**
     * A ValueSet resource instance specifies a set of codes drawn from one
     * or more code systems, intended for use in a particular context. Value
     * sets link between [[[CodeSystem]]] definitions and their use in [coded
     * elements](terminologies.html).
     */
    public static class ValueSetParameter extends FhirObject {
        public static final String RESOURCE_TYPE = "ValueSetParameter";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ValueSetParameter(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Name of the input parameter to the $expand operation; may be a
         * server-assigned name for additional default or other server-supplied
         * parameters used to control the expansion process.
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * The value of the parameter.
         */
        public String valueString() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_STRING);
        }

        /**
         * The value of the parameter.
         */
        public Boolean valueBoolean() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_VALUE_BOOLEAN);
        }

        /**
         * The value of the parameter.
         */
        public Integer valueInteger() {
            return data.getInt(FhirPropertyNames.PROPERTY_VALUE_INTEGER);
        }

        /**
         * The value of the parameter.
         */
        public Integer valueDecimal() {
            return data.getInt(FhirPropertyNames.PROPERTY_VALUE_DECIMAL);
        }

        /**
         * The value of the parameter.
         */
        public String valueUri() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_URI);
        }

        /**
         * The value of the parameter.
         */
        public String valueCode() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_CODE);
        }

        /**
         * The value of the parameter.
         */
        public String valueDateTime() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_DATE_TIME);
        }

        public static final class Builder extends FhirObject.Builder<ValueSetParameter, ValueSetParameter.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder valueString(final String valueString) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_STRING, valueString);
                return this;
            }

            public Builder valueBoolean(final Boolean valueBoolean) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_BOOLEAN, valueBoolean);
                return this;
            }

            public Builder valueInteger(final Integer valueInteger) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_INTEGER, valueInteger);
                return this;
            }

            public Builder valueDecimal(final Integer valueDecimal) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DECIMAL, valueDecimal);
                return this;
            }

            public Builder valueUri(final String valueUri) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_URI, valueUri);
                return this;
            }

            public Builder valueCode(final String valueCode) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CODE, valueCode);
                return this;
            }

            public Builder valueDateTime(final String valueDateTime) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DATE_TIME, valueDateTime);
                return this;
            }

            public ValueSetParameter build() {
                return new ValueSetParameter(b.build());
            }
        }
    }
}
