/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Details and position information for a physical place where services
 * are provided and resources and participants may be stored, found,
 * contained, or accommodated.
 */
public class Location extends DomainResource {
    public static final String RESOURCE_TYPE = "Location";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Location(final JsonObject data) {
        super(data);
    }

    /**
     * Unique code or number identifying the location to its users.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The status property covers the general availability of the resource,
     * not the current value which may be covered by the operationStatus, or
     * by a schedule/slots if they are configured for the location.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * The operational status covers operation values most relevant to beds
     * (but can also apply to rooms/units/chairs/etc. such as an isolation
     * unit/dialysis chair). This typically covers concepts such as
     * contamination, housekeeping, and other activities like maintenance.
     */
    public Coding operationalStatus() {
        return getObject(Coding.class, FhirPropertyNames.PROPERTY_OPERATIONAL_STATUS);
    }

    /**
     * Name of the location as used by humans. Does not need to be unique.
     */
    public String name() {
        return getString(FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * A list of alternate names that the location is known as, or was known
     * as, in the past.
     */
    public java.util.List<String> alias() {
        return getList(String.class, FhirPropertyNames.PROPERTY_ALIAS);
    }

    /**
     * Description of the Location, which helps in finding or referencing the
     * place.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * Indicates whether a resource instance represents a specific location
     * or a class of locations.
     */
    public String mode() {
        return getString(FhirPropertyNames.PROPERTY_MODE);
    }

    /**
     * Indicates the type of function performed at the location.
     */
    public java.util.List<CodeableConcept> type() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * The contact details of communication devices available at the
     * location. This can include phone numbers, fax numbers, mobile numbers,
     * email addresses and web sites.
     */
    public java.util.List<ContactPoint> telecom() {
        return getList(ContactPoint.class, FhirPropertyNames.PROPERTY_TELECOM);
    }

    /**
     * Physical location.
     */
    public Address address() {
        return getObject(Address.class, FhirPropertyNames.PROPERTY_ADDRESS);
    }

    /**
     * Physical form of the location, e.g. building, room, vehicle, road.
     */
    public CodeableConcept physicalType() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_PHYSICAL_TYPE);
    }

    /**
     * The absolute geographic location of the Location, expressed using the
     * WGS84 datum (This is the same co-ordinate system used in KML).
     */
    public LocationPosition position() {
        return getObject(LocationPosition.class, FhirPropertyNames.PROPERTY_POSITION);
    }

    /**
     * The organization responsible for the provisioning and upkeep of the
     * location.
     */
    public Reference managingOrganization() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_MANAGING_ORGANIZATION);
    }

    /**
     * Another Location of which this Location is physically a part of.
     */
    public Reference partOf() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PART_OF);
    }

    /**
     * What days/times during a week is this location usually open.
     */
    public java.util.List<LocationHoursOfOperation> hoursOfOperation() {
        return getList(LocationHoursOfOperation.class, FhirPropertyNames.PROPERTY_HOURS_OF_OPERATION);
    }

    /**
     * A description of when the locations opening ours are different to
     * normal, e.g. public holiday availability. Succinctly describing all
     * possible exceptions to normal site availability as detailed in the
     * opening hours Times.
     */
    public String availabilityExceptions() {
        return getString(FhirPropertyNames.PROPERTY_AVAILABILITY_EXCEPTIONS);
    }

    /**
     * Technical endpoints providing access to services operated for the
     * location.
     */
    public java.util.List<Reference> endpoint() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_ENDPOINT);
    }

    public static final class Builder extends DomainResource.Builder<Location, Location.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder operationalStatus(final Coding operationalStatus) {
            b.add(FhirPropertyNames.PROPERTY_OPERATIONAL_STATUS, operationalStatus);
            return this;
        }

        public Builder name(final String name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, name);
            return this;
        }

        public Builder alias(final java.util.List<String> alias) {
            b.add(FhirPropertyNames.PROPERTY_ALIAS, FhirObject.toStringArray(alias));
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder mode(final String mode) {
            b.add(FhirPropertyNames.PROPERTY_MODE, mode);
            return this;
        }

        public Builder type(final java.util.List<CodeableConcept> type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, FhirObject.toArray(type));
            return this;
        }

        public Builder telecom(final java.util.List<ContactPoint> telecom) {
            b.add(FhirPropertyNames.PROPERTY_TELECOM, FhirObject.toArray(telecom));
            return this;
        }

        public Builder address(final Address address) {
            b.add(FhirPropertyNames.PROPERTY_ADDRESS, address);
            return this;
        }

        public Builder physicalType(final CodeableConcept physicalType) {
            b.add(FhirPropertyNames.PROPERTY_PHYSICAL_TYPE, physicalType);
            return this;
        }

        public Builder position(final LocationPosition position) {
            b.add(FhirPropertyNames.PROPERTY_POSITION, position);
            return this;
        }

        public Builder managingOrganization(final Reference managingOrganization) {
            b.add(FhirPropertyNames.PROPERTY_MANAGING_ORGANIZATION, managingOrganization);
            return this;
        }

        public Builder partOf(final Reference partOf) {
            b.add(FhirPropertyNames.PROPERTY_PART_OF, partOf);
            return this;
        }

        public Builder hoursOfOperation(final java.util.List<LocationHoursOfOperation> hoursOfOperation) {
            b.add(FhirPropertyNames.PROPERTY_HOURS_OF_OPERATION, FhirObject.toArray(hoursOfOperation));
            return this;
        }

        public Builder availabilityExceptions(final String availabilityExceptions) {
            b.add(FhirPropertyNames.PROPERTY_AVAILABILITY_EXCEPTIONS, availabilityExceptions);
            return this;
        }

        public Builder endpoint(final java.util.List<Reference> endpoint) {
            b.add(FhirPropertyNames.PROPERTY_ENDPOINT, FhirObject.toArray(endpoint));
            return this;
        }

        public Location build() {
            return new Location(b.build());
        }
    }

    /**
     * Details and position information for a physical place where services
     * are provided and resources and participants may be stored, found,
     * contained, or accommodated.
     */
    public static class LocationHoursOfOperation extends FhirObject {
        public static final String RESOURCE_TYPE = "LocationHoursOfOperation";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public LocationHoursOfOperation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Indicates which days of the week are available between the start and
         * end Times.
         */
        public java.util.List<String> daysOfWeek() {
            return getList(String.class, FhirPropertyNames.PROPERTY_DAYS_OF_WEEK);
        }

        /**
         * The Location is open all day.
         */
        public Boolean allDay() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_ALL_DAY);
        }

        /**
         * Time that the Location opens.
         */
        public java.time.Instant openingTime() {
            return getInstant(FhirPropertyNames.PROPERTY_OPENING_TIME);
        }

        /**
         * Time that the Location closes.
         */
        public java.time.Instant closingTime() {
            return getInstant(FhirPropertyNames.PROPERTY_CLOSING_TIME);
        }

        public static final class Builder extends FhirObject.Builder<LocationHoursOfOperation, LocationHoursOfOperation.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder daysOfWeek(final java.util.List<String> daysOfWeek) {
                b.add(FhirPropertyNames.PROPERTY_DAYS_OF_WEEK, FhirObject.toStringArray(daysOfWeek));
                return this;
            }

            public Builder allDay(final Boolean allDay) {
                b.add(FhirPropertyNames.PROPERTY_ALL_DAY, allDay);
                return this;
            }

            public Builder openingTime(final java.time.Instant openingTime) {
                b.add(FhirPropertyNames.PROPERTY_OPENING_TIME, openingTime.toString());
                return this;
            }

            public Builder closingTime(final java.time.Instant closingTime) {
                b.add(FhirPropertyNames.PROPERTY_CLOSING_TIME, closingTime.toString());
                return this;
            }

            public LocationHoursOfOperation build() {
                return new LocationHoursOfOperation(b.build());
            }
        }
    }

    /**
     * Details and position information for a physical place where services
     * are provided and resources and participants may be stored, found,
     * contained, or accommodated.
     */
    public static class LocationPosition extends FhirObject {
        public static final String RESOURCE_TYPE = "LocationPosition";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public LocationPosition(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Longitude. The value domain and the interpretation are the same as for
         * the text of the longitude element in KML (see notes below).
         */
        public Double longitude() {
            return data.getJsonNumber(FhirPropertyNames.PROPERTY_LONGITUDE).doubleValue();
        }

        /**
         * Latitude. The value domain and the interpretation are the same as for
         * the text of the latitude element in KML (see notes below).
         */
        public Double latitude() {
            return data.getJsonNumber(FhirPropertyNames.PROPERTY_LATITUDE).doubleValue();
        }

        /**
         * Altitude. The value domain and the interpretation are the same as for
         * the text of the altitude element in KML (see notes below).
         */
        public Double altitude() {
            return data.getJsonNumber(FhirPropertyNames.PROPERTY_ALTITUDE).doubleValue();
        }

        public static final class Builder extends FhirObject.Builder<LocationPosition, LocationPosition.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder longitude(final Double longitude) {
                b.add(FhirPropertyNames.PROPERTY_LONGITUDE, longitude);
                return this;
            }

            public Builder latitude(final Double latitude) {
                b.add(FhirPropertyNames.PROPERTY_LATITUDE, latitude);
                return this;
            }

            public Builder altitude(final Double altitude) {
                b.add(FhirPropertyNames.PROPERTY_ALTITUDE, altitude);
                return this;
            }

            public LocationPosition build() {
                return new LocationPosition(b.build());
            }
        }
    }
}
