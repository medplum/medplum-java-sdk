/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A slot of time on a schedule that may be available for booking
 * appointments.
 */
public class Slot extends DomainResource {
    public static final String RESOURCE_TYPE = "Slot";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Slot(final JsonObject data) {
        super(data);
    }

    /**
     * External Ids for this item.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * A broad categorization of the service that is to be performed during
     * this appointment.
     */
    public java.util.List<CodeableConcept> serviceCategory() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_SERVICE_CATEGORY);
    }

    /**
     * The type of appointments that can be booked into this slot (ideally
     * this would be an identifiable service - which is at a location, rather
     * than the location itself). If provided then this overrides the value
     * provided on the availability resource.
     */
    public java.util.List<CodeableConcept> serviceType() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_SERVICE_TYPE);
    }

    /**
     * The specialty of a practitioner that would be required to perform the
     * service requested in this appointment.
     */
    public java.util.List<CodeableConcept> specialty() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_SPECIALTY);
    }

    /**
     * The style of appointment or patient that may be booked in the slot
     * (not service type).
     */
    public CodeableConcept appointmentType() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_APPOINTMENT_TYPE);
    }

    /**
     * The schedule resource that this slot defines an interval of status
     * information.
     */
    public Reference schedule() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SCHEDULE);
    }

    /**
     * busy | free | busy-unavailable | busy-tentative | entered-in-error.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * Date/Time that the slot is to begin.
     */
    public java.time.Instant start() {
        return getInstant(FhirPropertyNames.PROPERTY_START);
    }

    /**
     * Date/Time that the slot is to conclude.
     */
    public java.time.Instant end() {
        return getInstant(FhirPropertyNames.PROPERTY_END);
    }

    /**
     * This slot has already been overbooked, appointments are unlikely to be
     * accepted for this time.
     */
    public Boolean overbooked() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_OVERBOOKED);
    }

    /**
     * Comments on the slot to describe any extended information. Such as
     * custom constraints on the slot.
     */
    public String comment() {
        return getString(FhirPropertyNames.PROPERTY_COMMENT);
    }

    public static final class Builder extends DomainResource.Builder<Slot, Slot.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder serviceCategory(final java.util.List<CodeableConcept> serviceCategory) {
            b.add(FhirPropertyNames.PROPERTY_SERVICE_CATEGORY, FhirObject.toArray(serviceCategory));
            return this;
        }

        public Builder serviceType(final java.util.List<CodeableConcept> serviceType) {
            b.add(FhirPropertyNames.PROPERTY_SERVICE_TYPE, FhirObject.toArray(serviceType));
            return this;
        }

        public Builder specialty(final java.util.List<CodeableConcept> specialty) {
            b.add(FhirPropertyNames.PROPERTY_SPECIALTY, FhirObject.toArray(specialty));
            return this;
        }

        public Builder appointmentType(final CodeableConcept appointmentType) {
            b.add(FhirPropertyNames.PROPERTY_APPOINTMENT_TYPE, appointmentType);
            return this;
        }

        public Builder schedule(final Reference schedule) {
            b.add(FhirPropertyNames.PROPERTY_SCHEDULE, schedule);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder start(final java.time.Instant start) {
            b.add(FhirPropertyNames.PROPERTY_START, start.toString());
            return this;
        }

        public Builder end(final java.time.Instant end) {
            b.add(FhirPropertyNames.PROPERTY_END, end.toString());
            return this;
        }

        public Builder overbooked(final Boolean overbooked) {
            b.add(FhirPropertyNames.PROPERTY_OVERBOOKED, overbooked);
            return this;
        }

        public Builder comment(final String comment) {
            b.add(FhirPropertyNames.PROPERTY_COMMENT, comment);
            return this;
        }

        public Slot build() {
            return new Slot(b.build());
        }
    }
}
