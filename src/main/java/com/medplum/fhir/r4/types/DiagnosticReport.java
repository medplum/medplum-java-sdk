/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * The findings and interpretation of diagnostic  tests performed on
 * patients, groups of patients, devices, and locations, and/or specimens
 * derived from these. The report includes clinical context such as
 * requesting and provider information, and some mix of atomic results,
 * images, textual and coded interpretations, and formatted
 * representation of diagnostic reports.
 */
public class DiagnosticReport extends DomainResource {
    public static final String RESOURCE_TYPE = "DiagnosticReport";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public DiagnosticReport(final JsonObject data) {
        super(data);
    }

    /**
     * Identifiers assigned to this report by the performer or other systems.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * Details concerning a service requested.
     */
    public java.util.List<Reference> basedOn() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_BASED_ON);
    }

    /**
     * The status of the diagnostic report.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * A code that classifies the clinical discipline, department or
     * diagnostic service that created the report (e.g. cardiology,
     * biochemistry, hematology, MRI). This is used for searching, sorting
     * and display purposes.
     */
    public java.util.List<CodeableConcept> category() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_CATEGORY);
    }

    /**
     * A code or name that describes this diagnostic report.
     */
    public CodeableConcept code() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
    }

    /**
     * The subject of the report. Usually, but not always, this is a patient.
     * However, diagnostic services also perform analyses on specimens
     * collected from a variety of other sources.
     */
    public Reference subject() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * The healthcare event  (e.g. a patient and healthcare provider
     * interaction) which this DiagnosticReport is about.
     */
    public Reference encounter() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ENCOUNTER);
    }

    /**
     * The time or time-period the observed values are related to. When the
     * subject of the report is a patient, this is usually either the time of
     * the procedure or of specimen collection(s), but very often the source
     * of the date/time is not known, only the date/time itself.
     */
    public String effectiveDateTime() {
        return getString(FhirPropertyNames.PROPERTY_EFFECTIVE_DATE_TIME);
    }

    /**
     * The time or time-period the observed values are related to. When the
     * subject of the report is a patient, this is usually either the time of
     * the procedure or of specimen collection(s), but very often the source
     * of the date/time is not known, only the date/time itself.
     */
    public Period effectivePeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD);
    }

    /**
     * The date and time that this version of the report was made available
     * to providers, typically after the report was reviewed and verified.
     */
    public java.time.Instant issued() {
        return getInstant(FhirPropertyNames.PROPERTY_ISSUED);
    }

    /**
     * The diagnostic service that is responsible for issuing the report.
     */
    public java.util.List<Reference> performer() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_PERFORMER);
    }

    /**
     * The practitioner or organization that is responsible for the report's
     * conclusions and interpretations.
     */
    public java.util.List<Reference> resultsInterpreter() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_RESULTS_INTERPRETER);
    }

    /**
     * Details about the specimens on which this diagnostic report is based.
     */
    public java.util.List<Reference> specimen() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_SPECIMEN);
    }

    /**
     * [Observations](observation.html)  that are part of this diagnostic
     * report.
     */
    public java.util.List<Reference> result() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_RESULT);
    }

    /**
     * One or more links to full details of any imaging performed during the
     * diagnostic investigation. Typically, this is imaging performed by
     * DICOM enabled modalities, but this is not required. A fully enabled
     * PACS viewer can use this information to provide views of the source
     * images.
     */
    public java.util.List<Reference> imagingStudy() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_IMAGING_STUDY);
    }

    /**
     * A list of key images associated with this report. The images are
     * generally created during the diagnostic process, and may be directly
     * of the patient, or of treated specimens (i.e. slides of interest).
     */
    public java.util.List<DiagnosticReportMedia> media() {
        return getList(DiagnosticReportMedia.class, FhirPropertyNames.PROPERTY_MEDIA);
    }

    /**
     * Concise and clinically contextualized summary conclusion
     * (interpretation/impression) of the diagnostic report.
     */
    public String conclusion() {
        return getString(FhirPropertyNames.PROPERTY_CONCLUSION);
    }

    /**
     * One or more codes that represent the summary conclusion
     * (interpretation/impression) of the diagnostic report.
     */
    public java.util.List<CodeableConcept> conclusionCode() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_CONCLUSION_CODE);
    }

    /**
     * Rich text representation of the entire result as issued by the
     * diagnostic service. Multiple formats are allowed but they SHALL be
     * semantically equivalent.
     */
    public java.util.List<Attachment> presentedForm() {
        return getList(Attachment.class, FhirPropertyNames.PROPERTY_PRESENTED_FORM);
    }

    public static final class Builder extends DomainResource.Builder<DiagnosticReport, DiagnosticReport.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder basedOn(final java.util.List<Reference> basedOn) {
            b.add(FhirPropertyNames.PROPERTY_BASED_ON, FhirObject.toArray(basedOn));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder category(final java.util.List<CodeableConcept> category) {
            b.add(FhirPropertyNames.PROPERTY_CATEGORY, FhirObject.toArray(category));
            return this;
        }

        public Builder code(final CodeableConcept code) {
            b.add(FhirPropertyNames.PROPERTY_CODE, code);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(FhirPropertyNames.PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder effectiveDateTime(final String effectiveDateTime) {
            b.add(FhirPropertyNames.PROPERTY_EFFECTIVE_DATE_TIME, effectiveDateTime);
            return this;
        }

        public Builder effectivePeriod(final Period effectivePeriod) {
            b.add(FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD, effectivePeriod);
            return this;
        }

        public Builder issued(final java.time.Instant issued) {
            b.add(FhirPropertyNames.PROPERTY_ISSUED, issued.toString());
            return this;
        }

        public Builder performer(final java.util.List<Reference> performer) {
            b.add(FhirPropertyNames.PROPERTY_PERFORMER, FhirObject.toArray(performer));
            return this;
        }

        public Builder resultsInterpreter(final java.util.List<Reference> resultsInterpreter) {
            b.add(FhirPropertyNames.PROPERTY_RESULTS_INTERPRETER, FhirObject.toArray(resultsInterpreter));
            return this;
        }

        public Builder specimen(final java.util.List<Reference> specimen) {
            b.add(FhirPropertyNames.PROPERTY_SPECIMEN, FhirObject.toArray(specimen));
            return this;
        }

        public Builder result(final java.util.List<Reference> result) {
            b.add(FhirPropertyNames.PROPERTY_RESULT, FhirObject.toArray(result));
            return this;
        }

        public Builder imagingStudy(final java.util.List<Reference> imagingStudy) {
            b.add(FhirPropertyNames.PROPERTY_IMAGING_STUDY, FhirObject.toArray(imagingStudy));
            return this;
        }

        public Builder media(final java.util.List<DiagnosticReportMedia> media) {
            b.add(FhirPropertyNames.PROPERTY_MEDIA, FhirObject.toArray(media));
            return this;
        }

        public Builder conclusion(final String conclusion) {
            b.add(FhirPropertyNames.PROPERTY_CONCLUSION, conclusion);
            return this;
        }

        public Builder conclusionCode(final java.util.List<CodeableConcept> conclusionCode) {
            b.add(FhirPropertyNames.PROPERTY_CONCLUSION_CODE, FhirObject.toArray(conclusionCode));
            return this;
        }

        public Builder presentedForm(final java.util.List<Attachment> presentedForm) {
            b.add(FhirPropertyNames.PROPERTY_PRESENTED_FORM, FhirObject.toArray(presentedForm));
            return this;
        }

        public DiagnosticReport build() {
            return new DiagnosticReport(b.build());
        }
    }

    /**
     * The findings and interpretation of diagnostic  tests performed on
     * patients, groups of patients, devices, and locations, and/or specimens
     * derived from these. The report includes clinical context such as
     * requesting and provider information, and some mix of atomic results,
     * images, textual and coded interpretations, and formatted
     * representation of diagnostic reports.
     */
    public static class DiagnosticReportMedia extends FhirObject {
        public static final String RESOURCE_TYPE = "DiagnosticReportMedia";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public DiagnosticReportMedia(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A comment about the image. Typically, this is used to provide an
         * explanation for why the image is included, or to draw the viewer's
         * attention to important features.
         */
        public String comment() {
            return getString(FhirPropertyNames.PROPERTY_COMMENT);
        }

        /**
         * Reference to the image source.
         */
        public Reference link() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_LINK);
        }

        public static final class Builder extends FhirObject.Builder<DiagnosticReportMedia, DiagnosticReportMedia.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder comment(final String comment) {
                b.add(FhirPropertyNames.PROPERTY_COMMENT, comment);
                return this;
            }

            public Builder link(final Reference link) {
                b.add(FhirPropertyNames.PROPERTY_LINK, link);
                return this;
            }

            public DiagnosticReportMedia build() {
                return new DiagnosticReportMedia(b.build());
            }
        }
    }
}
