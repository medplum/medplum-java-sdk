/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A statement of relationships from one set of concepts to one or more
 * other concepts - either concepts in code systems, or data element/data
 * element concepts, or classes in class models.
 */
public class ConceptMap extends DomainResource {
    public static final String RESOURCE_TYPE = "ConceptMap";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ConceptMap(final JsonObject data) {
        super(data);
    }

    /**
     * An absolute URI that is used to identify this concept map when it is
     * referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative
     * instance of this concept map is (or will be) published. This URL can
     * be the target of a canonical reference. It SHALL remain the same when
     * the concept map is stored on different servers.
     */
    public java.net.URI url() {
        return getUri(FhirPropertyNames.PROPERTY_URL);
    }

    /**
     * A formal identifier that is used to identify this concept map when it
     * is represented in other formats, or referenced in a specification,
     * model, design or an instance.
     */
    public Identifier identifier() {
        return getObject(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The identifier that is used to identify this version of the concept
     * map when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the concept map author
     * and is not expected to be globally unique. For example, it might be a
     * timestamp (e.g. yyyymmdd) if a managed version is not available. There
     * is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    public String version() {
        return getString(FhirPropertyNames.PROPERTY_VERSION);
    }

    /**
     * A natural language name identifying the concept map. This name should
     * be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    public String name() {
        return getString(FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * A short, descriptive, user-friendly title for the concept map.
     */
    public String title() {
        return getString(FhirPropertyNames.PROPERTY_TITLE);
    }

    /**
     * The status of this concept map. Enables tracking the life-cycle of the
     * content.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * A Boolean value to indicate that this concept map is authored for
     * testing purposes (or education/evaluation/marketing) and is not
     * intended to be used for genuine usage.
     */
    public Boolean experimental() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_EXPERIMENTAL);
    }

    /**
     * The date  (and optionally time) when the concept map was published.
     * The date must change when the business version changes and it must
     * change if the status code changes. In addition, it should change when
     * the substantive content of the concept map changes.
     */
    public java.time.Instant date() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE);
    }

    /**
     * The name of the organization or individual that published the concept
     * map.
     */
    public String publisher() {
        return getString(FhirPropertyNames.PROPERTY_PUBLISHER);
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_CONTACT);
    }

    /**
     * A free text natural language description of the concept map from a
     * consumer's perspective.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs
     * (insurance plans, studies, ...) and may be used to assist with
     * indexing and searching for appropriate concept map instances.
     */
    public java.util.List<UsageContext> useContext() {
        return getList(UsageContext.class, FhirPropertyNames.PROPERTY_USE_CONTEXT);
    }

    /**
     * A legal or geographic region in which the concept map is intended to
     * be used.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_JURISDICTION);
    }

    /**
     * Explanation of why this concept map is needed and why it has been
     * designed as it has.
     */
    public String purpose() {
        return getString(FhirPropertyNames.PROPERTY_PURPOSE);
    }

    /**
     * A copyright statement relating to the concept map and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the concept map.
     */
    public String copyright() {
        return getString(FhirPropertyNames.PROPERTY_COPYRIGHT);
    }

    /**
     * Identifier for the source value set that contains the concepts that
     * are being mapped and provides context for the mappings.
     */
    public String sourceUri() {
        return getString(FhirPropertyNames.PROPERTY_SOURCE_URI);
    }

    /**
     * Identifier for the source value set that contains the concepts that
     * are being mapped and provides context for the mappings.
     */
    public String sourceCanonical() {
        return getString(FhirPropertyNames.PROPERTY_SOURCE_CANONICAL);
    }

    /**
     * The target value set provides context for the mappings. Note that the
     * mapping is made between concepts, not between value sets, but the
     * value set provides important context about how the concept mapping
     * choices are made.
     */
    public String targetUri() {
        return getString(FhirPropertyNames.PROPERTY_TARGET_URI);
    }

    /**
     * The target value set provides context for the mappings. Note that the
     * mapping is made between concepts, not between value sets, but the
     * value set provides important context about how the concept mapping
     * choices are made.
     */
    public String targetCanonical() {
        return getString(FhirPropertyNames.PROPERTY_TARGET_CANONICAL);
    }

    /**
     * A group of mappings that all have the same source and target system.
     */
    public java.util.List<ConceptMapGroup> group() {
        return getList(ConceptMapGroup.class, FhirPropertyNames.PROPERTY_GROUP);
    }

    public static final class Builder extends DomainResource.Builder<ConceptMap, ConceptMap.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder url(final java.net.URI url) {
            b.add(FhirPropertyNames.PROPERTY_URL, url.toString());
            return this;
        }

        public Builder identifier(final Identifier identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, identifier);
            return this;
        }

        public Builder version(final String version) {
            b.add(FhirPropertyNames.PROPERTY_VERSION, version);
            return this;
        }

        public Builder name(final String name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, name);
            return this;
        }

        public Builder title(final String title) {
            b.add(FhirPropertyNames.PROPERTY_TITLE, title);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder experimental(final Boolean experimental) {
            b.add(FhirPropertyNames.PROPERTY_EXPERIMENTAL, experimental);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder publisher(final String publisher) {
            b.add(FhirPropertyNames.PROPERTY_PUBLISHER, publisher);
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(FhirPropertyNames.PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder useContext(final java.util.List<UsageContext> useContext) {
            b.add(FhirPropertyNames.PROPERTY_USE_CONTEXT, FhirObject.toArray(useContext));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(FhirPropertyNames.PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder purpose(final String purpose) {
            b.add(FhirPropertyNames.PROPERTY_PURPOSE, purpose);
            return this;
        }

        public Builder copyright(final String copyright) {
            b.add(FhirPropertyNames.PROPERTY_COPYRIGHT, copyright);
            return this;
        }

        public Builder sourceUri(final String sourceUri) {
            b.add(FhirPropertyNames.PROPERTY_SOURCE_URI, sourceUri);
            return this;
        }

        public Builder sourceCanonical(final String sourceCanonical) {
            b.add(FhirPropertyNames.PROPERTY_SOURCE_CANONICAL, sourceCanonical);
            return this;
        }

        public Builder targetUri(final String targetUri) {
            b.add(FhirPropertyNames.PROPERTY_TARGET_URI, targetUri);
            return this;
        }

        public Builder targetCanonical(final String targetCanonical) {
            b.add(FhirPropertyNames.PROPERTY_TARGET_CANONICAL, targetCanonical);
            return this;
        }

        public Builder group(final java.util.List<ConceptMapGroup> group) {
            b.add(FhirPropertyNames.PROPERTY_GROUP, FhirObject.toArray(group));
            return this;
        }

        public ConceptMap build() {
            return new ConceptMap(b.build());
        }
    }

    /**
     * A statement of relationships from one set of concepts to one or more
     * other concepts - either concepts in code systems, or data element/data
     * element concepts, or classes in class models.
     */
    public static class ConceptMapDependsOn extends FhirObject {
        public static final String RESOURCE_TYPE = "ConceptMapDependsOn";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ConceptMapDependsOn(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A reference to an element that holds a coded value that corresponds to
         * a code system property. The idea is that the information model carries
         * an element somewhere that is labeled to correspond with a code system
         * property.
         */
        public java.net.URI property() {
            return getUri(FhirPropertyNames.PROPERTY_PROPERTY);
        }

        /**
         * An absolute URI that identifies the code system of the dependency code
         * (if the source/dependency is a value set that crosses code systems).
         */
        public String system() {
            return getString(FhirPropertyNames.PROPERTY_SYSTEM);
        }

        /**
         * Identity (code or path) or the element/item/ValueSet/text that the map
         * depends on / refers to.
         */
        public String value() {
            return getString(FhirPropertyNames.PROPERTY_VALUE);
        }

        /**
         * The display for the code. The display is only provided to help editors
         * when editing the concept map.
         */
        public String display() {
            return getString(FhirPropertyNames.PROPERTY_DISPLAY);
        }

        public static final class Builder extends FhirObject.Builder<ConceptMapDependsOn, ConceptMapDependsOn.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder property(final java.net.URI property) {
                b.add(FhirPropertyNames.PROPERTY_PROPERTY, property.toString());
                return this;
            }

            public Builder system(final String system) {
                b.add(FhirPropertyNames.PROPERTY_SYSTEM, system);
                return this;
            }

            public Builder value(final String value) {
                b.add(FhirPropertyNames.PROPERTY_VALUE, value);
                return this;
            }

            public Builder display(final String display) {
                b.add(FhirPropertyNames.PROPERTY_DISPLAY, display);
                return this;
            }

            public ConceptMapDependsOn build() {
                return new ConceptMapDependsOn(b.build());
            }
        }
    }

    /**
     * A statement of relationships from one set of concepts to one or more
     * other concepts - either concepts in code systems, or data element/data
     * element concepts, or classes in class models.
     */
    public static class ConceptMapElement extends FhirObject {
        public static final String RESOURCE_TYPE = "ConceptMapElement";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ConceptMapElement(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Identity (code or path) or the element/item being mapped.
         */
        public String code() {
            return getString(FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * The display for the code. The display is only provided to help editors
         * when editing the concept map.
         */
        public String display() {
            return getString(FhirPropertyNames.PROPERTY_DISPLAY);
        }

        /**
         * A concept from the target value set that this concept maps to.
         */
        public java.util.List<ConceptMapTarget> target() {
            return getList(ConceptMapTarget.class, FhirPropertyNames.PROPERTY_TARGET);
        }

        public static final class Builder extends FhirObject.Builder<ConceptMapElement, ConceptMapElement.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final String code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder display(final String display) {
                b.add(FhirPropertyNames.PROPERTY_DISPLAY, display);
                return this;
            }

            public Builder target(final java.util.List<ConceptMapTarget> target) {
                b.add(FhirPropertyNames.PROPERTY_TARGET, FhirObject.toArray(target));
                return this;
            }

            public ConceptMapElement build() {
                return new ConceptMapElement(b.build());
            }
        }
    }

    /**
     * A statement of relationships from one set of concepts to one or more
     * other concepts - either concepts in code systems, or data element/data
     * element concepts, or classes in class models.
     */
    public static class ConceptMapGroup extends FhirObject {
        public static final String RESOURCE_TYPE = "ConceptMapGroup";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ConceptMapGroup(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * An absolute URI that identifies the source system where the concepts
         * to be mapped are defined.
         */
        public java.net.URI source() {
            return getUri(FhirPropertyNames.PROPERTY_SOURCE);
        }

        /**
         * The specific version of the code system, as determined by the code
         * system authority.
         */
        public String sourceVersion() {
            return getString(FhirPropertyNames.PROPERTY_SOURCE_VERSION);
        }

        /**
         * An absolute URI that identifies the target system that the concepts
         * will be mapped to.
         */
        public java.net.URI target() {
            return getUri(FhirPropertyNames.PROPERTY_TARGET);
        }

        /**
         * The specific version of the code system, as determined by the code
         * system authority.
         */
        public String targetVersion() {
            return getString(FhirPropertyNames.PROPERTY_TARGET_VERSION);
        }

        /**
         * Mappings for an individual concept in the source to one or more
         * concepts in the target.
         */
        public java.util.List<ConceptMapElement> element() {
            return getList(ConceptMapElement.class, FhirPropertyNames.PROPERTY_ELEMENT);
        }

        /**
         * What to do when there is no mapping for the source concept. &quot;Unmapped&quot;
         * does not include codes that are unmatched, and the unmapped element is
         * ignored in a code is specified to have equivalence = unmatched.
         */
        public ConceptMapUnmapped unmapped() {
            return getObject(ConceptMapUnmapped.class, FhirPropertyNames.PROPERTY_UNMAPPED);
        }

        public static final class Builder extends FhirObject.Builder<ConceptMapGroup, ConceptMapGroup.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder source(final java.net.URI source) {
                b.add(FhirPropertyNames.PROPERTY_SOURCE, source.toString());
                return this;
            }

            public Builder sourceVersion(final String sourceVersion) {
                b.add(FhirPropertyNames.PROPERTY_SOURCE_VERSION, sourceVersion);
                return this;
            }

            public Builder target(final java.net.URI target) {
                b.add(FhirPropertyNames.PROPERTY_TARGET, target.toString());
                return this;
            }

            public Builder targetVersion(final String targetVersion) {
                b.add(FhirPropertyNames.PROPERTY_TARGET_VERSION, targetVersion);
                return this;
            }

            public Builder element(final java.util.List<ConceptMapElement> element) {
                b.add(FhirPropertyNames.PROPERTY_ELEMENT, FhirObject.toArray(element));
                return this;
            }

            public Builder unmapped(final ConceptMapUnmapped unmapped) {
                b.add(FhirPropertyNames.PROPERTY_UNMAPPED, unmapped);
                return this;
            }

            public ConceptMapGroup build() {
                return new ConceptMapGroup(b.build());
            }
        }
    }

    /**
     * A statement of relationships from one set of concepts to one or more
     * other concepts - either concepts in code systems, or data element/data
     * element concepts, or classes in class models.
     */
    public static class ConceptMapTarget extends FhirObject {
        public static final String RESOURCE_TYPE = "ConceptMapTarget";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ConceptMapTarget(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Identity (code or path) or the element/item that the map refers to.
         */
        public String code() {
            return getString(FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * The display for the code. The display is only provided to help editors
         * when editing the concept map.
         */
        public String display() {
            return getString(FhirPropertyNames.PROPERTY_DISPLAY);
        }

        /**
         * The equivalence between the source and target concepts (counting for
         * the dependencies and products). The equivalence is read from target to
         * source (e.g. the target is 'wider' than the source).
         */
        public String equivalence() {
            return getString(FhirPropertyNames.PROPERTY_EQUIVALENCE);
        }

        /**
         * A description of status/issues in mapping that conveys additional
         * information not represented in  the structured data.
         */
        public String comment() {
            return getString(FhirPropertyNames.PROPERTY_COMMENT);
        }

        /**
         * A set of additional dependencies for this mapping to hold. This
         * mapping is only applicable if the specified element can be resolved,
         * and it has the specified value.
         */
        public java.util.List<ConceptMapDependsOn> dependsOn() {
            return getList(ConceptMapDependsOn.class, FhirPropertyNames.PROPERTY_DEPENDS_ON);
        }

        /**
         * A set of additional outcomes from this mapping to other elements. To
         * properly execute this mapping, the specified element must be mapped to
         * some data element or source that is in context. The mapping may still
         * be useful without a place for the additional data elements, but the
         * equivalence cannot be relied on.
         */
        public java.util.List<ConceptMapDependsOn> product() {
            return getList(ConceptMapDependsOn.class, FhirPropertyNames.PROPERTY_PRODUCT);
        }

        public static final class Builder extends FhirObject.Builder<ConceptMapTarget, ConceptMapTarget.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final String code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder display(final String display) {
                b.add(FhirPropertyNames.PROPERTY_DISPLAY, display);
                return this;
            }

            public Builder equivalence(final String equivalence) {
                b.add(FhirPropertyNames.PROPERTY_EQUIVALENCE, equivalence);
                return this;
            }

            public Builder comment(final String comment) {
                b.add(FhirPropertyNames.PROPERTY_COMMENT, comment);
                return this;
            }

            public Builder dependsOn(final java.util.List<ConceptMapDependsOn> dependsOn) {
                b.add(FhirPropertyNames.PROPERTY_DEPENDS_ON, FhirObject.toArray(dependsOn));
                return this;
            }

            public Builder product(final java.util.List<ConceptMapDependsOn> product) {
                b.add(FhirPropertyNames.PROPERTY_PRODUCT, FhirObject.toArray(product));
                return this;
            }

            public ConceptMapTarget build() {
                return new ConceptMapTarget(b.build());
            }
        }
    }

    /**
     * A statement of relationships from one set of concepts to one or more
     * other concepts - either concepts in code systems, or data element/data
     * element concepts, or classes in class models.
     */
    public static class ConceptMapUnmapped extends FhirObject {
        public static final String RESOURCE_TYPE = "ConceptMapUnmapped";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ConceptMapUnmapped(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Defines which action to take if there is no match for the source
         * concept in the target system designated for the group. One of 3
         * actions are possible: use the unmapped code (this is useful when doing
         * a mapping between versions, and only a few codes have changed), use a
         * fixed code (a default code), or alternatively, a reference to a
         * different concept map can be provided (by canonical URL).
         */
        public String mode() {
            return getString(FhirPropertyNames.PROPERTY_MODE);
        }

        /**
         * The fixed code to use when the mode = 'fixed'  - all unmapped codes
         * are mapped to a single fixed code.
         */
        public String code() {
            return getString(FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * The display for the code. The display is only provided to help editors
         * when editing the concept map.
         */
        public String display() {
            return getString(FhirPropertyNames.PROPERTY_DISPLAY);
        }

        /**
         * The canonical reference to an additional ConceptMap resource instance
         * to use for mapping if this ConceptMap resource contains no matching
         * mapping for the source concept.
         */
        public String url() {
            return getString(FhirPropertyNames.PROPERTY_URL);
        }

        public static final class Builder extends FhirObject.Builder<ConceptMapUnmapped, ConceptMapUnmapped.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder mode(final String mode) {
                b.add(FhirPropertyNames.PROPERTY_MODE, mode);
                return this;
            }

            public Builder code(final String code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder display(final String display) {
                b.add(FhirPropertyNames.PROPERTY_DISPLAY, display);
                return this;
            }

            public Builder url(final String url) {
                b.add(FhirPropertyNames.PROPERTY_URL, url);
                return this;
            }

            public ConceptMapUnmapped build() {
                return new ConceptMapUnmapped(b.build());
            }
        }
    }
}
