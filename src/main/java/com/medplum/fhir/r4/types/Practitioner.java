/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A person who is directly or indirectly involved in the provisioning of
 * healthcare.
 */
public class Practitioner extends DomainResource {
    public static final String RESOURCE_TYPE = "Practitioner";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Practitioner(final JsonObject data) {
        super(data);
    }

    /**
     * An identifier that applies to this person in this role.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * Whether this practitioner's record is in active use.
     */
    public Boolean active() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_ACTIVE);
    }

    /**
     * The name(s) associated with the practitioner.
     */
    public java.util.List<HumanName> name() {
        return getList(HumanName.class, FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * A contact detail for the practitioner, e.g. a telephone number or an
     * email address.
     */
    public java.util.List<ContactPoint> telecom() {
        return getList(ContactPoint.class, FhirPropertyNames.PROPERTY_TELECOM);
    }

    /**
     * Address(es) of the practitioner that are not role specific (typically
     * home address). Work addresses are not typically entered in this
     * property as they are usually role dependent.
     */
    public java.util.List<Address> address() {
        return getList(Address.class, FhirPropertyNames.PROPERTY_ADDRESS);
    }

    /**
     * Administrative Gender - the gender that the person is considered to
     * have for administration and record keeping purposes.
     */
    public String gender() {
        return getString(FhirPropertyNames.PROPERTY_GENDER);
    }

    /**
     * The date of birth for the practitioner.
     */
    public java.time.LocalDate birthDate() {
        return getLocalDate(FhirPropertyNames.PROPERTY_BIRTH_DATE);
    }

    /**
     * Image of the person.
     */
    public java.util.List<Attachment> photo() {
        return getList(Attachment.class, FhirPropertyNames.PROPERTY_PHOTO);
    }

    /**
     * The official certifications, training, and licenses that authorize or
     * otherwise pertain to the provision of care by the practitioner.  For
     * example, a medical license issued by a medical board authorizing the
     * practitioner to practice medicine within a certian locality.
     */
    public java.util.List<PractitionerQualification> qualification() {
        return getList(PractitionerQualification.class, FhirPropertyNames.PROPERTY_QUALIFICATION);
    }

    /**
     * A language the practitioner can use in patient communication.
     */
    public java.util.List<CodeableConcept> communication() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_COMMUNICATION);
    }

    public static final class Builder extends DomainResource.Builder<Practitioner, Practitioner.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder active(final Boolean active) {
            b.add(FhirPropertyNames.PROPERTY_ACTIVE, active);
            return this;
        }

        public Builder name(final java.util.List<HumanName> name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, FhirObject.toArray(name));
            return this;
        }

        public Builder telecom(final java.util.List<ContactPoint> telecom) {
            b.add(FhirPropertyNames.PROPERTY_TELECOM, FhirObject.toArray(telecom));
            return this;
        }

        public Builder address(final java.util.List<Address> address) {
            b.add(FhirPropertyNames.PROPERTY_ADDRESS, FhirObject.toArray(address));
            return this;
        }

        public Builder gender(final String gender) {
            b.add(FhirPropertyNames.PROPERTY_GENDER, gender);
            return this;
        }

        public Builder birthDate(final java.time.LocalDate birthDate) {
            b.add(FhirPropertyNames.PROPERTY_BIRTH_DATE, birthDate.toString());
            return this;
        }

        public Builder photo(final java.util.List<Attachment> photo) {
            b.add(FhirPropertyNames.PROPERTY_PHOTO, FhirObject.toArray(photo));
            return this;
        }

        public Builder qualification(final java.util.List<PractitionerQualification> qualification) {
            b.add(FhirPropertyNames.PROPERTY_QUALIFICATION, FhirObject.toArray(qualification));
            return this;
        }

        public Builder communication(final java.util.List<CodeableConcept> communication) {
            b.add(FhirPropertyNames.PROPERTY_COMMUNICATION, FhirObject.toArray(communication));
            return this;
        }

        public Practitioner build() {
            return new Practitioner(b.build());
        }
    }

    /**
     * A person who is directly or indirectly involved in the provisioning of
     * healthcare.
     */
    public static class PractitionerQualification extends FhirObject {
        public static final String RESOURCE_TYPE = "PractitionerQualification";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public PractitionerQualification(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * An identifier that applies to this person's qualification in this
         * role.
         */
        public java.util.List<Identifier> identifier() {
            return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
        }

        /**
         * Coded representation of the qualification.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * Period during which the qualification is valid.
         */
        public Period period() {
            return getObject(Period.class, FhirPropertyNames.PROPERTY_PERIOD);
        }

        /**
         * Organization that regulates and issues the qualification.
         */
        public Reference issuer() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_ISSUER);
        }

        public static final class Builder extends FhirObject.Builder<PractitionerQualification, PractitionerQualification.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder identifier(final java.util.List<Identifier> identifier) {
                b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder period(final Period period) {
                b.add(FhirPropertyNames.PROPERTY_PERIOD, period);
                return this;
            }

            public Builder issuer(final Reference issuer) {
                b.add(FhirPropertyNames.PROPERTY_ISSUER, issuer);
                return this;
            }

            public PractitionerQualification build() {
                return new PractitionerQualification(b.build());
            }
        }
    }
}
