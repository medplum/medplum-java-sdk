/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Catalog entries are wrappers that contextualize items included in a
 * catalog.
 */
public class CatalogEntry extends DomainResource {
    public static final String RESOURCE_TYPE = "CatalogEntry";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public CatalogEntry(final JsonObject data) {
        super(data);
    }

    /**
     * Used in supporting different identifiers for the same product, e.g.
     * manufacturer code and retailer code.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The type of item - medication, device, service, protocol or other.
     */
    public CodeableConcept type() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * Whether the entry represents an orderable item.
     */
    public Boolean orderable() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_ORDERABLE);
    }

    /**
     * The item in a catalog or definition.
     */
    public Reference referencedItem() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_REFERENCED_ITEM);
    }

    /**
     * Used in supporting related concepts, e.g. NDC to RxNorm.
     */
    public java.util.List<Identifier> additionalIdentifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_ADDITIONAL_IDENTIFIER);
    }

    /**
     * Classes of devices, or ATC for medication.
     */
    public java.util.List<CodeableConcept> classification() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_CLASSIFICATION);
    }

    /**
     * Used to support catalog exchange even for unsupported products, e.g.
     * getting list of medications even if not prescribable.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * The time period in which this catalog entry is expected to be active.
     */
    public Period validityPeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_VALIDITY_PERIOD);
    }

    /**
     * The date until which this catalog entry is expected to be active.
     */
    public java.time.Instant validTo() {
        return getInstant(FhirPropertyNames.PROPERTY_VALID_TO);
    }

    /**
     * Typically date of issue is different from the beginning of the
     * validity. This can be used to see when an item was last updated.
     */
    public java.time.Instant lastUpdated() {
        return getInstant(FhirPropertyNames.PROPERTY_LAST_UPDATED);
    }

    /**
     * Used for examplefor Out of Formulary, or any specifics.
     */
    public java.util.List<CodeableConcept> additionalCharacteristic() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_ADDITIONAL_CHARACTERISTIC);
    }

    /**
     * User for example for ATC classification, or.
     */
    public java.util.List<CodeableConcept> additionalClassification() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_ADDITIONAL_CLASSIFICATION);
    }

    /**
     * Used for example, to point to a substance, or to a device used to
     * administer a medication.
     */
    public java.util.List<CatalogEntryRelatedEntry> relatedEntry() {
        return getList(CatalogEntryRelatedEntry.class, FhirPropertyNames.PROPERTY_RELATED_ENTRY);
    }

    public static final class Builder extends DomainResource.Builder<CatalogEntry, CatalogEntry.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder type(final CodeableConcept type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, type);
            return this;
        }

        public Builder orderable(final Boolean orderable) {
            b.add(FhirPropertyNames.PROPERTY_ORDERABLE, orderable);
            return this;
        }

        public Builder referencedItem(final Reference referencedItem) {
            b.add(FhirPropertyNames.PROPERTY_REFERENCED_ITEM, referencedItem);
            return this;
        }

        public Builder additionalIdentifier(final java.util.List<Identifier> additionalIdentifier) {
            b.add(FhirPropertyNames.PROPERTY_ADDITIONAL_IDENTIFIER, FhirObject.toArray(additionalIdentifier));
            return this;
        }

        public Builder classification(final java.util.List<CodeableConcept> classification) {
            b.add(FhirPropertyNames.PROPERTY_CLASSIFICATION, FhirObject.toArray(classification));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder validityPeriod(final Period validityPeriod) {
            b.add(FhirPropertyNames.PROPERTY_VALIDITY_PERIOD, validityPeriod);
            return this;
        }

        public Builder validTo(final java.time.Instant validTo) {
            b.add(FhirPropertyNames.PROPERTY_VALID_TO, validTo.toString());
            return this;
        }

        public Builder lastUpdated(final java.time.Instant lastUpdated) {
            b.add(FhirPropertyNames.PROPERTY_LAST_UPDATED, lastUpdated.toString());
            return this;
        }

        public Builder additionalCharacteristic(final java.util.List<CodeableConcept> additionalCharacteristic) {
            b.add(FhirPropertyNames.PROPERTY_ADDITIONAL_CHARACTERISTIC, FhirObject.toArray(additionalCharacteristic));
            return this;
        }

        public Builder additionalClassification(final java.util.List<CodeableConcept> additionalClassification) {
            b.add(FhirPropertyNames.PROPERTY_ADDITIONAL_CLASSIFICATION, FhirObject.toArray(additionalClassification));
            return this;
        }

        public Builder relatedEntry(final java.util.List<CatalogEntryRelatedEntry> relatedEntry) {
            b.add(FhirPropertyNames.PROPERTY_RELATED_ENTRY, FhirObject.toArray(relatedEntry));
            return this;
        }

        public CatalogEntry build() {
            return new CatalogEntry(b.build());
        }
    }

    /**
     * Catalog entries are wrappers that contextualize items included in a
     * catalog.
     */
    public static class CatalogEntryRelatedEntry extends FhirObject {
        public static final String RESOURCE_TYPE = "CatalogEntryRelatedEntry";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public CatalogEntryRelatedEntry(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The type of relation to the related item: child, parent,
         * packageContent, containerPackage, usedIn, uses, requires, etc.
         */
        public String relationtype() {
            return getString(FhirPropertyNames.PROPERTY_RELATIONTYPE);
        }

        /**
         * The reference to the related item.
         */
        public Reference item() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_ITEM);
        }

        public static final class Builder extends FhirObject.Builder<CatalogEntryRelatedEntry, CatalogEntryRelatedEntry.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder relationtype(final String relationtype) {
                b.add(FhirPropertyNames.PROPERTY_RELATIONTYPE, relationtype);
                return this;
            }

            public Builder item(final Reference item) {
                b.add(FhirPropertyNames.PROPERTY_ITEM, item);
                return this;
            }

            public CatalogEntryRelatedEntry build() {
                return new CatalogEntryRelatedEntry(b.build());
            }
        }
    }
}
