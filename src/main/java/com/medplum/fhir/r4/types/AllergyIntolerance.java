/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Risk of harmful or undesirable, physiological response which is unique
 * to an individual and associated with exposure to a substance.
 */
public class AllergyIntolerance extends DomainResource {
    public static final String RESOURCE_TYPE = "AllergyIntolerance";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public AllergyIntolerance(final JsonObject data) {
        super(data);
    }

    /**
     * Business identifiers assigned to this AllergyIntolerance by the
     * performer or other systems which remain constant as the resource is
     * updated and propagates from server to server.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The clinical status of the allergy or intolerance.
     */
    public CodeableConcept clinicalStatus() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CLINICAL_STATUS);
    }

    /**
     * Assertion about certainty associated with the propensity, or potential
     * risk, of a reaction to the identified substance (including
     * pharmaceutical product).
     */
    public CodeableConcept verificationStatus() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_VERIFICATION_STATUS);
    }

    /**
     * Identification of the underlying physiological mechanism for the
     * reaction risk.
     */
    public String type() {
        return getString(FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * Category of the identified substance.
     */
    public java.util.List<String> category() {
        return getList(String.class, FhirPropertyNames.PROPERTY_CATEGORY);
    }

    /**
     * Estimate of the potential clinical harm, or seriousness, of the
     * reaction to the identified substance.
     */
    public String criticality() {
        return getString(FhirPropertyNames.PROPERTY_CRITICALITY);
    }

    /**
     * Code for an allergy or intolerance statement (either a positive or a
     * negated/excluded statement).  This may be a code for a substance or
     * pharmaceutical product that is considered to be responsible for the
     * adverse reaction risk (e.g., &quot;Latex&quot;), an allergy or intolerance
     * condition (e.g., &quot;Latex allergy&quot;), or a negated/excluded code for a
     * specific substance or class (e.g., &quot;No latex allergy&quot;) or a general or
     * categorical negated statement (e.g.,  &quot;No known allergy&quot;, &quot;No known
     * drug allergies&quot;).  Note: the substance for a specific reaction may be
     * different from the substance identified as the cause of the risk, but
     * it must be consistent with it. For instance, it may be a more specific
     * substance (e.g. a brand medication) or a composite product that
     * includes the identified substance. It must be clinically safe to only
     * process the 'code' and ignore the 'reaction.substance'.  If a
     * receiving system is unable to confirm that
     * AllergyIntolerance.reaction.substance falls within the semantic scope
     * of AllergyIntolerance.code, then the receiving system should ignore
     * AllergyIntolerance.reaction.substance.
     */
    public CodeableConcept code() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
    }

    /**
     * The patient who has the allergy or intolerance.
     */
    public Reference patient() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PATIENT);
    }

    /**
     * The encounter when the allergy or intolerance was asserted.
     */
    public Reference encounter() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ENCOUNTER);
    }

    /**
     * Estimated or actual date,  date-time, or age when allergy or
     * intolerance was identified.
     */
    public String onsetDateTime() {
        return getString(FhirPropertyNames.PROPERTY_ONSET_DATE_TIME);
    }

    /**
     * Estimated or actual date,  date-time, or age when allergy or
     * intolerance was identified.
     */
    public Age onsetAge() {
        return getObject(Age.class, FhirPropertyNames.PROPERTY_ONSET_AGE);
    }

    /**
     * Estimated or actual date,  date-time, or age when allergy or
     * intolerance was identified.
     */
    public Period onsetPeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_ONSET_PERIOD);
    }

    /**
     * Estimated or actual date,  date-time, or age when allergy or
     * intolerance was identified.
     */
    public Range onsetRange() {
        return getObject(Range.class, FhirPropertyNames.PROPERTY_ONSET_RANGE);
    }

    /**
     * Estimated or actual date,  date-time, or age when allergy or
     * intolerance was identified.
     */
    public String onsetString() {
        return getString(FhirPropertyNames.PROPERTY_ONSET_STRING);
    }

    /**
     * The recordedDate represents when this particular AllergyIntolerance
     * record was created in the system, which is often a system-generated
     * date.
     */
    public java.time.Instant recordedDate() {
        return getInstant(FhirPropertyNames.PROPERTY_RECORDED_DATE);
    }

    /**
     * Individual who recorded the record and takes responsibility for its
     * content.
     */
    public Reference recorder() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_RECORDER);
    }

    /**
     * The source of the information about the allergy that is recorded.
     */
    public Reference asserter() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ASSERTER);
    }

    /**
     * Represents the date and/or time of the last known occurrence of a
     * reaction event.
     */
    public java.time.Instant lastOccurrence() {
        return getInstant(FhirPropertyNames.PROPERTY_LAST_OCCURRENCE);
    }

    /**
     * Additional narrative about the propensity for the Adverse Reaction,
     * not captured in other fields.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    /**
     * Details about each adverse reaction event linked to exposure to the
     * identified substance.
     */
    public java.util.List<AllergyIntoleranceReaction> reaction() {
        return getList(AllergyIntoleranceReaction.class, FhirPropertyNames.PROPERTY_REACTION);
    }

    public static final class Builder extends DomainResource.Builder<AllergyIntolerance, AllergyIntolerance.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder clinicalStatus(final CodeableConcept clinicalStatus) {
            b.add(FhirPropertyNames.PROPERTY_CLINICAL_STATUS, clinicalStatus);
            return this;
        }

        public Builder verificationStatus(final CodeableConcept verificationStatus) {
            b.add(FhirPropertyNames.PROPERTY_VERIFICATION_STATUS, verificationStatus);
            return this;
        }

        public Builder type(final String type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, type);
            return this;
        }

        public Builder category(final java.util.List<String> category) {
            b.add(FhirPropertyNames.PROPERTY_CATEGORY, FhirObject.toStringArray(category));
            return this;
        }

        public Builder criticality(final String criticality) {
            b.add(FhirPropertyNames.PROPERTY_CRITICALITY, criticality);
            return this;
        }

        public Builder code(final CodeableConcept code) {
            b.add(FhirPropertyNames.PROPERTY_CODE, code);
            return this;
        }

        public Builder patient(final Reference patient) {
            b.add(FhirPropertyNames.PROPERTY_PATIENT, patient);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(FhirPropertyNames.PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder onsetDateTime(final String onsetDateTime) {
            b.add(FhirPropertyNames.PROPERTY_ONSET_DATE_TIME, onsetDateTime);
            return this;
        }

        public Builder onsetAge(final Age onsetAge) {
            b.add(FhirPropertyNames.PROPERTY_ONSET_AGE, onsetAge);
            return this;
        }

        public Builder onsetPeriod(final Period onsetPeriod) {
            b.add(FhirPropertyNames.PROPERTY_ONSET_PERIOD, onsetPeriod);
            return this;
        }

        public Builder onsetRange(final Range onsetRange) {
            b.add(FhirPropertyNames.PROPERTY_ONSET_RANGE, onsetRange);
            return this;
        }

        public Builder onsetString(final String onsetString) {
            b.add(FhirPropertyNames.PROPERTY_ONSET_STRING, onsetString);
            return this;
        }

        public Builder recordedDate(final java.time.Instant recordedDate) {
            b.add(FhirPropertyNames.PROPERTY_RECORDED_DATE, recordedDate.toString());
            return this;
        }

        public Builder recorder(final Reference recorder) {
            b.add(FhirPropertyNames.PROPERTY_RECORDER, recorder);
            return this;
        }

        public Builder asserter(final Reference asserter) {
            b.add(FhirPropertyNames.PROPERTY_ASSERTER, asserter);
            return this;
        }

        public Builder lastOccurrence(final java.time.Instant lastOccurrence) {
            b.add(FhirPropertyNames.PROPERTY_LAST_OCCURRENCE, lastOccurrence.toString());
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder reaction(final java.util.List<AllergyIntoleranceReaction> reaction) {
            b.add(FhirPropertyNames.PROPERTY_REACTION, FhirObject.toArray(reaction));
            return this;
        }

        public AllergyIntolerance build() {
            return new AllergyIntolerance(b.build());
        }
    }

    /**
     * Risk of harmful or undesirable, physiological response which is unique
     * to an individual and associated with exposure to a substance.
     */
    public static class AllergyIntoleranceReaction extends FhirObject {
        public static final String RESOURCE_TYPE = "AllergyIntoleranceReaction";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public AllergyIntoleranceReaction(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Identification of the specific substance (or pharmaceutical product)
         * considered to be responsible for the Adverse Reaction event. Note: the
         * substance for a specific reaction may be different from the substance
         * identified as the cause of the risk, but it must be consistent with
         * it. For instance, it may be a more specific substance (e.g. a brand
         * medication) or a composite product that includes the identified
         * substance. It must be clinically safe to only process the 'code' and
         * ignore the 'reaction.substance'.  If a receiving system is unable to
         * confirm that AllergyIntolerance.reaction.substance falls within the
         * semantic scope of AllergyIntolerance.code, then the receiving system
         * should ignore AllergyIntolerance.reaction.substance.
         */
        public CodeableConcept substance() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_SUBSTANCE);
        }

        /**
         * Clinical symptoms and/or signs that are observed or associated with
         * the adverse reaction event.
         */
        public java.util.List<CodeableConcept> manifestation() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_MANIFESTATION);
        }

        /**
         * Text description about the reaction as a whole, including details of
         * the manifestation if required.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * Record of the date and/or time of the onset of the Reaction.
         */
        public java.time.Instant onset() {
            return getInstant(FhirPropertyNames.PROPERTY_ONSET);
        }

        /**
         * Clinical assessment of the severity of the reaction event as a whole,
         * potentially considering multiple different manifestations.
         */
        public String severity() {
            return getString(FhirPropertyNames.PROPERTY_SEVERITY);
        }

        /**
         * Identification of the route by which the subject was exposed to the
         * substance.
         */
        public CodeableConcept exposureRoute() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_EXPOSURE_ROUTE);
        }

        /**
         * Additional text about the adverse reaction event not captured in other
         * fields.
         */
        public java.util.List<Annotation> note() {
            return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
        }

        public static final class Builder extends FhirObject.Builder<AllergyIntoleranceReaction, AllergyIntoleranceReaction.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder substance(final CodeableConcept substance) {
                b.add(FhirPropertyNames.PROPERTY_SUBSTANCE, substance);
                return this;
            }

            public Builder manifestation(final java.util.List<CodeableConcept> manifestation) {
                b.add(FhirPropertyNames.PROPERTY_MANIFESTATION, FhirObject.toArray(manifestation));
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder onset(final java.time.Instant onset) {
                b.add(FhirPropertyNames.PROPERTY_ONSET, onset.toString());
                return this;
            }

            public Builder severity(final String severity) {
                b.add(FhirPropertyNames.PROPERTY_SEVERITY, severity);
                return this;
            }

            public Builder exposureRoute(final CodeableConcept exposureRoute) {
                b.add(FhirPropertyNames.PROPERTY_EXPOSURE_ROUTE, exposureRoute);
                return this;
            }

            public Builder note(final java.util.List<Annotation> note) {
                b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
                return this;
            }

            public AllergyIntoleranceReaction build() {
                return new AllergyIntoleranceReaction(b.build());
            }
        }
    }
}
