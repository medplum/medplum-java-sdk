/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Example of workflow instance.
 */
public class ExampleScenario extends DomainResource {
    public static final String RESOURCE_TYPE = "ExampleScenario";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ExampleScenario(final JsonObject data) {
        super(data);
    }

    /**
     * An absolute URI that is used to identify this example scenario when it
     * is referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative
     * instance of this example scenario is (or will be) published. This URL
     * can be the target of a canonical reference. It SHALL remain the same
     * when the example scenario is stored on different servers.
     */
    public java.net.URI url() {
        return getUri(FhirPropertyNames.PROPERTY_URL);
    }

    /**
     * A formal identifier that is used to identify this example scenario
     * when it is represented in other formats, or referenced in a
     * specification, model, design or an instance.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The identifier that is used to identify this version of the example
     * scenario when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the example scenario
     * author and is not expected to be globally unique. For example, it
     * might be a timestamp (e.g. yyyymmdd) if a managed version is not
     * available. There is also no expectation that versions can be placed in
     * a lexicographical sequence.
     */
    public String version() {
        return getString(FhirPropertyNames.PROPERTY_VERSION);
    }

    /**
     * A natural language name identifying the example scenario. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    public String name() {
        return getString(FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * The status of this example scenario. Enables tracking the life-cycle
     * of the content.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * A Boolean value to indicate that this example scenario is authored for
     * testing purposes (or education/evaluation/marketing) and is not
     * intended to be used for genuine usage.
     */
    public Boolean experimental() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_EXPERIMENTAL);
    }

    /**
     * The date  (and optionally time) when the example scenario was
     * published. The date must change when the business version changes and
     * it must change if the status code changes. In addition, it should
     * change when the substantive content of the example scenario changes.
     * (e.g. the 'content logical definition').
     */
    public java.time.Instant date() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE);
    }

    /**
     * The name of the organization or individual that published the example
     * scenario.
     */
    public String publisher() {
        return getString(FhirPropertyNames.PROPERTY_PUBLISHER);
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_CONTACT);
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs
     * (insurance plans, studies, ...) and may be used to assist with
     * indexing and searching for appropriate example scenario instances.
     */
    public java.util.List<UsageContext> useContext() {
        return getList(UsageContext.class, FhirPropertyNames.PROPERTY_USE_CONTEXT);
    }

    /**
     * A legal or geographic region in which the example scenario is intended
     * to be used.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_JURISDICTION);
    }

    /**
     * A copyright statement relating to the example scenario and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the example scenario.
     */
    public String copyright() {
        return getString(FhirPropertyNames.PROPERTY_COPYRIGHT);
    }

    /**
     * What the example scenario resource is created for. This should not be
     * used to show the business purpose of the scenario itself, but the
     * purpose of documenting a scenario.
     */
    public String purpose() {
        return getString(FhirPropertyNames.PROPERTY_PURPOSE);
    }

    /**
     * Actor participating in the resource.
     */
    public java.util.List<ExampleScenarioActor> actor() {
        return getList(ExampleScenarioActor.class, FhirPropertyNames.PROPERTY_ACTOR);
    }

    /**
     * Each resource and each version that is present in the workflow.
     */
    public java.util.List<ExampleScenarioInstance> instance() {
        return getList(ExampleScenarioInstance.class, FhirPropertyNames.PROPERTY_INSTANCE);
    }

    /**
     * Each major process - a group of operations.
     */
    public java.util.List<ExampleScenarioProcess> process() {
        return getList(ExampleScenarioProcess.class, FhirPropertyNames.PROPERTY_PROCESS);
    }

    /**
     * Another nested workflow.
     */
    public java.util.List<String> workflow() {
        return getList(String.class, FhirPropertyNames.PROPERTY_WORKFLOW);
    }

    public static final class Builder extends DomainResource.Builder<ExampleScenario, ExampleScenario.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder url(final java.net.URI url) {
            b.add(FhirPropertyNames.PROPERTY_URL, url.toString());
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder version(final String version) {
            b.add(FhirPropertyNames.PROPERTY_VERSION, version);
            return this;
        }

        public Builder name(final String name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, name);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder experimental(final Boolean experimental) {
            b.add(FhirPropertyNames.PROPERTY_EXPERIMENTAL, experimental);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder publisher(final String publisher) {
            b.add(FhirPropertyNames.PROPERTY_PUBLISHER, publisher);
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(FhirPropertyNames.PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder useContext(final java.util.List<UsageContext> useContext) {
            b.add(FhirPropertyNames.PROPERTY_USE_CONTEXT, FhirObject.toArray(useContext));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(FhirPropertyNames.PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder copyright(final String copyright) {
            b.add(FhirPropertyNames.PROPERTY_COPYRIGHT, copyright);
            return this;
        }

        public Builder purpose(final String purpose) {
            b.add(FhirPropertyNames.PROPERTY_PURPOSE, purpose);
            return this;
        }

        public Builder actor(final java.util.List<ExampleScenarioActor> actor) {
            b.add(FhirPropertyNames.PROPERTY_ACTOR, FhirObject.toArray(actor));
            return this;
        }

        public Builder instance(final java.util.List<ExampleScenarioInstance> instance) {
            b.add(FhirPropertyNames.PROPERTY_INSTANCE, FhirObject.toArray(instance));
            return this;
        }

        public Builder process(final java.util.List<ExampleScenarioProcess> process) {
            b.add(FhirPropertyNames.PROPERTY_PROCESS, FhirObject.toArray(process));
            return this;
        }

        public Builder workflow(final java.util.List<String> workflow) {
            b.add(FhirPropertyNames.PROPERTY_WORKFLOW, FhirObject.toStringArray(workflow));
            return this;
        }

        public ExampleScenario build() {
            return new ExampleScenario(b.build());
        }
    }

    /**
     * Example of workflow instance.
     */
    public static class ExampleScenarioActor extends FhirObject {
        public static final String RESOURCE_TYPE = "ExampleScenarioActor";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ExampleScenarioActor(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * ID or acronym of actor.
         */
        public String actorId() {
            return getString(FhirPropertyNames.PROPERTY_ACTOR_ID);
        }

        /**
         * The type of actor - person or system.
         */
        public String type() {
            return getString(FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The name of the actor as shown in the page.
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * The description of the actor.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        public static final class Builder extends FhirObject.Builder<ExampleScenarioActor, ExampleScenarioActor.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder actorId(final String actorId) {
                b.add(FhirPropertyNames.PROPERTY_ACTOR_ID, actorId);
                return this;
            }

            public Builder type(final String type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public ExampleScenarioActor build() {
                return new ExampleScenarioActor(b.build());
            }
        }
    }

    /**
     * Example of workflow instance.
     */
    public static class ExampleScenarioAlternative extends FhirObject {
        public static final String RESOURCE_TYPE = "ExampleScenarioAlternative";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ExampleScenarioAlternative(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The label to display for the alternative that gives a sense of the
         * circumstance in which the alternative should be invoked.
         */
        public String title() {
            return getString(FhirPropertyNames.PROPERTY_TITLE);
        }

        /**
         * A human-readable description of the alternative explaining when the
         * alternative should occur rather than the base step.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * What happens in each alternative option.
         */
        public java.util.List<ExampleScenarioStep> step() {
            return getList(ExampleScenarioStep.class, FhirPropertyNames.PROPERTY_STEP);
        }

        public static final class Builder extends FhirObject.Builder<ExampleScenarioAlternative, ExampleScenarioAlternative.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder title(final String title) {
                b.add(FhirPropertyNames.PROPERTY_TITLE, title);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder step(final java.util.List<ExampleScenarioStep> step) {
                b.add(FhirPropertyNames.PROPERTY_STEP, FhirObject.toArray(step));
                return this;
            }

            public ExampleScenarioAlternative build() {
                return new ExampleScenarioAlternative(b.build());
            }
        }
    }

    /**
     * Example of workflow instance.
     */
    public static class ExampleScenarioContainedInstance extends FhirObject {
        public static final String RESOURCE_TYPE = "ExampleScenarioContainedInstance";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ExampleScenarioContainedInstance(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Each resource contained in the instance.
         */
        public String resourceId() {
            return getString(FhirPropertyNames.PROPERTY_RESOURCE_ID);
        }

        /**
         * A specific version of a resource contained in the instance.
         */
        public String versionId() {
            return getString(FhirPropertyNames.PROPERTY_VERSION_ID);
        }

        public static final class Builder extends FhirObject.Builder<ExampleScenarioContainedInstance, ExampleScenarioContainedInstance.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder resourceId(final String resourceId) {
                b.add(FhirPropertyNames.PROPERTY_RESOURCE_ID, resourceId);
                return this;
            }

            public Builder versionId(final String versionId) {
                b.add(FhirPropertyNames.PROPERTY_VERSION_ID, versionId);
                return this;
            }

            public ExampleScenarioContainedInstance build() {
                return new ExampleScenarioContainedInstance(b.build());
            }
        }
    }

    /**
     * Example of workflow instance.
     */
    public static class ExampleScenarioInstance extends FhirObject {
        public static final String RESOURCE_TYPE = "ExampleScenarioInstance";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ExampleScenarioInstance(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The id of the resource for referencing.
         */
        public String resourceId() {
            return getString(FhirPropertyNames.PROPERTY_RESOURCE_ID);
        }

        /**
         * The type of the resource.
         */
        public String resourceType() {
            return getString(FhirPropertyNames.PROPERTY_RESOURCE_TYPE);
        }

        /**
         * A short name for the resource instance.
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * Human-friendly description of the resource instance.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * A specific version of the resource.
         */
        public java.util.List<ExampleScenarioVersion> version() {
            return getList(ExampleScenarioVersion.class, FhirPropertyNames.PROPERTY_VERSION);
        }

        /**
         * Resources contained in the instance (e.g. the observations contained
         * in a bundle).
         */
        public java.util.List<ExampleScenarioContainedInstance> containedInstance() {
            return getList(ExampleScenarioContainedInstance.class, FhirPropertyNames.PROPERTY_CONTAINED_INSTANCE);
        }

        public static final class Builder extends FhirObject.Builder<ExampleScenarioInstance, ExampleScenarioInstance.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder resourceId(final String resourceId) {
                b.add(FhirPropertyNames.PROPERTY_RESOURCE_ID, resourceId);
                return this;
            }

            public Builder resourceType(final String resourceType) {
                b.add(FhirPropertyNames.PROPERTY_RESOURCE_TYPE, resourceType);
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder version(final java.util.List<ExampleScenarioVersion> version) {
                b.add(FhirPropertyNames.PROPERTY_VERSION, FhirObject.toArray(version));
                return this;
            }

            public Builder containedInstance(final java.util.List<ExampleScenarioContainedInstance> containedInstance) {
                b.add(FhirPropertyNames.PROPERTY_CONTAINED_INSTANCE, FhirObject.toArray(containedInstance));
                return this;
            }

            public ExampleScenarioInstance build() {
                return new ExampleScenarioInstance(b.build());
            }
        }
    }

    /**
     * Example of workflow instance.
     */
    public static class ExampleScenarioOperation extends FhirObject {
        public static final String RESOURCE_TYPE = "ExampleScenarioOperation";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ExampleScenarioOperation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The sequential number of the interaction, e.g. 1.2.5.
         */
        public String number() {
            return getString(FhirPropertyNames.PROPERTY_NUMBER);
        }

        /**
         * The type of operation - CRUD.
         */
        public String type() {
            return getString(FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The human-friendly name of the interaction.
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * Who starts the transaction.
         */
        public String initiator() {
            return getString(FhirPropertyNames.PROPERTY_INITIATOR);
        }

        /**
         * Who receives the transaction.
         */
        public String receiver() {
            return getString(FhirPropertyNames.PROPERTY_RECEIVER);
        }

        /**
         * A comment to be inserted in the diagram.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * Whether the initiator is deactivated right after the transaction.
         */
        public Boolean initiatorActive() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_INITIATOR_ACTIVE);
        }

        /**
         * Whether the receiver is deactivated right after the transaction.
         */
        public Boolean receiverActive() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_RECEIVER_ACTIVE);
        }

        /**
         * Each resource instance used by the initiator.
         */
        public ExampleScenarioContainedInstance request() {
            return getObject(ExampleScenarioContainedInstance.class, FhirPropertyNames.PROPERTY_REQUEST);
        }

        /**
         * Each resource instance used by the responder.
         */
        public ExampleScenarioContainedInstance response() {
            return getObject(ExampleScenarioContainedInstance.class, FhirPropertyNames.PROPERTY_RESPONSE);
        }

        public static final class Builder extends FhirObject.Builder<ExampleScenarioOperation, ExampleScenarioOperation.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder number(final String number) {
                b.add(FhirPropertyNames.PROPERTY_NUMBER, number);
                return this;
            }

            public Builder type(final String type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder initiator(final String initiator) {
                b.add(FhirPropertyNames.PROPERTY_INITIATOR, initiator);
                return this;
            }

            public Builder receiver(final String receiver) {
                b.add(FhirPropertyNames.PROPERTY_RECEIVER, receiver);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder initiatorActive(final Boolean initiatorActive) {
                b.add(FhirPropertyNames.PROPERTY_INITIATOR_ACTIVE, initiatorActive);
                return this;
            }

            public Builder receiverActive(final Boolean receiverActive) {
                b.add(FhirPropertyNames.PROPERTY_RECEIVER_ACTIVE, receiverActive);
                return this;
            }

            public Builder request(final ExampleScenarioContainedInstance request) {
                b.add(FhirPropertyNames.PROPERTY_REQUEST, request);
                return this;
            }

            public Builder response(final ExampleScenarioContainedInstance response) {
                b.add(FhirPropertyNames.PROPERTY_RESPONSE, response);
                return this;
            }

            public ExampleScenarioOperation build() {
                return new ExampleScenarioOperation(b.build());
            }
        }
    }

    /**
     * Example of workflow instance.
     */
    public static class ExampleScenarioProcess extends FhirObject {
        public static final String RESOURCE_TYPE = "ExampleScenarioProcess";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ExampleScenarioProcess(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The diagram title of the group of operations.
         */
        public String title() {
            return getString(FhirPropertyNames.PROPERTY_TITLE);
        }

        /**
         * A longer description of the group of operations.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * Description of initial status before the process starts.
         */
        public String preConditions() {
            return getString(FhirPropertyNames.PROPERTY_PRE_CONDITIONS);
        }

        /**
         * Description of final status after the process ends.
         */
        public String postConditions() {
            return getString(FhirPropertyNames.PROPERTY_POST_CONDITIONS);
        }

        /**
         * Each step of the process.
         */
        public java.util.List<ExampleScenarioStep> step() {
            return getList(ExampleScenarioStep.class, FhirPropertyNames.PROPERTY_STEP);
        }

        public static final class Builder extends FhirObject.Builder<ExampleScenarioProcess, ExampleScenarioProcess.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder title(final String title) {
                b.add(FhirPropertyNames.PROPERTY_TITLE, title);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder preConditions(final String preConditions) {
                b.add(FhirPropertyNames.PROPERTY_PRE_CONDITIONS, preConditions);
                return this;
            }

            public Builder postConditions(final String postConditions) {
                b.add(FhirPropertyNames.PROPERTY_POST_CONDITIONS, postConditions);
                return this;
            }

            public Builder step(final java.util.List<ExampleScenarioStep> step) {
                b.add(FhirPropertyNames.PROPERTY_STEP, FhirObject.toArray(step));
                return this;
            }

            public ExampleScenarioProcess build() {
                return new ExampleScenarioProcess(b.build());
            }
        }
    }

    /**
     * Example of workflow instance.
     */
    public static class ExampleScenarioStep extends FhirObject {
        public static final String RESOURCE_TYPE = "ExampleScenarioStep";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ExampleScenarioStep(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Nested process.
         */
        public java.util.List<ExampleScenarioProcess> process() {
            return getList(ExampleScenarioProcess.class, FhirPropertyNames.PROPERTY_PROCESS);
        }

        /**
         * If there is a pause in the flow.
         */
        public Boolean pause() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_PAUSE);
        }

        /**
         * Each interaction or action.
         */
        public ExampleScenarioOperation operation() {
            return getObject(ExampleScenarioOperation.class, FhirPropertyNames.PROPERTY_OPERATION);
        }

        /**
         * Indicates an alternative step that can be taken instead of the
         * operations on the base step in exceptional/atypical circumstances.
         */
        public java.util.List<ExampleScenarioAlternative> alternative() {
            return getList(ExampleScenarioAlternative.class, FhirPropertyNames.PROPERTY_ALTERNATIVE);
        }

        public static final class Builder extends FhirObject.Builder<ExampleScenarioStep, ExampleScenarioStep.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder process(final java.util.List<ExampleScenarioProcess> process) {
                b.add(FhirPropertyNames.PROPERTY_PROCESS, FhirObject.toArray(process));
                return this;
            }

            public Builder pause(final Boolean pause) {
                b.add(FhirPropertyNames.PROPERTY_PAUSE, pause);
                return this;
            }

            public Builder operation(final ExampleScenarioOperation operation) {
                b.add(FhirPropertyNames.PROPERTY_OPERATION, operation);
                return this;
            }

            public Builder alternative(final java.util.List<ExampleScenarioAlternative> alternative) {
                b.add(FhirPropertyNames.PROPERTY_ALTERNATIVE, FhirObject.toArray(alternative));
                return this;
            }

            public ExampleScenarioStep build() {
                return new ExampleScenarioStep(b.build());
            }
        }
    }

    /**
     * Example of workflow instance.
     */
    public static class ExampleScenarioVersion extends FhirObject {
        public static final String RESOURCE_TYPE = "ExampleScenarioVersion";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ExampleScenarioVersion(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The identifier of a specific version of a resource.
         */
        public String versionId() {
            return getString(FhirPropertyNames.PROPERTY_VERSION_ID);
        }

        /**
         * The description of the resource version.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        public static final class Builder extends FhirObject.Builder<ExampleScenarioVersion, ExampleScenarioVersion.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder versionId(final String versionId) {
                b.add(FhirPropertyNames.PROPERTY_VERSION_ID, versionId);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public ExampleScenarioVersion build() {
                return new ExampleScenarioVersion(b.build());
            }
        }
    }
}
