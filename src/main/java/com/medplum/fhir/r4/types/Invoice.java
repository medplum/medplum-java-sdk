/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Invoice containing collected ChargeItems from an Account with
 * calculated individual and total price for Billing purpose.
 */
public class Invoice extends DomainResource {
    public static final String RESOURCE_TYPE = "Invoice";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Invoice(final JsonObject data) {
        super(data);
    }

    /**
     * Identifier of this Invoice, often used for reference in correspondence
     * about this invoice or for tracking of payments.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The current state of the Invoice.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * In case of Invoice cancellation a reason must be given (entered in
     * error, superseded by corrected invoice etc.).
     */
    public String cancelledReason() {
        return getString(FhirPropertyNames.PROPERTY_CANCELLED_REASON);
    }

    /**
     * Type of Invoice depending on domain, realm an usage (e.g.
     * internal/external, dental, preliminary).
     */
    public CodeableConcept type() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * The individual or set of individuals receiving the goods and services
     * billed in this invoice.
     */
    public Reference subject() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * The individual or Organization responsible for balancing of this
     * invoice.
     */
    public Reference recipient() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_RECIPIENT);
    }

    /**
     * Date/time(s) of when this Invoice was posted.
     */
    public java.time.Instant date() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE);
    }

    /**
     * Indicates who or what performed or participated in the charged
     * service.
     */
    public java.util.List<InvoiceParticipant> participant() {
        return getList(InvoiceParticipant.class, FhirPropertyNames.PROPERTY_PARTICIPANT);
    }

    /**
     * The organizationissuing the Invoice.
     */
    public Reference issuer() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ISSUER);
    }

    /**
     * Account which is supposed to be balanced with this Invoice.
     */
    public Reference account() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ACCOUNT);
    }

    /**
     * Each line item represents one charge for goods and services rendered.
     * Details such as date, code and amount are found in the referenced
     * ChargeItem resource.
     */
    public java.util.List<InvoiceLineItem> lineItem() {
        return getList(InvoiceLineItem.class, FhirPropertyNames.PROPERTY_LINE_ITEM);
    }

    /**
     * The total amount for the Invoice may be calculated as the sum of the
     * line items with surcharges/deductions that apply in certain
     * conditions.  The priceComponent element can be used to offer
     * transparency to the recipient of the Invoice of how the total price
     * was calculated.
     */
    public java.util.List<InvoicePriceComponent> totalPriceComponent() {
        return getList(InvoicePriceComponent.class, FhirPropertyNames.PROPERTY_TOTAL_PRICE_COMPONENT);
    }

    /**
     * Invoice total , taxes excluded.
     */
    public Money totalNet() {
        return getObject(Money.class, FhirPropertyNames.PROPERTY_TOTAL_NET);
    }

    /**
     * Invoice total, tax included.
     */
    public Money totalGross() {
        return getObject(Money.class, FhirPropertyNames.PROPERTY_TOTAL_GROSS);
    }

    /**
     * Payment details such as banking details, period of payment,
     * deductibles, methods of payment.
     */
    public String paymentTerms() {
        return getString(FhirPropertyNames.PROPERTY_PAYMENT_TERMS);
    }

    /**
     * Comments made about the invoice by the issuer, subject, or other
     * participants.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    public static final class Builder extends DomainResource.Builder<Invoice, Invoice.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder cancelledReason(final String cancelledReason) {
            b.add(FhirPropertyNames.PROPERTY_CANCELLED_REASON, cancelledReason);
            return this;
        }

        public Builder type(final CodeableConcept type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, type);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder recipient(final Reference recipient) {
            b.add(FhirPropertyNames.PROPERTY_RECIPIENT, recipient);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder participant(final java.util.List<InvoiceParticipant> participant) {
            b.add(FhirPropertyNames.PROPERTY_PARTICIPANT, FhirObject.toArray(participant));
            return this;
        }

        public Builder issuer(final Reference issuer) {
            b.add(FhirPropertyNames.PROPERTY_ISSUER, issuer);
            return this;
        }

        public Builder account(final Reference account) {
            b.add(FhirPropertyNames.PROPERTY_ACCOUNT, account);
            return this;
        }

        public Builder lineItem(final java.util.List<InvoiceLineItem> lineItem) {
            b.add(FhirPropertyNames.PROPERTY_LINE_ITEM, FhirObject.toArray(lineItem));
            return this;
        }

        public Builder totalPriceComponent(final java.util.List<InvoicePriceComponent> totalPriceComponent) {
            b.add(FhirPropertyNames.PROPERTY_TOTAL_PRICE_COMPONENT, FhirObject.toArray(totalPriceComponent));
            return this;
        }

        public Builder totalNet(final Money totalNet) {
            b.add(FhirPropertyNames.PROPERTY_TOTAL_NET, totalNet);
            return this;
        }

        public Builder totalGross(final Money totalGross) {
            b.add(FhirPropertyNames.PROPERTY_TOTAL_GROSS, totalGross);
            return this;
        }

        public Builder paymentTerms(final String paymentTerms) {
            b.add(FhirPropertyNames.PROPERTY_PAYMENT_TERMS, paymentTerms);
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Invoice build() {
            return new Invoice(b.build());
        }
    }

    /**
     * Invoice containing collected ChargeItems from an Account with
     * calculated individual and total price for Billing purpose.
     */
    public static class InvoiceLineItem extends FhirObject {
        public static final String RESOURCE_TYPE = "InvoiceLineItem";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public InvoiceLineItem(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Sequence in which the items appear on the invoice.
         */
        public Integer sequence() {
            return data.getInt(FhirPropertyNames.PROPERTY_SEQUENCE);
        }

        /**
         * The ChargeItem contains information such as the billing code, date,
         * amount etc. If no further details are required for the lineItem,
         * inline billing codes can be added using the CodeableConcept data type
         * instead of the Reference.
         */
        public Reference chargeItemReference() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_CHARGE_ITEM_REFERENCE);
        }

        /**
         * The ChargeItem contains information such as the billing code, date,
         * amount etc. If no further details are required for the lineItem,
         * inline billing codes can be added using the CodeableConcept data type
         * instead of the Reference.
         */
        public CodeableConcept chargeItemCodeableConcept() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CHARGE_ITEM_CODEABLE_CONCEPT);
        }

        /**
         * The price for a ChargeItem may be calculated as a base price with
         * surcharges/deductions that apply in certain conditions. A
         * ChargeItemDefinition resource that defines the prices, factors and
         * conditions that apply to a billing code is currently under
         * development. The priceComponent element can be used to offer
         * transparency to the recipient of the Invoice as to how the prices have
         * been calculated.
         */
        public java.util.List<InvoicePriceComponent> priceComponent() {
            return getList(InvoicePriceComponent.class, FhirPropertyNames.PROPERTY_PRICE_COMPONENT);
        }

        public static final class Builder extends FhirObject.Builder<InvoiceLineItem, InvoiceLineItem.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder sequence(final Integer sequence) {
                b.add(FhirPropertyNames.PROPERTY_SEQUENCE, sequence);
                return this;
            }

            public Builder chargeItemReference(final Reference chargeItemReference) {
                b.add(FhirPropertyNames.PROPERTY_CHARGE_ITEM_REFERENCE, chargeItemReference);
                return this;
            }

            public Builder chargeItemCodeableConcept(final CodeableConcept chargeItemCodeableConcept) {
                b.add(FhirPropertyNames.PROPERTY_CHARGE_ITEM_CODEABLE_CONCEPT, chargeItemCodeableConcept);
                return this;
            }

            public Builder priceComponent(final java.util.List<InvoicePriceComponent> priceComponent) {
                b.add(FhirPropertyNames.PROPERTY_PRICE_COMPONENT, FhirObject.toArray(priceComponent));
                return this;
            }

            public InvoiceLineItem build() {
                return new InvoiceLineItem(b.build());
            }
        }
    }

    /**
     * Invoice containing collected ChargeItems from an Account with
     * calculated individual and total price for Billing purpose.
     */
    public static class InvoiceParticipant extends FhirObject {
        public static final String RESOURCE_TYPE = "InvoiceParticipant";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public InvoiceParticipant(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Describes the type of involvement (e.g. transcriptionist, creator
         * etc.). If the invoice has been created automatically, the Participant
         * may be a billing engine or another kind of device.
         */
        public CodeableConcept role() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_ROLE);
        }

        /**
         * The device, practitioner, etc. who performed or participated in the
         * service.
         */
        public Reference actor() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_ACTOR);
        }

        public static final class Builder extends FhirObject.Builder<InvoiceParticipant, InvoiceParticipant.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder role(final CodeableConcept role) {
                b.add(FhirPropertyNames.PROPERTY_ROLE, role);
                return this;
            }

            public Builder actor(final Reference actor) {
                b.add(FhirPropertyNames.PROPERTY_ACTOR, actor);
                return this;
            }

            public InvoiceParticipant build() {
                return new InvoiceParticipant(b.build());
            }
        }
    }

    /**
     * Invoice containing collected ChargeItems from an Account with
     * calculated individual and total price for Billing purpose.
     */
    public static class InvoicePriceComponent extends FhirObject {
        public static final String RESOURCE_TYPE = "InvoicePriceComponent";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public InvoicePriceComponent(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * This code identifies the type of the component.
         */
        public String type() {
            return getString(FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * A code that identifies the component. Codes may be used to
         * differentiate between kinds of taxes, surcharges, discounts etc.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * The factor that has been applied on the base price for calculating
         * this component.
         */
        public Double factor() {
            return data.getJsonNumber(FhirPropertyNames.PROPERTY_FACTOR).doubleValue();
        }

        /**
         * The amount calculated for this component.
         */
        public Money amount() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_AMOUNT);
        }

        public static final class Builder extends FhirObject.Builder<InvoicePriceComponent, InvoicePriceComponent.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final String type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder factor(final Double factor) {
                b.add(FhirPropertyNames.PROPERTY_FACTOR, factor);
                return this;
            }

            public Builder amount(final Money amount) {
                b.add(FhirPropertyNames.PROPERTY_AMOUNT, amount);
                return this;
            }

            public InvoicePriceComponent build() {
                return new InvoicePriceComponent(b.build());
            }
        }
    }
}
