/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * This resource provides the adjudication details from the processing of
 * a Claim resource.
 */
public class ClaimResponse extends DomainResource {
    public static final String RESOURCE_TYPE = "ClaimResponse";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ClaimResponse(final JsonObject data) {
        super(data);
    }

    /**
     * A unique identifier assigned to this claim response.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The status of the resource instance.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * A finer grained suite of claim type codes which may convey additional
     * information such as Inpatient vs Outpatient and/or a specialty
     * service.
     */
    public CodeableConcept type() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * A finer grained suite of claim type codes which may convey additional
     * information such as Inpatient vs Outpatient and/or a specialty
     * service.
     */
    public CodeableConcept subType() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_SUB_TYPE);
    }

    /**
     * A code to indicate whether the nature of the request is: to request
     * adjudication of products and services previously rendered; or
     * requesting authorization and adjudication for provision in the future;
     * or requesting the non-binding adjudication of the listed products and
     * services which could be provided in the future.
     */
    public String use() {
        return getString(FhirPropertyNames.PROPERTY_USE);
    }

    /**
     * The party to whom the professional services and/or products have been
     * supplied or are being considered and for whom actual for facast
     * reimbursement is sought.
     */
    public Reference patient() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PATIENT);
    }

    /**
     * The date this resource was created.
     */
    public java.time.Instant created() {
        return getInstant(FhirPropertyNames.PROPERTY_CREATED);
    }

    /**
     * The party responsible for authorization, adjudication and
     * reimbursement.
     */
    public Reference insurer() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_INSURER);
    }

    /**
     * The provider which is responsible for the claim, predetermination or
     * preauthorization.
     */
    public Reference requestor() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_REQUESTOR);
    }

    /**
     * Original request resource reference.
     */
    public Reference request() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_REQUEST);
    }

    /**
     * The outcome of the claim, predetermination, or preauthorization
     * processing.
     */
    public String outcome() {
        return getString(FhirPropertyNames.PROPERTY_OUTCOME);
    }

    /**
     * A human readable description of the status of the adjudication.
     */
    public String disposition() {
        return getString(FhirPropertyNames.PROPERTY_DISPOSITION);
    }

    /**
     * Reference from the Insurer which is used in later communications which
     * refers to this adjudication.
     */
    public String preAuthRef() {
        return getString(FhirPropertyNames.PROPERTY_PRE_AUTH_REF);
    }

    /**
     * The time frame during which this authorization is effective.
     */
    public Period preAuthPeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_PRE_AUTH_PERIOD);
    }

    /**
     * Type of Party to be reimbursed: subscriber, provider, other.
     */
    public CodeableConcept payeeType() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_PAYEE_TYPE);
    }

    /**
     * A claim line. Either a simple (a product or service) or a 'group' of
     * details which can also be a simple items or groups of sub-details.
     */
    public java.util.List<ClaimResponseItem> item() {
        return getList(ClaimResponseItem.class, FhirPropertyNames.PROPERTY_ITEM);
    }

    /**
     * The first-tier service adjudications for payor added product or
     * service lines.
     */
    public java.util.List<ClaimResponseAddItem> addItem() {
        return getList(ClaimResponseAddItem.class, FhirPropertyNames.PROPERTY_ADD_ITEM);
    }

    /**
     * The adjudication results which are presented at the header level
     * rather than at the line-item or add-item levels.
     */
    public java.util.List<ClaimResponseAdjudication> adjudication() {
        return getList(ClaimResponseAdjudication.class, FhirPropertyNames.PROPERTY_ADJUDICATION);
    }

    /**
     * Categorized monetary totals for the adjudication.
     */
    public java.util.List<ClaimResponseTotal> total() {
        return getList(ClaimResponseTotal.class, FhirPropertyNames.PROPERTY_TOTAL);
    }

    /**
     * Payment details for the adjudication of the claim.
     */
    public ClaimResponsePayment payment() {
        return getObject(ClaimResponsePayment.class, FhirPropertyNames.PROPERTY_PAYMENT);
    }

    /**
     * A code, used only on a response to a preauthorization, to indicate
     * whether the benefits payable have been reserved and for whom.
     */
    public CodeableConcept fundsReserve() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_FUNDS_RESERVE);
    }

    /**
     * A code for the form to be used for printing the content.
     */
    public CodeableConcept formCode() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_FORM_CODE);
    }

    /**
     * The actual form, by reference or inclusion, for printing the content
     * or an EOB.
     */
    public Attachment form() {
        return getObject(Attachment.class, FhirPropertyNames.PROPERTY_FORM);
    }

    /**
     * A note that describes or explains adjudication results in a human
     * readable form.
     */
    public java.util.List<ClaimResponseProcessNote> processNote() {
        return getList(ClaimResponseProcessNote.class, FhirPropertyNames.PROPERTY_PROCESS_NOTE);
    }

    /**
     * Request for additional supporting or authorizing information.
     */
    public java.util.List<Reference> communicationRequest() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_COMMUNICATION_REQUEST);
    }

    /**
     * Financial instruments for reimbursement for the health care products
     * and services specified on the claim.
     */
    public java.util.List<ClaimResponseInsurance> insurance() {
        return getList(ClaimResponseInsurance.class, FhirPropertyNames.PROPERTY_INSURANCE);
    }

    /**
     * Errors encountered during the processing of the adjudication.
     */
    public java.util.List<ClaimResponseError> error() {
        return getList(ClaimResponseError.class, FhirPropertyNames.PROPERTY_ERROR);
    }

    public static final class Builder extends DomainResource.Builder<ClaimResponse, ClaimResponse.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder type(final CodeableConcept type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, type);
            return this;
        }

        public Builder subType(final CodeableConcept subType) {
            b.add(FhirPropertyNames.PROPERTY_SUB_TYPE, subType);
            return this;
        }

        public Builder use(final String use) {
            b.add(FhirPropertyNames.PROPERTY_USE, use);
            return this;
        }

        public Builder patient(final Reference patient) {
            b.add(FhirPropertyNames.PROPERTY_PATIENT, patient);
            return this;
        }

        public Builder created(final java.time.Instant created) {
            b.add(FhirPropertyNames.PROPERTY_CREATED, created.toString());
            return this;
        }

        public Builder insurer(final Reference insurer) {
            b.add(FhirPropertyNames.PROPERTY_INSURER, insurer);
            return this;
        }

        public Builder requestor(final Reference requestor) {
            b.add(FhirPropertyNames.PROPERTY_REQUESTOR, requestor);
            return this;
        }

        public Builder request(final Reference request) {
            b.add(FhirPropertyNames.PROPERTY_REQUEST, request);
            return this;
        }

        public Builder outcome(final String outcome) {
            b.add(FhirPropertyNames.PROPERTY_OUTCOME, outcome);
            return this;
        }

        public Builder disposition(final String disposition) {
            b.add(FhirPropertyNames.PROPERTY_DISPOSITION, disposition);
            return this;
        }

        public Builder preAuthRef(final String preAuthRef) {
            b.add(FhirPropertyNames.PROPERTY_PRE_AUTH_REF, preAuthRef);
            return this;
        }

        public Builder preAuthPeriod(final Period preAuthPeriod) {
            b.add(FhirPropertyNames.PROPERTY_PRE_AUTH_PERIOD, preAuthPeriod);
            return this;
        }

        public Builder payeeType(final CodeableConcept payeeType) {
            b.add(FhirPropertyNames.PROPERTY_PAYEE_TYPE, payeeType);
            return this;
        }

        public Builder item(final java.util.List<ClaimResponseItem> item) {
            b.add(FhirPropertyNames.PROPERTY_ITEM, FhirObject.toArray(item));
            return this;
        }

        public Builder addItem(final java.util.List<ClaimResponseAddItem> addItem) {
            b.add(FhirPropertyNames.PROPERTY_ADD_ITEM, FhirObject.toArray(addItem));
            return this;
        }

        public Builder adjudication(final java.util.List<ClaimResponseAdjudication> adjudication) {
            b.add(FhirPropertyNames.PROPERTY_ADJUDICATION, FhirObject.toArray(adjudication));
            return this;
        }

        public Builder total(final java.util.List<ClaimResponseTotal> total) {
            b.add(FhirPropertyNames.PROPERTY_TOTAL, FhirObject.toArray(total));
            return this;
        }

        public Builder payment(final ClaimResponsePayment payment) {
            b.add(FhirPropertyNames.PROPERTY_PAYMENT, payment);
            return this;
        }

        public Builder fundsReserve(final CodeableConcept fundsReserve) {
            b.add(FhirPropertyNames.PROPERTY_FUNDS_RESERVE, fundsReserve);
            return this;
        }

        public Builder formCode(final CodeableConcept formCode) {
            b.add(FhirPropertyNames.PROPERTY_FORM_CODE, formCode);
            return this;
        }

        public Builder form(final Attachment form) {
            b.add(FhirPropertyNames.PROPERTY_FORM, form);
            return this;
        }

        public Builder processNote(final java.util.List<ClaimResponseProcessNote> processNote) {
            b.add(FhirPropertyNames.PROPERTY_PROCESS_NOTE, FhirObject.toArray(processNote));
            return this;
        }

        public Builder communicationRequest(final java.util.List<Reference> communicationRequest) {
            b.add(FhirPropertyNames.PROPERTY_COMMUNICATION_REQUEST, FhirObject.toArray(communicationRequest));
            return this;
        }

        public Builder insurance(final java.util.List<ClaimResponseInsurance> insurance) {
            b.add(FhirPropertyNames.PROPERTY_INSURANCE, FhirObject.toArray(insurance));
            return this;
        }

        public Builder error(final java.util.List<ClaimResponseError> error) {
            b.add(FhirPropertyNames.PROPERTY_ERROR, FhirObject.toArray(error));
            return this;
        }

        public ClaimResponse build() {
            return new ClaimResponse(b.build());
        }
    }

    /**
     * This resource provides the adjudication details from the processing of
     * a Claim resource.
     */
    public static class ClaimResponseAddItem extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseAddItem";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseAddItem(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Claim items which this service line is intended to replace.
         */
        public java.util.List<Integer> itemSequence() {
            return getList(Integer.class, FhirPropertyNames.PROPERTY_ITEM_SEQUENCE);
        }

        /**
         * The sequence number of the details within the claim item which this
         * line is intended to replace.
         */
        public java.util.List<Integer> detailSequence() {
            return getList(Integer.class, FhirPropertyNames.PROPERTY_DETAIL_SEQUENCE);
        }

        /**
         * The sequence number of the sub-details within the details within the
         * claim item which this line is intended to replace.
         */
        public java.util.List<Integer> subdetailSequence() {
            return getList(Integer.class, FhirPropertyNames.PROPERTY_SUBDETAIL_SEQUENCE);
        }

        /**
         * The providers who are authorized for the services rendered to the
         * patient.
         */
        public java.util.List<Reference> provider() {
            return getList(Reference.class, FhirPropertyNames.PROPERTY_PROVIDER);
        }

        /**
         * When the value is a group code then this item collects a set of
         * related claim details, otherwise this contains the product, service,
         * drug or other billing code for the item.
         */
        public CodeableConcept productOrService() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_PRODUCT_OR_SERVICE);
        }

        /**
         * Item typification or modifiers codes to convey additional context for
         * the product or service.
         */
        public java.util.List<CodeableConcept> modifier() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_MODIFIER);
        }

        /**
         * Identifies the program under which this may be recovered.
         */
        public java.util.List<CodeableConcept> programCode() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_PROGRAM_CODE);
        }

        /**
         * The date or dates when the service or product was supplied, performed
         * or completed.
         */
        public String servicedDate() {
            return getString(FhirPropertyNames.PROPERTY_SERVICED_DATE);
        }

        /**
         * The date or dates when the service or product was supplied, performed
         * or completed.
         */
        public Period servicedPeriod() {
            return getObject(Period.class, FhirPropertyNames.PROPERTY_SERVICED_PERIOD);
        }

        /**
         * Where the product or service was provided.
         */
        public CodeableConcept locationCodeableConcept() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_LOCATION_CODEABLE_CONCEPT);
        }

        /**
         * Where the product or service was provided.
         */
        public Address locationAddress() {
            return getObject(Address.class, FhirPropertyNames.PROPERTY_LOCATION_ADDRESS);
        }

        /**
         * Where the product or service was provided.
         */
        public Reference locationReference() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_LOCATION_REFERENCE);
        }

        /**
         * The number of repetitions of a service or product.
         */
        public Quantity quantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_QUANTITY);
        }

        /**
         * If the item is not a group then this is the fee for the product or
         * service, otherwise this is the total of the fees for the details of
         * the group.
         */
        public Money unitPrice() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_UNIT_PRICE);
        }

        /**
         * A real number that represents a multiplier used in determining the
         * overall value of services delivered and/or goods received. The concept
         * of a Factor allows for a discount or surcharge multiplier to be
         * applied to a monetary amount.
         */
        public Double factor() {
            return data.getJsonNumber(FhirPropertyNames.PROPERTY_FACTOR).doubleValue();
        }

        /**
         * The quantity times the unit price for an additional service or product
         * or charge.
         */
        public Money net() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_NET);
        }

        /**
         * Physical service site on the patient (limb, tooth, etc.).
         */
        public CodeableConcept bodySite() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_BODY_SITE);
        }

        /**
         * A region or surface of the bodySite, e.g. limb region or tooth
         * surface(s).
         */
        public java.util.List<CodeableConcept> subSite() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_SUB_SITE);
        }

        /**
         * The numbers associated with notes below which apply to the
         * adjudication of this item.
         */
        public java.util.List<Integer> noteNumber() {
            return getList(Integer.class, FhirPropertyNames.PROPERTY_NOTE_NUMBER);
        }

        /**
         * The adjudication results.
         */
        public java.util.List<ClaimResponseAdjudication> adjudication() {
            return getList(ClaimResponseAdjudication.class, FhirPropertyNames.PROPERTY_ADJUDICATION);
        }

        /**
         * The second-tier service adjudications for payor added services.
         */
        public java.util.List<ClaimResponseDetail1> detail() {
            return getList(ClaimResponseDetail1.class, FhirPropertyNames.PROPERTY_DETAIL);
        }

        public static final class Builder extends FhirObject.Builder<ClaimResponseAddItem, ClaimResponseAddItem.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder itemSequence(final java.util.List<Integer> itemSequence) {
                b.add(FhirPropertyNames.PROPERTY_ITEM_SEQUENCE, FhirObject.toIntegerArray(itemSequence));
                return this;
            }

            public Builder detailSequence(final java.util.List<Integer> detailSequence) {
                b.add(FhirPropertyNames.PROPERTY_DETAIL_SEQUENCE, FhirObject.toIntegerArray(detailSequence));
                return this;
            }

            public Builder subdetailSequence(final java.util.List<Integer> subdetailSequence) {
                b.add(FhirPropertyNames.PROPERTY_SUBDETAIL_SEQUENCE, FhirObject.toIntegerArray(subdetailSequence));
                return this;
            }

            public Builder provider(final java.util.List<Reference> provider) {
                b.add(FhirPropertyNames.PROPERTY_PROVIDER, FhirObject.toArray(provider));
                return this;
            }

            public Builder productOrService(final CodeableConcept productOrService) {
                b.add(FhirPropertyNames.PROPERTY_PRODUCT_OR_SERVICE, productOrService);
                return this;
            }

            public Builder modifier(final java.util.List<CodeableConcept> modifier) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER, FhirObject.toArray(modifier));
                return this;
            }

            public Builder programCode(final java.util.List<CodeableConcept> programCode) {
                b.add(FhirPropertyNames.PROPERTY_PROGRAM_CODE, FhirObject.toArray(programCode));
                return this;
            }

            public Builder servicedDate(final String servicedDate) {
                b.add(FhirPropertyNames.PROPERTY_SERVICED_DATE, servicedDate);
                return this;
            }

            public Builder servicedPeriod(final Period servicedPeriod) {
                b.add(FhirPropertyNames.PROPERTY_SERVICED_PERIOD, servicedPeriod);
                return this;
            }

            public Builder locationCodeableConcept(final CodeableConcept locationCodeableConcept) {
                b.add(FhirPropertyNames.PROPERTY_LOCATION_CODEABLE_CONCEPT, locationCodeableConcept);
                return this;
            }

            public Builder locationAddress(final Address locationAddress) {
                b.add(FhirPropertyNames.PROPERTY_LOCATION_ADDRESS, locationAddress);
                return this;
            }

            public Builder locationReference(final Reference locationReference) {
                b.add(FhirPropertyNames.PROPERTY_LOCATION_REFERENCE, locationReference);
                return this;
            }

            public Builder quantity(final Quantity quantity) {
                b.add(FhirPropertyNames.PROPERTY_QUANTITY, quantity);
                return this;
            }

            public Builder unitPrice(final Money unitPrice) {
                b.add(FhirPropertyNames.PROPERTY_UNIT_PRICE, unitPrice);
                return this;
            }

            public Builder factor(final Double factor) {
                b.add(FhirPropertyNames.PROPERTY_FACTOR, factor);
                return this;
            }

            public Builder net(final Money net) {
                b.add(FhirPropertyNames.PROPERTY_NET, net);
                return this;
            }

            public Builder bodySite(final CodeableConcept bodySite) {
                b.add(FhirPropertyNames.PROPERTY_BODY_SITE, bodySite);
                return this;
            }

            public Builder subSite(final java.util.List<CodeableConcept> subSite) {
                b.add(FhirPropertyNames.PROPERTY_SUB_SITE, FhirObject.toArray(subSite));
                return this;
            }

            public Builder noteNumber(final java.util.List<Integer> noteNumber) {
                b.add(FhirPropertyNames.PROPERTY_NOTE_NUMBER, FhirObject.toIntegerArray(noteNumber));
                return this;
            }

            public Builder adjudication(final java.util.List<ClaimResponseAdjudication> adjudication) {
                b.add(FhirPropertyNames.PROPERTY_ADJUDICATION, FhirObject.toArray(adjudication));
                return this;
            }

            public Builder detail(final java.util.List<ClaimResponseDetail1> detail) {
                b.add(FhirPropertyNames.PROPERTY_DETAIL, FhirObject.toArray(detail));
                return this;
            }

            public ClaimResponseAddItem build() {
                return new ClaimResponseAddItem(b.build());
            }
        }
    }

    /**
     * This resource provides the adjudication details from the processing of
     * a Claim resource.
     */
    public static class ClaimResponseAdjudication extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseAdjudication";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseAdjudication(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A code to indicate the information type of this adjudication record.
         * Information types may include the value submitted, maximum values or
         * percentages allowed or payable under the plan, amounts that: the
         * patient is responsible for in aggregate or pertaining to this item;
         * amounts paid by other coverages; and, the benefit payable for this
         * item.
         */
        public CodeableConcept category() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CATEGORY);
        }

        /**
         * A code supporting the understanding of the adjudication result and
         * explaining variance from expected amount.
         */
        public CodeableConcept reason() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_REASON);
        }

        /**
         * Monetary amount associated with the category.
         */
        public Money amount() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_AMOUNT);
        }

        /**
         * A non-monetary value associated with the category. Mutually exclusive
         * to the amount element above.
         */
        public Double value() {
            return data.getJsonNumber(FhirPropertyNames.PROPERTY_VALUE).doubleValue();
        }

        public static final class Builder extends FhirObject.Builder<ClaimResponseAdjudication, ClaimResponseAdjudication.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder category(final CodeableConcept category) {
                b.add(FhirPropertyNames.PROPERTY_CATEGORY, category);
                return this;
            }

            public Builder reason(final CodeableConcept reason) {
                b.add(FhirPropertyNames.PROPERTY_REASON, reason);
                return this;
            }

            public Builder amount(final Money amount) {
                b.add(FhirPropertyNames.PROPERTY_AMOUNT, amount);
                return this;
            }

            public Builder value(final Double value) {
                b.add(FhirPropertyNames.PROPERTY_VALUE, value);
                return this;
            }

            public ClaimResponseAdjudication build() {
                return new ClaimResponseAdjudication(b.build());
            }
        }
    }

    /**
     * This resource provides the adjudication details from the processing of
     * a Claim resource.
     */
    public static class ClaimResponseDetail extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseDetail";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseDetail(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A number to uniquely reference the claim detail entry.
         */
        public Integer detailSequence() {
            return data.getInt(FhirPropertyNames.PROPERTY_DETAIL_SEQUENCE);
        }

        /**
         * The numbers associated with notes below which apply to the
         * adjudication of this item.
         */
        public java.util.List<Integer> noteNumber() {
            return getList(Integer.class, FhirPropertyNames.PROPERTY_NOTE_NUMBER);
        }

        /**
         * The adjudication results.
         */
        public java.util.List<ClaimResponseAdjudication> adjudication() {
            return getList(ClaimResponseAdjudication.class, FhirPropertyNames.PROPERTY_ADJUDICATION);
        }

        /**
         * A sub-detail adjudication of a simple product or service.
         */
        public java.util.List<ClaimResponseSubDetail> subDetail() {
            return getList(ClaimResponseSubDetail.class, FhirPropertyNames.PROPERTY_SUB_DETAIL);
        }

        public static final class Builder extends FhirObject.Builder<ClaimResponseDetail, ClaimResponseDetail.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder detailSequence(final Integer detailSequence) {
                b.add(FhirPropertyNames.PROPERTY_DETAIL_SEQUENCE, detailSequence);
                return this;
            }

            public Builder noteNumber(final java.util.List<Integer> noteNumber) {
                b.add(FhirPropertyNames.PROPERTY_NOTE_NUMBER, FhirObject.toIntegerArray(noteNumber));
                return this;
            }

            public Builder adjudication(final java.util.List<ClaimResponseAdjudication> adjudication) {
                b.add(FhirPropertyNames.PROPERTY_ADJUDICATION, FhirObject.toArray(adjudication));
                return this;
            }

            public Builder subDetail(final java.util.List<ClaimResponseSubDetail> subDetail) {
                b.add(FhirPropertyNames.PROPERTY_SUB_DETAIL, FhirObject.toArray(subDetail));
                return this;
            }

            public ClaimResponseDetail build() {
                return new ClaimResponseDetail(b.build());
            }
        }
    }

    /**
     * This resource provides the adjudication details from the processing of
     * a Claim resource.
     */
    public static class ClaimResponseDetail1 extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseDetail1";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseDetail1(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * When the value is a group code then this item collects a set of
         * related claim details, otherwise this contains the product, service,
         * drug or other billing code for the item.
         */
        public CodeableConcept productOrService() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_PRODUCT_OR_SERVICE);
        }

        /**
         * Item typification or modifiers codes to convey additional context for
         * the product or service.
         */
        public java.util.List<CodeableConcept> modifier() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_MODIFIER);
        }

        /**
         * The number of repetitions of a service or product.
         */
        public Quantity quantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_QUANTITY);
        }

        /**
         * If the item is not a group then this is the fee for the product or
         * service, otherwise this is the total of the fees for the details of
         * the group.
         */
        public Money unitPrice() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_UNIT_PRICE);
        }

        /**
         * A real number that represents a multiplier used in determining the
         * overall value of services delivered and/or goods received. The concept
         * of a Factor allows for a discount or surcharge multiplier to be
         * applied to a monetary amount.
         */
        public Double factor() {
            return data.getJsonNumber(FhirPropertyNames.PROPERTY_FACTOR).doubleValue();
        }

        /**
         * The quantity times the unit price for an additional service or product
         * or charge.
         */
        public Money net() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_NET);
        }

        /**
         * The numbers associated with notes below which apply to the
         * adjudication of this item.
         */
        public java.util.List<Integer> noteNumber() {
            return getList(Integer.class, FhirPropertyNames.PROPERTY_NOTE_NUMBER);
        }

        /**
         * The adjudication results.
         */
        public java.util.List<ClaimResponseAdjudication> adjudication() {
            return getList(ClaimResponseAdjudication.class, FhirPropertyNames.PROPERTY_ADJUDICATION);
        }

        /**
         * The third-tier service adjudications for payor added services.
         */
        public java.util.List<ClaimResponseSubDetail1> subDetail() {
            return getList(ClaimResponseSubDetail1.class, FhirPropertyNames.PROPERTY_SUB_DETAIL);
        }

        public static final class Builder extends FhirObject.Builder<ClaimResponseDetail1, ClaimResponseDetail1.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder productOrService(final CodeableConcept productOrService) {
                b.add(FhirPropertyNames.PROPERTY_PRODUCT_OR_SERVICE, productOrService);
                return this;
            }

            public Builder modifier(final java.util.List<CodeableConcept> modifier) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER, FhirObject.toArray(modifier));
                return this;
            }

            public Builder quantity(final Quantity quantity) {
                b.add(FhirPropertyNames.PROPERTY_QUANTITY, quantity);
                return this;
            }

            public Builder unitPrice(final Money unitPrice) {
                b.add(FhirPropertyNames.PROPERTY_UNIT_PRICE, unitPrice);
                return this;
            }

            public Builder factor(final Double factor) {
                b.add(FhirPropertyNames.PROPERTY_FACTOR, factor);
                return this;
            }

            public Builder net(final Money net) {
                b.add(FhirPropertyNames.PROPERTY_NET, net);
                return this;
            }

            public Builder noteNumber(final java.util.List<Integer> noteNumber) {
                b.add(FhirPropertyNames.PROPERTY_NOTE_NUMBER, FhirObject.toIntegerArray(noteNumber));
                return this;
            }

            public Builder adjudication(final java.util.List<ClaimResponseAdjudication> adjudication) {
                b.add(FhirPropertyNames.PROPERTY_ADJUDICATION, FhirObject.toArray(adjudication));
                return this;
            }

            public Builder subDetail(final java.util.List<ClaimResponseSubDetail1> subDetail) {
                b.add(FhirPropertyNames.PROPERTY_SUB_DETAIL, FhirObject.toArray(subDetail));
                return this;
            }

            public ClaimResponseDetail1 build() {
                return new ClaimResponseDetail1(b.build());
            }
        }
    }

    /**
     * This resource provides the adjudication details from the processing of
     * a Claim resource.
     */
    public static class ClaimResponseError extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseError";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseError(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The sequence number of the line item submitted which contains the
         * error. This value is omitted when the error occurs outside of the item
         * structure.
         */
        public Integer itemSequence() {
            return data.getInt(FhirPropertyNames.PROPERTY_ITEM_SEQUENCE);
        }

        /**
         * The sequence number of the detail within the line item submitted which
         * contains the error. This value is omitted when the error occurs
         * outside of the item structure.
         */
        public Integer detailSequence() {
            return data.getInt(FhirPropertyNames.PROPERTY_DETAIL_SEQUENCE);
        }

        /**
         * The sequence number of the sub-detail within the detail within the
         * line item submitted which contains the error. This value is omitted
         * when the error occurs outside of the item structure.
         */
        public Integer subDetailSequence() {
            return data.getInt(FhirPropertyNames.PROPERTY_SUB_DETAIL_SEQUENCE);
        }

        /**
         * An error code, from a specified code system, which details why the
         * claim could not be adjudicated.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        public static final class Builder extends FhirObject.Builder<ClaimResponseError, ClaimResponseError.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder itemSequence(final Integer itemSequence) {
                b.add(FhirPropertyNames.PROPERTY_ITEM_SEQUENCE, itemSequence);
                return this;
            }

            public Builder detailSequence(final Integer detailSequence) {
                b.add(FhirPropertyNames.PROPERTY_DETAIL_SEQUENCE, detailSequence);
                return this;
            }

            public Builder subDetailSequence(final Integer subDetailSequence) {
                b.add(FhirPropertyNames.PROPERTY_SUB_DETAIL_SEQUENCE, subDetailSequence);
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public ClaimResponseError build() {
                return new ClaimResponseError(b.build());
            }
        }
    }

    /**
     * This resource provides the adjudication details from the processing of
     * a Claim resource.
     */
    public static class ClaimResponseInsurance extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseInsurance";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseInsurance(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A number to uniquely identify insurance entries and provide a sequence
         * of coverages to convey coordination of benefit order.
         */
        public Integer sequence() {
            return data.getInt(FhirPropertyNames.PROPERTY_SEQUENCE);
        }

        /**
         * A flag to indicate that this Coverage is to be used for adjudication
         * of this claim when set to true.
         */
        public Boolean focal() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_FOCAL);
        }

        /**
         * Reference to the insurance card level information contained in the
         * Coverage resource. The coverage issuing insurer will use these details
         * to locate the patient's actual coverage within the insurer's
         * information system.
         */
        public Reference coverage() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_COVERAGE);
        }

        /**
         * A business agreement number established between the provider and the
         * insurer for special business processing purposes.
         */
        public String businessArrangement() {
            return getString(FhirPropertyNames.PROPERTY_BUSINESS_ARRANGEMENT);
        }

        /**
         * The result of the adjudication of the line items for the Coverage
         * specified in this insurance.
         */
        public Reference claimResponse() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_CLAIM_RESPONSE);
        }

        public static final class Builder extends FhirObject.Builder<ClaimResponseInsurance, ClaimResponseInsurance.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder sequence(final Integer sequence) {
                b.add(FhirPropertyNames.PROPERTY_SEQUENCE, sequence);
                return this;
            }

            public Builder focal(final Boolean focal) {
                b.add(FhirPropertyNames.PROPERTY_FOCAL, focal);
                return this;
            }

            public Builder coverage(final Reference coverage) {
                b.add(FhirPropertyNames.PROPERTY_COVERAGE, coverage);
                return this;
            }

            public Builder businessArrangement(final String businessArrangement) {
                b.add(FhirPropertyNames.PROPERTY_BUSINESS_ARRANGEMENT, businessArrangement);
                return this;
            }

            public Builder claimResponse(final Reference claimResponse) {
                b.add(FhirPropertyNames.PROPERTY_CLAIM_RESPONSE, claimResponse);
                return this;
            }

            public ClaimResponseInsurance build() {
                return new ClaimResponseInsurance(b.build());
            }
        }
    }

    /**
     * This resource provides the adjudication details from the processing of
     * a Claim resource.
     */
    public static class ClaimResponseItem extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseItem";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseItem(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A number to uniquely reference the claim item entries.
         */
        public Integer itemSequence() {
            return data.getInt(FhirPropertyNames.PROPERTY_ITEM_SEQUENCE);
        }

        /**
         * The numbers associated with notes below which apply to the
         * adjudication of this item.
         */
        public java.util.List<Integer> noteNumber() {
            return getList(Integer.class, FhirPropertyNames.PROPERTY_NOTE_NUMBER);
        }

        /**
         * If this item is a group then the values here are a summary of the
         * adjudication of the detail items. If this item is a simple product or
         * service then this is the result of the adjudication of this item.
         */
        public java.util.List<ClaimResponseAdjudication> adjudication() {
            return getList(ClaimResponseAdjudication.class, FhirPropertyNames.PROPERTY_ADJUDICATION);
        }

        /**
         * A claim detail. Either a simple (a product or service) or a 'group' of
         * sub-details which are simple items.
         */
        public java.util.List<ClaimResponseDetail> detail() {
            return getList(ClaimResponseDetail.class, FhirPropertyNames.PROPERTY_DETAIL);
        }

        public static final class Builder extends FhirObject.Builder<ClaimResponseItem, ClaimResponseItem.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder itemSequence(final Integer itemSequence) {
                b.add(FhirPropertyNames.PROPERTY_ITEM_SEQUENCE, itemSequence);
                return this;
            }

            public Builder noteNumber(final java.util.List<Integer> noteNumber) {
                b.add(FhirPropertyNames.PROPERTY_NOTE_NUMBER, FhirObject.toIntegerArray(noteNumber));
                return this;
            }

            public Builder adjudication(final java.util.List<ClaimResponseAdjudication> adjudication) {
                b.add(FhirPropertyNames.PROPERTY_ADJUDICATION, FhirObject.toArray(adjudication));
                return this;
            }

            public Builder detail(final java.util.List<ClaimResponseDetail> detail) {
                b.add(FhirPropertyNames.PROPERTY_DETAIL, FhirObject.toArray(detail));
                return this;
            }

            public ClaimResponseItem build() {
                return new ClaimResponseItem(b.build());
            }
        }
    }

    /**
     * This resource provides the adjudication details from the processing of
     * a Claim resource.
     */
    public static class ClaimResponsePayment extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponsePayment";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponsePayment(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Whether this represents partial or complete payment of the benefits
         * payable.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Total amount of all adjustments to this payment included in this
         * transaction which are not related to this claim's adjudication.
         */
        public Money adjustment() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_ADJUSTMENT);
        }

        /**
         * Reason for the payment adjustment.
         */
        public CodeableConcept adjustmentReason() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_ADJUSTMENT_REASON);
        }

        /**
         * Estimated date the payment will be issued or the actual issue date of
         * payment.
         */
        public java.time.LocalDate date() {
            return getLocalDate(FhirPropertyNames.PROPERTY_DATE);
        }

        /**
         * Benefits payable less any payment adjustment.
         */
        public Money amount() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_AMOUNT);
        }

        /**
         * Issuer's unique identifier for the payment instrument.
         */
        public Identifier identifier() {
            return getObject(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
        }

        public static final class Builder extends FhirObject.Builder<ClaimResponsePayment, ClaimResponsePayment.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder adjustment(final Money adjustment) {
                b.add(FhirPropertyNames.PROPERTY_ADJUSTMENT, adjustment);
                return this;
            }

            public Builder adjustmentReason(final CodeableConcept adjustmentReason) {
                b.add(FhirPropertyNames.PROPERTY_ADJUSTMENT_REASON, adjustmentReason);
                return this;
            }

            public Builder date(final java.time.LocalDate date) {
                b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
                return this;
            }

            public Builder amount(final Money amount) {
                b.add(FhirPropertyNames.PROPERTY_AMOUNT, amount);
                return this;
            }

            public Builder identifier(final Identifier identifier) {
                b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, identifier);
                return this;
            }

            public ClaimResponsePayment build() {
                return new ClaimResponsePayment(b.build());
            }
        }
    }

    /**
     * This resource provides the adjudication details from the processing of
     * a Claim resource.
     */
    public static class ClaimResponseProcessNote extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseProcessNote";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseProcessNote(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A number to uniquely identify a note entry.
         */
        public Integer number() {
            return data.getInt(FhirPropertyNames.PROPERTY_NUMBER);
        }

        /**
         * The business purpose of the note text.
         */
        public String type() {
            return getString(FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The explanation or description associated with the processing.
         */
        public String text() {
            return getString(FhirPropertyNames.PROPERTY_TEXT);
        }

        /**
         * A code to define the language used in the text of the note.
         */
        public CodeableConcept language() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_LANGUAGE);
        }

        public static final class Builder extends FhirObject.Builder<ClaimResponseProcessNote, ClaimResponseProcessNote.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder number(final Integer number) {
                b.add(FhirPropertyNames.PROPERTY_NUMBER, number);
                return this;
            }

            public Builder type(final String type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder text(final String text) {
                b.add(FhirPropertyNames.PROPERTY_TEXT, text);
                return this;
            }

            public Builder language(final CodeableConcept language) {
                b.add(FhirPropertyNames.PROPERTY_LANGUAGE, language);
                return this;
            }

            public ClaimResponseProcessNote build() {
                return new ClaimResponseProcessNote(b.build());
            }
        }
    }

    /**
     * This resource provides the adjudication details from the processing of
     * a Claim resource.
     */
    public static class ClaimResponseSubDetail extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseSubDetail";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseSubDetail(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A number to uniquely reference the claim sub-detail entry.
         */
        public Integer subDetailSequence() {
            return data.getInt(FhirPropertyNames.PROPERTY_SUB_DETAIL_SEQUENCE);
        }

        /**
         * The numbers associated with notes below which apply to the
         * adjudication of this item.
         */
        public java.util.List<Integer> noteNumber() {
            return getList(Integer.class, FhirPropertyNames.PROPERTY_NOTE_NUMBER);
        }

        /**
         * The adjudication results.
         */
        public java.util.List<ClaimResponseAdjudication> adjudication() {
            return getList(ClaimResponseAdjudication.class, FhirPropertyNames.PROPERTY_ADJUDICATION);
        }

        public static final class Builder extends FhirObject.Builder<ClaimResponseSubDetail, ClaimResponseSubDetail.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder subDetailSequence(final Integer subDetailSequence) {
                b.add(FhirPropertyNames.PROPERTY_SUB_DETAIL_SEQUENCE, subDetailSequence);
                return this;
            }

            public Builder noteNumber(final java.util.List<Integer> noteNumber) {
                b.add(FhirPropertyNames.PROPERTY_NOTE_NUMBER, FhirObject.toIntegerArray(noteNumber));
                return this;
            }

            public Builder adjudication(final java.util.List<ClaimResponseAdjudication> adjudication) {
                b.add(FhirPropertyNames.PROPERTY_ADJUDICATION, FhirObject.toArray(adjudication));
                return this;
            }

            public ClaimResponseSubDetail build() {
                return new ClaimResponseSubDetail(b.build());
            }
        }
    }

    /**
     * This resource provides the adjudication details from the processing of
     * a Claim resource.
     */
    public static class ClaimResponseSubDetail1 extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseSubDetail1";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseSubDetail1(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * When the value is a group code then this item collects a set of
         * related claim details, otherwise this contains the product, service,
         * drug or other billing code for the item.
         */
        public CodeableConcept productOrService() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_PRODUCT_OR_SERVICE);
        }

        /**
         * Item typification or modifiers codes to convey additional context for
         * the product or service.
         */
        public java.util.List<CodeableConcept> modifier() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_MODIFIER);
        }

        /**
         * The number of repetitions of a service or product.
         */
        public Quantity quantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_QUANTITY);
        }

        /**
         * If the item is not a group then this is the fee for the product or
         * service, otherwise this is the total of the fees for the details of
         * the group.
         */
        public Money unitPrice() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_UNIT_PRICE);
        }

        /**
         * A real number that represents a multiplier used in determining the
         * overall value of services delivered and/or goods received. The concept
         * of a Factor allows for a discount or surcharge multiplier to be
         * applied to a monetary amount.
         */
        public Double factor() {
            return data.getJsonNumber(FhirPropertyNames.PROPERTY_FACTOR).doubleValue();
        }

        /**
         * The quantity times the unit price for an additional service or product
         * or charge.
         */
        public Money net() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_NET);
        }

        /**
         * The numbers associated with notes below which apply to the
         * adjudication of this item.
         */
        public java.util.List<Integer> noteNumber() {
            return getList(Integer.class, FhirPropertyNames.PROPERTY_NOTE_NUMBER);
        }

        /**
         * The adjudication results.
         */
        public java.util.List<ClaimResponseAdjudication> adjudication() {
            return getList(ClaimResponseAdjudication.class, FhirPropertyNames.PROPERTY_ADJUDICATION);
        }

        public static final class Builder extends FhirObject.Builder<ClaimResponseSubDetail1, ClaimResponseSubDetail1.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder productOrService(final CodeableConcept productOrService) {
                b.add(FhirPropertyNames.PROPERTY_PRODUCT_OR_SERVICE, productOrService);
                return this;
            }

            public Builder modifier(final java.util.List<CodeableConcept> modifier) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER, FhirObject.toArray(modifier));
                return this;
            }

            public Builder quantity(final Quantity quantity) {
                b.add(FhirPropertyNames.PROPERTY_QUANTITY, quantity);
                return this;
            }

            public Builder unitPrice(final Money unitPrice) {
                b.add(FhirPropertyNames.PROPERTY_UNIT_PRICE, unitPrice);
                return this;
            }

            public Builder factor(final Double factor) {
                b.add(FhirPropertyNames.PROPERTY_FACTOR, factor);
                return this;
            }

            public Builder net(final Money net) {
                b.add(FhirPropertyNames.PROPERTY_NET, net);
                return this;
            }

            public Builder noteNumber(final java.util.List<Integer> noteNumber) {
                b.add(FhirPropertyNames.PROPERTY_NOTE_NUMBER, FhirObject.toIntegerArray(noteNumber));
                return this;
            }

            public Builder adjudication(final java.util.List<ClaimResponseAdjudication> adjudication) {
                b.add(FhirPropertyNames.PROPERTY_ADJUDICATION, FhirObject.toArray(adjudication));
                return this;
            }

            public ClaimResponseSubDetail1 build() {
                return new ClaimResponseSubDetail1(b.build());
            }
        }
    }

    /**
     * This resource provides the adjudication details from the processing of
     * a Claim resource.
     */
    public static class ClaimResponseTotal extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseTotal";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseTotal(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A code to indicate the information type of this adjudication record.
         * Information types may include: the value submitted, maximum values or
         * percentages allowed or payable under the plan, amounts that the
         * patient is responsible for in aggregate or pertaining to this item,
         * amounts paid by other coverages, and the benefit payable for this
         * item.
         */
        public CodeableConcept category() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CATEGORY);
        }

        /**
         * Monetary total amount associated with the category.
         */
        public Money amount() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_AMOUNT);
        }

        public static final class Builder extends FhirObject.Builder<ClaimResponseTotal, ClaimResponseTotal.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder category(final CodeableConcept category) {
                b.add(FhirPropertyNames.PROPERTY_CATEGORY, category);
                return this;
            }

            public Builder amount(final Money amount) {
                b.add(FhirPropertyNames.PROPERTY_AMOUNT, amount);
                return this;
            }

            public ClaimResponseTotal build() {
                return new ClaimResponseTotal(b.build());
            }
        }
    }
}
