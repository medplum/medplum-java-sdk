/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A reply to an appointment request for a patient and/or
 * practitioner(s), such as a confirmation or rejection.
 */
public class AppointmentResponse extends DomainResource {
    public static final String RESOURCE_TYPE = "AppointmentResponse";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public AppointmentResponse(final JsonObject data) {
        super(data);
    }

    /**
     * This records identifiers associated with this appointment response
     * concern that are defined by business processes and/ or used to refer
     * to it when a direct URL reference to the resource itself is not
     * appropriate.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * Appointment that this response is replying to.
     */
    public Reference appointment() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_APPOINTMENT);
    }

    /**
     * Date/Time that the appointment is to take place, or requested new
     * start time.
     */
    public java.time.Instant start() {
        return getInstant(FhirPropertyNames.PROPERTY_START);
    }

    /**
     * This may be either the same as the appointment request to confirm the
     * details of the appointment, or alternately a new time to request a
     * re-negotiation of the end time.
     */
    public java.time.Instant end() {
        return getInstant(FhirPropertyNames.PROPERTY_END);
    }

    /**
     * Role of participant in the appointment.
     */
    public java.util.List<CodeableConcept> participantType() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_PARTICIPANT_TYPE);
    }

    /**
     * A Person, Location, HealthcareService, or Device that is participating
     * in the appointment.
     */
    public Reference actor() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ACTOR);
    }

    /**
     * Participation status of the participant. When the status is declined
     * or tentative if the start/end times are different to the appointment,
     * then these times should be interpreted as a requested time change.
     * When the status is accepted, the times can either be the time of the
     * appointment (as a confirmation of the time) or can be empty.
     */
    public String participantStatus() {
        return getString(FhirPropertyNames.PROPERTY_PARTICIPANT_STATUS);
    }

    /**
     * Additional comments about the appointment.
     */
    public String comment() {
        return getString(FhirPropertyNames.PROPERTY_COMMENT);
    }

    public static final class Builder extends DomainResource.Builder<AppointmentResponse, AppointmentResponse.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder appointment(final Reference appointment) {
            b.add(FhirPropertyNames.PROPERTY_APPOINTMENT, appointment);
            return this;
        }

        public Builder start(final java.time.Instant start) {
            b.add(FhirPropertyNames.PROPERTY_START, start.toString());
            return this;
        }

        public Builder end(final java.time.Instant end) {
            b.add(FhirPropertyNames.PROPERTY_END, end.toString());
            return this;
        }

        public Builder participantType(final java.util.List<CodeableConcept> participantType) {
            b.add(FhirPropertyNames.PROPERTY_PARTICIPANT_TYPE, FhirObject.toArray(participantType));
            return this;
        }

        public Builder actor(final Reference actor) {
            b.add(FhirPropertyNames.PROPERTY_ACTOR, actor);
            return this;
        }

        public Builder participantStatus(final String participantStatus) {
            b.add(FhirPropertyNames.PROPERTY_PARTICIPANT_STATUS, participantStatus);
            return this;
        }

        public Builder comment(final String comment) {
            b.add(FhirPropertyNames.PROPERTY_COMMENT, comment);
            return this;
        }

        public AppointmentResponse build() {
            return new AppointmentResponse(b.build());
        }
    }
}
