/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Represents a request for a patient to employ a medical device. The
 * device may be an implantable device, or an external assistive device,
 * such as a walker.
 */
public class DeviceRequest extends DomainResource {
    public static final String RESOURCE_TYPE = "DeviceRequest";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public DeviceRequest(final JsonObject data) {
        super(data);
    }

    /**
     * Identifiers assigned to this order by the orderer or by the receiver.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or
     * other definition that is adhered to in whole or in part by this
     * DeviceRequest.
     */
    public java.util.List<String> instantiatesCanonical() {
        return getList(String.class, FhirPropertyNames.PROPERTY_INSTANTIATES_CANONICAL);
    }

    /**
     * The URL pointing to an externally maintained protocol, guideline,
     * orderset or other definition that is adhered to in whole or in part by
     * this DeviceRequest.
     */
    public java.util.List<java.net.URI> instantiatesUri() {
        return getList(java.net.URI.class, FhirPropertyNames.PROPERTY_INSTANTIATES_URI);
    }

    /**
     * Plan/proposal/order fulfilled by this request.
     */
    public java.util.List<Reference> basedOn() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_BASED_ON);
    }

    /**
     * The request takes the place of the referenced completed or terminated
     * request(s).
     */
    public java.util.List<Reference> priorRequest() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_PRIOR_REQUEST);
    }

    /**
     * Composite request this is part of.
     */
    public Identifier groupIdentifier() {
        return getObject(Identifier.class, FhirPropertyNames.PROPERTY_GROUP_IDENTIFIER);
    }

    /**
     * The status of the request.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * Whether the request is a proposal, plan, an original order or a reflex
     * order.
     */
    public String intent() {
        return getString(FhirPropertyNames.PROPERTY_INTENT);
    }

    /**
     * Indicates how quickly the {{title}} should be addressed with respect
     * to other requests.
     */
    public String priority() {
        return getString(FhirPropertyNames.PROPERTY_PRIORITY);
    }

    /**
     * The details of the device to be used.
     */
    public Reference codeReference() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_CODE_REFERENCE);
    }

    /**
     * The details of the device to be used.
     */
    public CodeableConcept codeCodeableConcept() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE_CODEABLE_CONCEPT);
    }

    /**
     * Specific parameters for the ordered item.  For example, the prism
     * value for lenses.
     */
    public java.util.List<DeviceRequestParameter> parameter() {
        return getList(DeviceRequestParameter.class, FhirPropertyNames.PROPERTY_PARAMETER);
    }

    /**
     * The patient who will use the device.
     */
    public Reference subject() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * An encounter that provides additional context in which this request is
     * made.
     */
    public Reference encounter() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ENCOUNTER);
    }

    /**
     * The timing schedule for the use of the device. The Schedule data type
     * allows many different expressions, for example. &quot;Every 8 hours&quot;;
     * &quot;Three times a day&quot;; &quot;1/2 an hour before breakfast for 10 days from
     * 23-Dec 2011:&quot;; &quot;15 Oct 2013, 17 Oct 2013 and 1 Nov 2013&quot;.
     */
    public String occurrenceDateTime() {
        return getString(FhirPropertyNames.PROPERTY_OCCURRENCE_DATE_TIME);
    }

    /**
     * The timing schedule for the use of the device. The Schedule data type
     * allows many different expressions, for example. &quot;Every 8 hours&quot;;
     * &quot;Three times a day&quot;; &quot;1/2 an hour before breakfast for 10 days from
     * 23-Dec 2011:&quot;; &quot;15 Oct 2013, 17 Oct 2013 and 1 Nov 2013&quot;.
     */
    public Period occurrencePeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_OCCURRENCE_PERIOD);
    }

    /**
     * The timing schedule for the use of the device. The Schedule data type
     * allows many different expressions, for example. &quot;Every 8 hours&quot;;
     * &quot;Three times a day&quot;; &quot;1/2 an hour before breakfast for 10 days from
     * 23-Dec 2011:&quot;; &quot;15 Oct 2013, 17 Oct 2013 and 1 Nov 2013&quot;.
     */
    public Timing occurrenceTiming() {
        return getObject(Timing.class, FhirPropertyNames.PROPERTY_OCCURRENCE_TIMING);
    }

    /**
     * When the request transitioned to being actionable.
     */
    public java.time.Instant authoredOn() {
        return getInstant(FhirPropertyNames.PROPERTY_AUTHORED_ON);
    }

    /**
     * The individual who initiated the request and has responsibility for
     * its activation.
     */
    public Reference requester() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_REQUESTER);
    }

    /**
     * Desired type of performer for doing the diagnostic testing.
     */
    public CodeableConcept performerType() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_PERFORMER_TYPE);
    }

    /**
     * The desired performer for doing the diagnostic testing.
     */
    public Reference performer() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PERFORMER);
    }

    /**
     * Reason or justification for the use of this device.
     */
    public java.util.List<CodeableConcept> reasonCode() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_REASON_CODE);
    }

    /**
     * Reason or justification for the use of this device.
     */
    public java.util.List<Reference> reasonReference() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_REASON_REFERENCE);
    }

    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or
     * pre-determinations that may be required for delivering the requested
     * service.
     */
    public java.util.List<Reference> insurance() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_INSURANCE);
    }

    /**
     * Additional clinical information about the patient that may influence
     * the request fulfilment.  For example, this may include where on the
     * subject's body the device will be used (i.e. the target site).
     */
    public java.util.List<Reference> supportingInfo() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_SUPPORTING_INFO);
    }

    /**
     * Details about this request that were not represented at all or
     * sufficiently in one of the attributes provided in a class. These may
     * include for example a comment, an instruction, or a note associated
     * with the statement.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    /**
     * Key events in the history of the request.
     */
    public java.util.List<Reference> relevantHistory() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_RELEVANT_HISTORY);
    }

    public static final class Builder extends DomainResource.Builder<DeviceRequest, DeviceRequest.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder instantiatesCanonical(final java.util.List<String> instantiatesCanonical) {
            b.add(FhirPropertyNames.PROPERTY_INSTANTIATES_CANONICAL, FhirObject.toStringArray(instantiatesCanonical));
            return this;
        }

        public Builder instantiatesUri(final java.util.List<java.net.URI> instantiatesUri) {
            b.add(FhirPropertyNames.PROPERTY_INSTANTIATES_URI, FhirObject.toUriArray(instantiatesUri));
            return this;
        }

        public Builder basedOn(final java.util.List<Reference> basedOn) {
            b.add(FhirPropertyNames.PROPERTY_BASED_ON, FhirObject.toArray(basedOn));
            return this;
        }

        public Builder priorRequest(final java.util.List<Reference> priorRequest) {
            b.add(FhirPropertyNames.PROPERTY_PRIOR_REQUEST, FhirObject.toArray(priorRequest));
            return this;
        }

        public Builder groupIdentifier(final Identifier groupIdentifier) {
            b.add(FhirPropertyNames.PROPERTY_GROUP_IDENTIFIER, groupIdentifier);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder intent(final String intent) {
            b.add(FhirPropertyNames.PROPERTY_INTENT, intent);
            return this;
        }

        public Builder priority(final String priority) {
            b.add(FhirPropertyNames.PROPERTY_PRIORITY, priority);
            return this;
        }

        public Builder codeReference(final Reference codeReference) {
            b.add(FhirPropertyNames.PROPERTY_CODE_REFERENCE, codeReference);
            return this;
        }

        public Builder codeCodeableConcept(final CodeableConcept codeCodeableConcept) {
            b.add(FhirPropertyNames.PROPERTY_CODE_CODEABLE_CONCEPT, codeCodeableConcept);
            return this;
        }

        public Builder parameter(final java.util.List<DeviceRequestParameter> parameter) {
            b.add(FhirPropertyNames.PROPERTY_PARAMETER, FhirObject.toArray(parameter));
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(FhirPropertyNames.PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder occurrenceDateTime(final String occurrenceDateTime) {
            b.add(FhirPropertyNames.PROPERTY_OCCURRENCE_DATE_TIME, occurrenceDateTime);
            return this;
        }

        public Builder occurrencePeriod(final Period occurrencePeriod) {
            b.add(FhirPropertyNames.PROPERTY_OCCURRENCE_PERIOD, occurrencePeriod);
            return this;
        }

        public Builder occurrenceTiming(final Timing occurrenceTiming) {
            b.add(FhirPropertyNames.PROPERTY_OCCURRENCE_TIMING, occurrenceTiming);
            return this;
        }

        public Builder authoredOn(final java.time.Instant authoredOn) {
            b.add(FhirPropertyNames.PROPERTY_AUTHORED_ON, authoredOn.toString());
            return this;
        }

        public Builder requester(final Reference requester) {
            b.add(FhirPropertyNames.PROPERTY_REQUESTER, requester);
            return this;
        }

        public Builder performerType(final CodeableConcept performerType) {
            b.add(FhirPropertyNames.PROPERTY_PERFORMER_TYPE, performerType);
            return this;
        }

        public Builder performer(final Reference performer) {
            b.add(FhirPropertyNames.PROPERTY_PERFORMER, performer);
            return this;
        }

        public Builder reasonCode(final java.util.List<CodeableConcept> reasonCode) {
            b.add(FhirPropertyNames.PROPERTY_REASON_CODE, FhirObject.toArray(reasonCode));
            return this;
        }

        public Builder reasonReference(final java.util.List<Reference> reasonReference) {
            b.add(FhirPropertyNames.PROPERTY_REASON_REFERENCE, FhirObject.toArray(reasonReference));
            return this;
        }

        public Builder insurance(final java.util.List<Reference> insurance) {
            b.add(FhirPropertyNames.PROPERTY_INSURANCE, FhirObject.toArray(insurance));
            return this;
        }

        public Builder supportingInfo(final java.util.List<Reference> supportingInfo) {
            b.add(FhirPropertyNames.PROPERTY_SUPPORTING_INFO, FhirObject.toArray(supportingInfo));
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder relevantHistory(final java.util.List<Reference> relevantHistory) {
            b.add(FhirPropertyNames.PROPERTY_RELEVANT_HISTORY, FhirObject.toArray(relevantHistory));
            return this;
        }

        public DeviceRequest build() {
            return new DeviceRequest(b.build());
        }
    }

    /**
     * Represents a request for a patient to employ a medical device. The
     * device may be an implantable device, or an external assistive device,
     * such as a walker.
     */
    public static class DeviceRequestParameter extends FhirObject {
        public static final String RESOURCE_TYPE = "DeviceRequestParameter";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public DeviceRequestParameter(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A code or string that identifies the device detail being asserted.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * The value of the device detail.
         */
        public CodeableConcept valueCodeableConcept() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_VALUE_CODEABLE_CONCEPT);
        }

        /**
         * The value of the device detail.
         */
        public Quantity valueQuantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_VALUE_QUANTITY);
        }

        /**
         * The value of the device detail.
         */
        public Range valueRange() {
            return getObject(Range.class, FhirPropertyNames.PROPERTY_VALUE_RANGE);
        }

        /**
         * The value of the device detail.
         */
        public Boolean valueBoolean() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_VALUE_BOOLEAN);
        }

        public static final class Builder extends FhirObject.Builder<DeviceRequestParameter, DeviceRequestParameter.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder valueCodeableConcept(final CodeableConcept valueCodeableConcept) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CODEABLE_CONCEPT, valueCodeableConcept);
                return this;
            }

            public Builder valueQuantity(final Quantity valueQuantity) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_QUANTITY, valueQuantity);
                return this;
            }

            public Builder valueRange(final Range valueRange) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_RANGE, valueRange);
                return this;
            }

            public Builder valueBoolean(final Boolean valueBoolean) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_BOOLEAN, valueBoolean);
                return this;
            }

            public DeviceRequestParameter build() {
                return new DeviceRequestParameter(b.build());
            }
        }
    }
}
