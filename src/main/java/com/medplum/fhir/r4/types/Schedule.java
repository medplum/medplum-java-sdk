/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A container for slots of time that may be available for booking
 * appointments.
 */
public class Schedule extends DomainResource {
    public static final String RESOURCE_TYPE = "Schedule";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Schedule(final JsonObject data) {
        super(data);
    }

    /**
     * External Ids for this item.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * Whether this schedule record is in active use or should not be used
     * (such as was entered in error).
     */
    public Boolean active() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_ACTIVE);
    }

    /**
     * A broad categorization of the service that is to be performed during
     * this appointment.
     */
    public java.util.List<CodeableConcept> serviceCategory() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_SERVICE_CATEGORY);
    }

    /**
     * The specific service that is to be performed during this appointment.
     */
    public java.util.List<CodeableConcept> serviceType() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_SERVICE_TYPE);
    }

    /**
     * The specialty of a practitioner that would be required to perform the
     * service requested in this appointment.
     */
    public java.util.List<CodeableConcept> specialty() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_SPECIALTY);
    }

    /**
     * Slots that reference this schedule resource provide the availability
     * details to these referenced resource(s).
     */
    public java.util.List<Reference> actor() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_ACTOR);
    }

    /**
     * The period of time that the slots that reference this Schedule
     * resource cover (even if none exist). These  cover the amount of time
     * that an organization's planning horizon; the interval for which they
     * are currently accepting appointments. This does not define a
     * &quot;template&quot; for planning outside these dates.
     */
    public Period planningHorizon() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_PLANNING_HORIZON);
    }

    /**
     * Comments on the availability to describe any extended information.
     * Such as custom constraints on the slots that may be associated.
     */
    public String comment() {
        return getString(FhirPropertyNames.PROPERTY_COMMENT);
    }

    public static final class Builder extends DomainResource.Builder<Schedule, Schedule.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder active(final Boolean active) {
            b.add(FhirPropertyNames.PROPERTY_ACTIVE, active);
            return this;
        }

        public Builder serviceCategory(final java.util.List<CodeableConcept> serviceCategory) {
            b.add(FhirPropertyNames.PROPERTY_SERVICE_CATEGORY, FhirObject.toArray(serviceCategory));
            return this;
        }

        public Builder serviceType(final java.util.List<CodeableConcept> serviceType) {
            b.add(FhirPropertyNames.PROPERTY_SERVICE_TYPE, FhirObject.toArray(serviceType));
            return this;
        }

        public Builder specialty(final java.util.List<CodeableConcept> specialty) {
            b.add(FhirPropertyNames.PROPERTY_SPECIALTY, FhirObject.toArray(specialty));
            return this;
        }

        public Builder actor(final java.util.List<Reference> actor) {
            b.add(FhirPropertyNames.PROPERTY_ACTOR, FhirObject.toArray(actor));
            return this;
        }

        public Builder planningHorizon(final Period planningHorizon) {
            b.add(FhirPropertyNames.PROPERTY_PLANNING_HORIZON, planningHorizon);
            return this;
        }

        public Builder comment(final String comment) {
            b.add(FhirPropertyNames.PROPERTY_COMMENT, comment);
            return this;
        }

        public Schedule build() {
            return new Schedule(b.build());
        }
    }
}
