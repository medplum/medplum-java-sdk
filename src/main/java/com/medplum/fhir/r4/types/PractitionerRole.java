/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A specific set of Roles/Locations/specialties/services that a
 * practitioner may perform at an organization for a period of time.
 */
public class PractitionerRole extends DomainResource {
    public static final String RESOURCE_TYPE = "PractitionerRole";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public PractitionerRole(final JsonObject data) {
        super(data);
    }

    /**
     * Business Identifiers that are specific to a role/location.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * Whether this practitioner role record is in active use.
     */
    public Boolean active() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_ACTIVE);
    }

    /**
     * The period during which the person is authorized to act as a
     * practitioner in these role(s) for the organization.
     */
    public Period period() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_PERIOD);
    }

    /**
     * Practitioner that is able to provide the defined services for the
     * organization.
     */
    public Reference practitioner() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PRACTITIONER);
    }

    /**
     * The organization where the Practitioner performs the roles associated.
     */
    public Reference organization() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ORGANIZATION);
    }

    /**
     * Roles which this practitioner is authorized to perform for the
     * organization.
     */
    public java.util.List<CodeableConcept> code() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
    }

    /**
     * Specific specialty of the practitioner.
     */
    public java.util.List<CodeableConcept> specialty() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_SPECIALTY);
    }

    /**
     * The location(s) at which this practitioner provides care.
     */
    public java.util.List<Reference> location() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_LOCATION);
    }

    /**
     * The list of healthcare services that this worker provides for this
     * role's Organization/Location(s).
     */
    public java.util.List<Reference> healthcareService() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_HEALTHCARE_SERVICE);
    }

    /**
     * Contact details that are specific to the role/location/service.
     */
    public java.util.List<ContactPoint> telecom() {
        return getList(ContactPoint.class, FhirPropertyNames.PROPERTY_TELECOM);
    }

    /**
     * A collection of times the practitioner is available or performing this
     * role at the location and/or healthcareservice.
     */
    public java.util.List<PractitionerRoleAvailableTime> availableTime() {
        return getList(PractitionerRoleAvailableTime.class, FhirPropertyNames.PROPERTY_AVAILABLE_TIME);
    }

    /**
     * The practitioner is not available or performing this role during this
     * period of time due to the provided reason.
     */
    public java.util.List<PractitionerRoleNotAvailable> notAvailable() {
        return getList(PractitionerRoleNotAvailable.class, FhirPropertyNames.PROPERTY_NOT_AVAILABLE);
    }

    /**
     * A description of site availability exceptions, e.g. public holiday
     * availability. Succinctly describing all possible exceptions to normal
     * site availability as details in the available Times and not available
     * Times.
     */
    public String availabilityExceptions() {
        return getString(FhirPropertyNames.PROPERTY_AVAILABILITY_EXCEPTIONS);
    }

    /**
     * Technical endpoints providing access to services operated for the
     * practitioner with this role.
     */
    public java.util.List<Reference> endpoint() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_ENDPOINT);
    }

    public static final class Builder extends DomainResource.Builder<PractitionerRole, PractitionerRole.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder active(final Boolean active) {
            b.add(FhirPropertyNames.PROPERTY_ACTIVE, active);
            return this;
        }

        public Builder period(final Period period) {
            b.add(FhirPropertyNames.PROPERTY_PERIOD, period);
            return this;
        }

        public Builder practitioner(final Reference practitioner) {
            b.add(FhirPropertyNames.PROPERTY_PRACTITIONER, practitioner);
            return this;
        }

        public Builder organization(final Reference organization) {
            b.add(FhirPropertyNames.PROPERTY_ORGANIZATION, organization);
            return this;
        }

        public Builder code(final java.util.List<CodeableConcept> code) {
            b.add(FhirPropertyNames.PROPERTY_CODE, FhirObject.toArray(code));
            return this;
        }

        public Builder specialty(final java.util.List<CodeableConcept> specialty) {
            b.add(FhirPropertyNames.PROPERTY_SPECIALTY, FhirObject.toArray(specialty));
            return this;
        }

        public Builder location(final java.util.List<Reference> location) {
            b.add(FhirPropertyNames.PROPERTY_LOCATION, FhirObject.toArray(location));
            return this;
        }

        public Builder healthcareService(final java.util.List<Reference> healthcareService) {
            b.add(FhirPropertyNames.PROPERTY_HEALTHCARE_SERVICE, FhirObject.toArray(healthcareService));
            return this;
        }

        public Builder telecom(final java.util.List<ContactPoint> telecom) {
            b.add(FhirPropertyNames.PROPERTY_TELECOM, FhirObject.toArray(telecom));
            return this;
        }

        public Builder availableTime(final java.util.List<PractitionerRoleAvailableTime> availableTime) {
            b.add(FhirPropertyNames.PROPERTY_AVAILABLE_TIME, FhirObject.toArray(availableTime));
            return this;
        }

        public Builder notAvailable(final java.util.List<PractitionerRoleNotAvailable> notAvailable) {
            b.add(FhirPropertyNames.PROPERTY_NOT_AVAILABLE, FhirObject.toArray(notAvailable));
            return this;
        }

        public Builder availabilityExceptions(final String availabilityExceptions) {
            b.add(FhirPropertyNames.PROPERTY_AVAILABILITY_EXCEPTIONS, availabilityExceptions);
            return this;
        }

        public Builder endpoint(final java.util.List<Reference> endpoint) {
            b.add(FhirPropertyNames.PROPERTY_ENDPOINT, FhirObject.toArray(endpoint));
            return this;
        }

        public PractitionerRole build() {
            return new PractitionerRole(b.build());
        }
    }

    /**
     * A specific set of Roles/Locations/specialties/services that a
     * practitioner may perform at an organization for a period of time.
     */
    public static class PractitionerRoleAvailableTime extends FhirObject {
        public static final String RESOURCE_TYPE = "PractitionerRoleAvailableTime";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public PractitionerRoleAvailableTime(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Indicates which days of the week are available between the start and
         * end Times.
         */
        public java.util.List<String> daysOfWeek() {
            return getList(String.class, FhirPropertyNames.PROPERTY_DAYS_OF_WEEK);
        }

        /**
         * Is this always available? (hence times are irrelevant) e.g. 24 hour
         * service.
         */
        public Boolean allDay() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_ALL_DAY);
        }

        /**
         * The opening time of day. Note: If the AllDay flag is set, then this
         * time is ignored.
         */
        public java.time.Instant availableStartTime() {
            return getInstant(FhirPropertyNames.PROPERTY_AVAILABLE_START_TIME);
        }

        /**
         * The closing time of day. Note: If the AllDay flag is set, then this
         * time is ignored.
         */
        public java.time.Instant availableEndTime() {
            return getInstant(FhirPropertyNames.PROPERTY_AVAILABLE_END_TIME);
        }

        public static final class Builder extends FhirObject.Builder<PractitionerRoleAvailableTime, PractitionerRoleAvailableTime.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder daysOfWeek(final java.util.List<String> daysOfWeek) {
                b.add(FhirPropertyNames.PROPERTY_DAYS_OF_WEEK, FhirObject.toStringArray(daysOfWeek));
                return this;
            }

            public Builder allDay(final Boolean allDay) {
                b.add(FhirPropertyNames.PROPERTY_ALL_DAY, allDay);
                return this;
            }

            public Builder availableStartTime(final java.time.Instant availableStartTime) {
                b.add(FhirPropertyNames.PROPERTY_AVAILABLE_START_TIME, availableStartTime.toString());
                return this;
            }

            public Builder availableEndTime(final java.time.Instant availableEndTime) {
                b.add(FhirPropertyNames.PROPERTY_AVAILABLE_END_TIME, availableEndTime.toString());
                return this;
            }

            public PractitionerRoleAvailableTime build() {
                return new PractitionerRoleAvailableTime(b.build());
            }
        }
    }

    /**
     * A specific set of Roles/Locations/specialties/services that a
     * practitioner may perform at an organization for a period of time.
     */
    public static class PractitionerRoleNotAvailable extends FhirObject {
        public static final String RESOURCE_TYPE = "PractitionerRoleNotAvailable";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public PractitionerRoleNotAvailable(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The reason that can be presented to the user as to why this time is
         * not available.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * Service is not available (seasonally or for a public holiday) from
         * this date.
         */
        public Period during() {
            return getObject(Period.class, FhirPropertyNames.PROPERTY_DURING);
        }

        public static final class Builder extends FhirObject.Builder<PractitionerRoleNotAvailable, PractitionerRoleNotAvailable.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder during(final Period during) {
                b.add(FhirPropertyNames.PROPERTY_DURING, during);
                return this;
            }

            public PractitionerRoleNotAvailable build() {
                return new PractitionerRoleNotAvailable(b.build());
            }
        }
    }
}
