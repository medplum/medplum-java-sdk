/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A structured set of tests against a FHIR server or client
 * implementation to determine compliance against the FHIR specification.
 */
public class TestScript extends DomainResource {
    public static final String RESOURCE_TYPE = "TestScript";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public TestScript(final JsonObject data) {
        super(data);
    }

    /**
     * An absolute URI that is used to identify this test script when it is
     * referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative
     * instance of this test script is (or will be) published. This URL can
     * be the target of a canonical reference. It SHALL remain the same when
     * the test script is stored on different servers.
     */
    public java.net.URI url() {
        return getUri(FhirPropertyNames.PROPERTY_URL);
    }

    /**
     * A formal identifier that is used to identify this test script when it
     * is represented in other formats, or referenced in a specification,
     * model, design or an instance.
     */
    public Identifier identifier() {
        return getObject(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The identifier that is used to identify this version of the test
     * script when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the test script author
     * and is not expected to be globally unique. For example, it might be a
     * timestamp (e.g. yyyymmdd) if a managed version is not available. There
     * is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    public String version() {
        return getString(FhirPropertyNames.PROPERTY_VERSION);
    }

    /**
     * A natural language name identifying the test script. This name should
     * be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    public String name() {
        return getString(FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * A short, descriptive, user-friendly title for the test script.
     */
    public String title() {
        return getString(FhirPropertyNames.PROPERTY_TITLE);
    }

    /**
     * The status of this test script. Enables tracking the life-cycle of the
     * content.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * A Boolean value to indicate that this test script is authored for
     * testing purposes (or education/evaluation/marketing) and is not
     * intended to be used for genuine usage.
     */
    public Boolean experimental() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_EXPERIMENTAL);
    }

    /**
     * The date  (and optionally time) when the test script was published.
     * The date must change when the business version changes and it must
     * change if the status code changes. In addition, it should change when
     * the substantive content of the test script changes.
     */
    public java.time.Instant date() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE);
    }

    /**
     * The name of the organization or individual that published the test
     * script.
     */
    public String publisher() {
        return getString(FhirPropertyNames.PROPERTY_PUBLISHER);
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_CONTACT);
    }

    /**
     * A free text natural language description of the test script from a
     * consumer's perspective.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs
     * (insurance plans, studies, ...) and may be used to assist with
     * indexing and searching for appropriate test script instances.
     */
    public java.util.List<UsageContext> useContext() {
        return getList(UsageContext.class, FhirPropertyNames.PROPERTY_USE_CONTEXT);
    }

    /**
     * A legal or geographic region in which the test script is intended to
     * be used.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_JURISDICTION);
    }

    /**
     * Explanation of why this test script is needed and why it has been
     * designed as it has.
     */
    public String purpose() {
        return getString(FhirPropertyNames.PROPERTY_PURPOSE);
    }

    /**
     * A copyright statement relating to the test script and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the test script.
     */
    public String copyright() {
        return getString(FhirPropertyNames.PROPERTY_COPYRIGHT);
    }

    /**
     * An abstract server used in operations within this test script in the
     * origin element.
     */
    public java.util.List<TestScriptOrigin> origin() {
        return getList(TestScriptOrigin.class, FhirPropertyNames.PROPERTY_ORIGIN);
    }

    /**
     * An abstract server used in operations within this test script in the
     * destination element.
     */
    public java.util.List<TestScriptDestination> destination() {
        return getList(TestScriptDestination.class, FhirPropertyNames.PROPERTY_DESTINATION);
    }

    /**
     * The required capability must exist and are assumed to function
     * correctly on the FHIR server being tested.
     */
    public TestScriptMetadata metadata() {
        return getObject(TestScriptMetadata.class, FhirPropertyNames.PROPERTY_METADATA);
    }

    /**
     * Fixture in the test script - by reference (uri). All fixtures are
     * required for the test script to execute.
     */
    public java.util.List<TestScriptFixture> fixture() {
        return getList(TestScriptFixture.class, FhirPropertyNames.PROPERTY_FIXTURE);
    }

    /**
     * Reference to the profile to be used for validation.
     */
    public java.util.List<Reference> profile() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_PROFILE);
    }

    /**
     * Variable is set based either on element value in response body or on
     * header field value in the response headers.
     */
    public java.util.List<TestScriptVariable> variable() {
        return getList(TestScriptVariable.class, FhirPropertyNames.PROPERTY_VARIABLE);
    }

    /**
     * A series of required setup operations before tests are executed.
     */
    public TestScriptSetup setup() {
        return getObject(TestScriptSetup.class, FhirPropertyNames.PROPERTY_SETUP);
    }

    /**
     * A test in this script.
     */
    public java.util.List<TestScriptTest> test() {
        return getList(TestScriptTest.class, FhirPropertyNames.PROPERTY_TEST);
    }

    /**
     * A series of operations required to clean up after all the tests are
     * executed (successfully or otherwise).
     */
    public TestScriptTeardown teardown() {
        return getObject(TestScriptTeardown.class, FhirPropertyNames.PROPERTY_TEARDOWN);
    }

    public static final class Builder extends DomainResource.Builder<TestScript, TestScript.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder url(final java.net.URI url) {
            b.add(FhirPropertyNames.PROPERTY_URL, url.toString());
            return this;
        }

        public Builder identifier(final Identifier identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, identifier);
            return this;
        }

        public Builder version(final String version) {
            b.add(FhirPropertyNames.PROPERTY_VERSION, version);
            return this;
        }

        public Builder name(final String name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, name);
            return this;
        }

        public Builder title(final String title) {
            b.add(FhirPropertyNames.PROPERTY_TITLE, title);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder experimental(final Boolean experimental) {
            b.add(FhirPropertyNames.PROPERTY_EXPERIMENTAL, experimental);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder publisher(final String publisher) {
            b.add(FhirPropertyNames.PROPERTY_PUBLISHER, publisher);
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(FhirPropertyNames.PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder useContext(final java.util.List<UsageContext> useContext) {
            b.add(FhirPropertyNames.PROPERTY_USE_CONTEXT, FhirObject.toArray(useContext));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(FhirPropertyNames.PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder purpose(final String purpose) {
            b.add(FhirPropertyNames.PROPERTY_PURPOSE, purpose);
            return this;
        }

        public Builder copyright(final String copyright) {
            b.add(FhirPropertyNames.PROPERTY_COPYRIGHT, copyright);
            return this;
        }

        public Builder origin(final java.util.List<TestScriptOrigin> origin) {
            b.add(FhirPropertyNames.PROPERTY_ORIGIN, FhirObject.toArray(origin));
            return this;
        }

        public Builder destination(final java.util.List<TestScriptDestination> destination) {
            b.add(FhirPropertyNames.PROPERTY_DESTINATION, FhirObject.toArray(destination));
            return this;
        }

        public Builder metadata(final TestScriptMetadata metadata) {
            b.add(FhirPropertyNames.PROPERTY_METADATA, metadata);
            return this;
        }

        public Builder fixture(final java.util.List<TestScriptFixture> fixture) {
            b.add(FhirPropertyNames.PROPERTY_FIXTURE, FhirObject.toArray(fixture));
            return this;
        }

        public Builder profile(final java.util.List<Reference> profile) {
            b.add(FhirPropertyNames.PROPERTY_PROFILE, FhirObject.toArray(profile));
            return this;
        }

        public Builder variable(final java.util.List<TestScriptVariable> variable) {
            b.add(FhirPropertyNames.PROPERTY_VARIABLE, FhirObject.toArray(variable));
            return this;
        }

        public Builder setup(final TestScriptSetup setup) {
            b.add(FhirPropertyNames.PROPERTY_SETUP, setup);
            return this;
        }

        public Builder test(final java.util.List<TestScriptTest> test) {
            b.add(FhirPropertyNames.PROPERTY_TEST, FhirObject.toArray(test));
            return this;
        }

        public Builder teardown(final TestScriptTeardown teardown) {
            b.add(FhirPropertyNames.PROPERTY_TEARDOWN, teardown);
            return this;
        }

        public TestScript build() {
            return new TestScript(b.build());
        }
    }

    /**
     * A structured set of tests against a FHIR server or client
     * implementation to determine compliance against the FHIR specification.
     */
    public static class TestScriptAction extends FhirObject {
        public static final String RESOURCE_TYPE = "TestScriptAction";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TestScriptAction(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The operation to perform.
         */
        public TestScriptOperation operation() {
            return getObject(TestScriptOperation.class, FhirPropertyNames.PROPERTY_OPERATION);
        }

        /**
         * Evaluates the results of previous operations to determine if the
         * server under test behaves appropriately.
         */
        public TestScriptAssert assertValue() {
            return getObject(TestScriptAssert.class, FhirPropertyNames.PROPERTY_ASSERT);
        }

        public static final class Builder extends FhirObject.Builder<TestScriptAction, TestScriptAction.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder operation(final TestScriptOperation operation) {
                b.add(FhirPropertyNames.PROPERTY_OPERATION, operation);
                return this;
            }

            public Builder assertValue(final TestScriptAssert assertValue) {
                b.add(FhirPropertyNames.PROPERTY_ASSERT, assertValue);
                return this;
            }

            public TestScriptAction build() {
                return new TestScriptAction(b.build());
            }
        }
    }

    /**
     * A structured set of tests against a FHIR server or client
     * implementation to determine compliance against the FHIR specification.
     */
    public static class TestScriptAction1 extends FhirObject {
        public static final String RESOURCE_TYPE = "TestScriptAction1";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TestScriptAction1(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * An operation would involve a REST request to a server.
         */
        public TestScriptOperation operation() {
            return getObject(TestScriptOperation.class, FhirPropertyNames.PROPERTY_OPERATION);
        }

        /**
         * Evaluates the results of previous operations to determine if the
         * server under test behaves appropriately.
         */
        public TestScriptAssert assertValue() {
            return getObject(TestScriptAssert.class, FhirPropertyNames.PROPERTY_ASSERT);
        }

        public static final class Builder extends FhirObject.Builder<TestScriptAction1, TestScriptAction1.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder operation(final TestScriptOperation operation) {
                b.add(FhirPropertyNames.PROPERTY_OPERATION, operation);
                return this;
            }

            public Builder assertValue(final TestScriptAssert assertValue) {
                b.add(FhirPropertyNames.PROPERTY_ASSERT, assertValue);
                return this;
            }

            public TestScriptAction1 build() {
                return new TestScriptAction1(b.build());
            }
        }
    }

    /**
     * A structured set of tests against a FHIR server or client
     * implementation to determine compliance against the FHIR specification.
     */
    public static class TestScriptAction2 extends FhirObject {
        public static final String RESOURCE_TYPE = "TestScriptAction2";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TestScriptAction2(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * An operation would involve a REST request to a server.
         */
        public TestScriptOperation operation() {
            return getObject(TestScriptOperation.class, FhirPropertyNames.PROPERTY_OPERATION);
        }

        public static final class Builder extends FhirObject.Builder<TestScriptAction2, TestScriptAction2.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder operation(final TestScriptOperation operation) {
                b.add(FhirPropertyNames.PROPERTY_OPERATION, operation);
                return this;
            }

            public TestScriptAction2 build() {
                return new TestScriptAction2(b.build());
            }
        }
    }

    /**
     * A structured set of tests against a FHIR server or client
     * implementation to determine compliance against the FHIR specification.
     */
    public static class TestScriptAssert extends FhirObject {
        public static final String RESOURCE_TYPE = "TestScriptAssert";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TestScriptAssert(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The label would be used for tracking/logging purposes by test engines.
         */
        public String label() {
            return getString(FhirPropertyNames.PROPERTY_LABEL);
        }

        /**
         * The description would be used by test engines for tracking and
         * reporting purposes.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * The direction to use for the assertion.
         */
        public String direction() {
            return getString(FhirPropertyNames.PROPERTY_DIRECTION);
        }

        /**
         * Id of the source fixture used as the contents to be evaluated by
         * either the &quot;source/expression&quot; or &quot;sourceId/path&quot; definition.
         */
        public String compareToSourceId() {
            return getString(FhirPropertyNames.PROPERTY_COMPARE_TO_SOURCE_ID);
        }

        /**
         * The FHIRPath expression to evaluate against the source fixture. When
         * compareToSourceId is defined, either compareToSourceExpression or
         * compareToSourcePath must be defined, but not both.
         */
        public String compareToSourceExpression() {
            return getString(FhirPropertyNames.PROPERTY_COMPARE_TO_SOURCE_EXPRESSION);
        }

        /**
         * XPath or JSONPath expression to evaluate against the source fixture.
         * When compareToSourceId is defined, either compareToSourceExpression or
         * compareToSourcePath must be defined, but not both.
         */
        public String compareToSourcePath() {
            return getString(FhirPropertyNames.PROPERTY_COMPARE_TO_SOURCE_PATH);
        }

        /**
         * The mime-type contents to compare against the request or response
         * message 'Content-Type' header.
         */
        public String contentType() {
            return getString(FhirPropertyNames.PROPERTY_CONTENT_TYPE);
        }

        /**
         * The FHIRPath expression to be evaluated against the request or
         * response message contents - HTTP headers and payload.
         */
        public String expression() {
            return getString(FhirPropertyNames.PROPERTY_EXPRESSION);
        }

        /**
         * The HTTP header field name e.g. 'Location'.
         */
        public String headerField() {
            return getString(FhirPropertyNames.PROPERTY_HEADER_FIELD);
        }

        /**
         * The ID of a fixture.  Asserts that the response contains at a minimum
         * the fixture specified by minimumId.
         */
        public String minimumId() {
            return getString(FhirPropertyNames.PROPERTY_MINIMUM_ID);
        }

        /**
         * Whether or not the test execution performs validation on the bundle
         * navigation links.
         */
        public Boolean navigationLinks() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_NAVIGATION_LINKS);
        }

        /**
         * The operator type defines the conditional behavior of the assert. If
         * not defined, the default is equals.
         */
        public String operator() {
            return getString(FhirPropertyNames.PROPERTY_OPERATOR);
        }

        /**
         * The XPath or JSONPath expression to be evaluated against the fixture
         * representing the response received from server.
         */
        public String path() {
            return getString(FhirPropertyNames.PROPERTY_PATH);
        }

        /**
         * The request method or HTTP operation code to compare against that used
         * by the client system under test.
         */
        public String requestMethod() {
            return getString(FhirPropertyNames.PROPERTY_REQUEST_METHOD);
        }

        /**
         * The value to use in a comparison against the request URL path string.
         */
        public String requestURL() {
            return getString(FhirPropertyNames.PROPERTY_REQUEST_U_R_L);
        }

        /**
         * The type of the resource.  See
         * http://build.fhir.org/resourcelist.html.
         */
        public String resource() {
            return getString(FhirPropertyNames.PROPERTY_RESOURCE);
        }

        /**
         * okay | created | noContent | notModified | bad | forbidden | notFound
         * | methodNotAllowed | conflict | gone | preconditionFailed |
         * unprocessable.
         */
        public String response() {
            return getString(FhirPropertyNames.PROPERTY_RESPONSE);
        }

        /**
         * The value of the HTTP response code to be tested.
         */
        public String responseCode() {
            return getString(FhirPropertyNames.PROPERTY_RESPONSE_CODE);
        }

        /**
         * Fixture to evaluate the XPath/JSONPath expression or the headerField
         * against.
         */
        public String sourceId() {
            return getString(FhirPropertyNames.PROPERTY_SOURCE_ID);
        }

        /**
         * The ID of the Profile to validate against.
         */
        public String validateProfileId() {
            return getString(FhirPropertyNames.PROPERTY_VALIDATE_PROFILE_ID);
        }

        /**
         * The value to compare to.
         */
        public String value() {
            return getString(FhirPropertyNames.PROPERTY_VALUE);
        }

        /**
         * Whether or not the test execution will produce a warning only on error
         * for this assert.
         */
        public Boolean warningOnly() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_WARNING_ONLY);
        }

        public static final class Builder extends FhirObject.Builder<TestScriptAssert, TestScriptAssert.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder label(final String label) {
                b.add(FhirPropertyNames.PROPERTY_LABEL, label);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder direction(final String direction) {
                b.add(FhirPropertyNames.PROPERTY_DIRECTION, direction);
                return this;
            }

            public Builder compareToSourceId(final String compareToSourceId) {
                b.add(FhirPropertyNames.PROPERTY_COMPARE_TO_SOURCE_ID, compareToSourceId);
                return this;
            }

            public Builder compareToSourceExpression(final String compareToSourceExpression) {
                b.add(FhirPropertyNames.PROPERTY_COMPARE_TO_SOURCE_EXPRESSION, compareToSourceExpression);
                return this;
            }

            public Builder compareToSourcePath(final String compareToSourcePath) {
                b.add(FhirPropertyNames.PROPERTY_COMPARE_TO_SOURCE_PATH, compareToSourcePath);
                return this;
            }

            public Builder contentType(final String contentType) {
                b.add(FhirPropertyNames.PROPERTY_CONTENT_TYPE, contentType);
                return this;
            }

            public Builder expression(final String expression) {
                b.add(FhirPropertyNames.PROPERTY_EXPRESSION, expression);
                return this;
            }

            public Builder headerField(final String headerField) {
                b.add(FhirPropertyNames.PROPERTY_HEADER_FIELD, headerField);
                return this;
            }

            public Builder minimumId(final String minimumId) {
                b.add(FhirPropertyNames.PROPERTY_MINIMUM_ID, minimumId);
                return this;
            }

            public Builder navigationLinks(final Boolean navigationLinks) {
                b.add(FhirPropertyNames.PROPERTY_NAVIGATION_LINKS, navigationLinks);
                return this;
            }

            public Builder operator(final String operator) {
                b.add(FhirPropertyNames.PROPERTY_OPERATOR, operator);
                return this;
            }

            public Builder path(final String path) {
                b.add(FhirPropertyNames.PROPERTY_PATH, path);
                return this;
            }

            public Builder requestMethod(final String requestMethod) {
                b.add(FhirPropertyNames.PROPERTY_REQUEST_METHOD, requestMethod);
                return this;
            }

            public Builder requestURL(final String requestURL) {
                b.add(FhirPropertyNames.PROPERTY_REQUEST_U_R_L, requestURL);
                return this;
            }

            public Builder resource(final String resource) {
                b.add(FhirPropertyNames.PROPERTY_RESOURCE, resource);
                return this;
            }

            public Builder response(final String response) {
                b.add(FhirPropertyNames.PROPERTY_RESPONSE, response);
                return this;
            }

            public Builder responseCode(final String responseCode) {
                b.add(FhirPropertyNames.PROPERTY_RESPONSE_CODE, responseCode);
                return this;
            }

            public Builder sourceId(final String sourceId) {
                b.add(FhirPropertyNames.PROPERTY_SOURCE_ID, sourceId);
                return this;
            }

            public Builder validateProfileId(final String validateProfileId) {
                b.add(FhirPropertyNames.PROPERTY_VALIDATE_PROFILE_ID, validateProfileId);
                return this;
            }

            public Builder value(final String value) {
                b.add(FhirPropertyNames.PROPERTY_VALUE, value);
                return this;
            }

            public Builder warningOnly(final Boolean warningOnly) {
                b.add(FhirPropertyNames.PROPERTY_WARNING_ONLY, warningOnly);
                return this;
            }

            public TestScriptAssert build() {
                return new TestScriptAssert(b.build());
            }
        }
    }

    /**
     * A structured set of tests against a FHIR server or client
     * implementation to determine compliance against the FHIR specification.
     */
    public static class TestScriptCapability extends FhirObject {
        public static final String RESOURCE_TYPE = "TestScriptCapability";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TestScriptCapability(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Whether or not the test execution will require the given capabilities
         * of the server in order for this test script to execute.
         */
        public Boolean required() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_REQUIRED);
        }

        /**
         * Whether or not the test execution will validate the given capabilities
         * of the server in order for this test script to execute.
         */
        public Boolean validated() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_VALIDATED);
        }

        /**
         * Description of the capabilities that this test script is requiring the
         * server to support.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * Which origin server these requirements apply to.
         */
        public java.util.List<Integer> origin() {
            return getList(Integer.class, FhirPropertyNames.PROPERTY_ORIGIN);
        }

        /**
         * Which server these requirements apply to.
         */
        public Integer destination() {
            return data.getInt(FhirPropertyNames.PROPERTY_DESTINATION);
        }

        /**
         * Links to the FHIR specification that describes this interaction and
         * the resources involved in more detail.
         */
        public java.util.List<java.net.URI> link() {
            return getList(java.net.URI.class, FhirPropertyNames.PROPERTY_LINK);
        }

        /**
         * Minimum capabilities required of server for test script to execute
         * successfully.   If server does not meet at a minimum the referenced
         * capability statement, then all tests in this script are skipped.
         */
        public String capabilities() {
            return getString(FhirPropertyNames.PROPERTY_CAPABILITIES);
        }

        public static final class Builder extends FhirObject.Builder<TestScriptCapability, TestScriptCapability.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder required(final Boolean required) {
                b.add(FhirPropertyNames.PROPERTY_REQUIRED, required);
                return this;
            }

            public Builder validated(final Boolean validated) {
                b.add(FhirPropertyNames.PROPERTY_VALIDATED, validated);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder origin(final java.util.List<Integer> origin) {
                b.add(FhirPropertyNames.PROPERTY_ORIGIN, FhirObject.toIntegerArray(origin));
                return this;
            }

            public Builder destination(final Integer destination) {
                b.add(FhirPropertyNames.PROPERTY_DESTINATION, destination);
                return this;
            }

            public Builder link(final java.util.List<java.net.URI> link) {
                b.add(FhirPropertyNames.PROPERTY_LINK, FhirObject.toUriArray(link));
                return this;
            }

            public Builder capabilities(final String capabilities) {
                b.add(FhirPropertyNames.PROPERTY_CAPABILITIES, capabilities);
                return this;
            }

            public TestScriptCapability build() {
                return new TestScriptCapability(b.build());
            }
        }
    }

    /**
     * A structured set of tests against a FHIR server or client
     * implementation to determine compliance against the FHIR specification.
     */
    public static class TestScriptDestination extends FhirObject {
        public static final String RESOURCE_TYPE = "TestScriptDestination";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TestScriptDestination(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Abstract name given to a destination server in this test script.  The
         * name is provided as a number starting at 1.
         */
        public Integer index() {
            return data.getInt(FhirPropertyNames.PROPERTY_INDEX);
        }

        /**
         * The type of destination profile the test system supports.
         */
        public Coding profile() {
            return getObject(Coding.class, FhirPropertyNames.PROPERTY_PROFILE);
        }

        public static final class Builder extends FhirObject.Builder<TestScriptDestination, TestScriptDestination.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder index(final Integer index) {
                b.add(FhirPropertyNames.PROPERTY_INDEX, index);
                return this;
            }

            public Builder profile(final Coding profile) {
                b.add(FhirPropertyNames.PROPERTY_PROFILE, profile);
                return this;
            }

            public TestScriptDestination build() {
                return new TestScriptDestination(b.build());
            }
        }
    }

    /**
     * A structured set of tests against a FHIR server or client
     * implementation to determine compliance against the FHIR specification.
     */
    public static class TestScriptFixture extends FhirObject {
        public static final String RESOURCE_TYPE = "TestScriptFixture";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TestScriptFixture(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Whether or not to implicitly create the fixture during setup. If true,
         * the fixture is automatically created on each server being tested
         * during setup, therefore no create operation is required for this
         * fixture in the TestScript.setup section.
         */
        public Boolean autocreate() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_AUTOCREATE);
        }

        /**
         * Whether or not to implicitly delete the fixture during teardown. If
         * true, the fixture is automatically deleted on each server being tested
         * during teardown, therefore no delete operation is required for this
         * fixture in the TestScript.teardown section.
         */
        public Boolean autodelete() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_AUTODELETE);
        }

        /**
         * Reference to the resource (containing the contents of the resource
         * needed for operations).
         */
        public Reference resource() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_RESOURCE);
        }

        public static final class Builder extends FhirObject.Builder<TestScriptFixture, TestScriptFixture.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder autocreate(final Boolean autocreate) {
                b.add(FhirPropertyNames.PROPERTY_AUTOCREATE, autocreate);
                return this;
            }

            public Builder autodelete(final Boolean autodelete) {
                b.add(FhirPropertyNames.PROPERTY_AUTODELETE, autodelete);
                return this;
            }

            public Builder resource(final Reference resource) {
                b.add(FhirPropertyNames.PROPERTY_RESOURCE, resource);
                return this;
            }

            public TestScriptFixture build() {
                return new TestScriptFixture(b.build());
            }
        }
    }

    /**
     * A structured set of tests against a FHIR server or client
     * implementation to determine compliance against the FHIR specification.
     */
    public static class TestScriptLink extends FhirObject {
        public static final String RESOURCE_TYPE = "TestScriptLink";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TestScriptLink(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * URL to a particular requirement or feature within the FHIR
         * specification.
         */
        public java.net.URI url() {
            return getUri(FhirPropertyNames.PROPERTY_URL);
        }

        /**
         * Short description of the link.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        public static final class Builder extends FhirObject.Builder<TestScriptLink, TestScriptLink.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder url(final java.net.URI url) {
                b.add(FhirPropertyNames.PROPERTY_URL, url.toString());
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public TestScriptLink build() {
                return new TestScriptLink(b.build());
            }
        }
    }

    /**
     * A structured set of tests against a FHIR server or client
     * implementation to determine compliance against the FHIR specification.
     */
    public static class TestScriptMetadata extends FhirObject {
        public static final String RESOURCE_TYPE = "TestScriptMetadata";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TestScriptMetadata(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A link to the FHIR specification that this test is covering.
         */
        public java.util.List<TestScriptLink> link() {
            return getList(TestScriptLink.class, FhirPropertyNames.PROPERTY_LINK);
        }

        /**
         * Capabilities that must exist and are assumed to function correctly on
         * the FHIR server being tested.
         */
        public java.util.List<TestScriptCapability> capability() {
            return getList(TestScriptCapability.class, FhirPropertyNames.PROPERTY_CAPABILITY);
        }

        public static final class Builder extends FhirObject.Builder<TestScriptMetadata, TestScriptMetadata.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder link(final java.util.List<TestScriptLink> link) {
                b.add(FhirPropertyNames.PROPERTY_LINK, FhirObject.toArray(link));
                return this;
            }

            public Builder capability(final java.util.List<TestScriptCapability> capability) {
                b.add(FhirPropertyNames.PROPERTY_CAPABILITY, FhirObject.toArray(capability));
                return this;
            }

            public TestScriptMetadata build() {
                return new TestScriptMetadata(b.build());
            }
        }
    }

    /**
     * A structured set of tests against a FHIR server or client
     * implementation to determine compliance against the FHIR specification.
     */
    public static class TestScriptOperation extends FhirObject {
        public static final String RESOURCE_TYPE = "TestScriptOperation";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TestScriptOperation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Server interaction or operation type.
         */
        public Coding type() {
            return getObject(Coding.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The type of the resource.  See
         * http://build.fhir.org/resourcelist.html.
         */
        public String resource() {
            return getString(FhirPropertyNames.PROPERTY_RESOURCE);
        }

        /**
         * The label would be used for tracking/logging purposes by test engines.
         */
        public String label() {
            return getString(FhirPropertyNames.PROPERTY_LABEL);
        }

        /**
         * The description would be used by test engines for tracking and
         * reporting purposes.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * The mime-type to use for RESTful operation in the 'Accept' header.
         */
        public String accept() {
            return getString(FhirPropertyNames.PROPERTY_ACCEPT);
        }

        /**
         * The mime-type to use for RESTful operation in the 'Content-Type'
         * header.
         */
        public String contentType() {
            return getString(FhirPropertyNames.PROPERTY_CONTENT_TYPE);
        }

        /**
         * The server where the request message is destined for.  Must be one of
         * the server numbers listed in TestScript.destination section.
         */
        public Integer destination() {
            return data.getInt(FhirPropertyNames.PROPERTY_DESTINATION);
        }

        /**
         * Whether or not to implicitly send the request url in encoded format.
         * The default is true to match the standard RESTful client behavior. Set
         * to false when communicating with a server that does not support
         * encoded url paths.
         */
        public Boolean encodeRequestUrl() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_ENCODE_REQUEST_URL);
        }

        /**
         * The HTTP method the test engine MUST use for this operation regardless
         * of any other operation details.
         */
        public String method() {
            return getString(FhirPropertyNames.PROPERTY_METHOD);
        }

        /**
         * The server where the request message originates from.  Must be one of
         * the server numbers listed in TestScript.origin section.
         */
        public Integer origin() {
            return data.getInt(FhirPropertyNames.PROPERTY_ORIGIN);
        }

        /**
         * Path plus parameters after [type].  Used to set parts of the request
         * URL explicitly.
         */
        public String params() {
            return getString(FhirPropertyNames.PROPERTY_PARAMS);
        }

        /**
         * Header elements would be used to set HTTP headers.
         */
        public java.util.List<TestScriptRequestHeader> requestHeader() {
            return getList(TestScriptRequestHeader.class, FhirPropertyNames.PROPERTY_REQUEST_HEADER);
        }

        /**
         * The fixture id (maybe new) to map to the request.
         */
        public String requestId() {
            return getString(FhirPropertyNames.PROPERTY_REQUEST_ID);
        }

        /**
         * The fixture id (maybe new) to map to the response.
         */
        public String responseId() {
            return getString(FhirPropertyNames.PROPERTY_RESPONSE_ID);
        }

        /**
         * The id of the fixture used as the body of a PUT or POST request.
         */
        public String sourceId() {
            return getString(FhirPropertyNames.PROPERTY_SOURCE_ID);
        }

        /**
         * Id of fixture used for extracting the [id],  [type], and [vid] for GET
         * requests.
         */
        public String targetId() {
            return getString(FhirPropertyNames.PROPERTY_TARGET_ID);
        }

        /**
         * Complete request URL.
         */
        public String url() {
            return getString(FhirPropertyNames.PROPERTY_URL);
        }

        public static final class Builder extends FhirObject.Builder<TestScriptOperation, TestScriptOperation.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final Coding type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder resource(final String resource) {
                b.add(FhirPropertyNames.PROPERTY_RESOURCE, resource);
                return this;
            }

            public Builder label(final String label) {
                b.add(FhirPropertyNames.PROPERTY_LABEL, label);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder accept(final String accept) {
                b.add(FhirPropertyNames.PROPERTY_ACCEPT, accept);
                return this;
            }

            public Builder contentType(final String contentType) {
                b.add(FhirPropertyNames.PROPERTY_CONTENT_TYPE, contentType);
                return this;
            }

            public Builder destination(final Integer destination) {
                b.add(FhirPropertyNames.PROPERTY_DESTINATION, destination);
                return this;
            }

            public Builder encodeRequestUrl(final Boolean encodeRequestUrl) {
                b.add(FhirPropertyNames.PROPERTY_ENCODE_REQUEST_URL, encodeRequestUrl);
                return this;
            }

            public Builder method(final String method) {
                b.add(FhirPropertyNames.PROPERTY_METHOD, method);
                return this;
            }

            public Builder origin(final Integer origin) {
                b.add(FhirPropertyNames.PROPERTY_ORIGIN, origin);
                return this;
            }

            public Builder params(final String params) {
                b.add(FhirPropertyNames.PROPERTY_PARAMS, params);
                return this;
            }

            public Builder requestHeader(final java.util.List<TestScriptRequestHeader> requestHeader) {
                b.add(FhirPropertyNames.PROPERTY_REQUEST_HEADER, FhirObject.toArray(requestHeader));
                return this;
            }

            public Builder requestId(final String requestId) {
                b.add(FhirPropertyNames.PROPERTY_REQUEST_ID, requestId);
                return this;
            }

            public Builder responseId(final String responseId) {
                b.add(FhirPropertyNames.PROPERTY_RESPONSE_ID, responseId);
                return this;
            }

            public Builder sourceId(final String sourceId) {
                b.add(FhirPropertyNames.PROPERTY_SOURCE_ID, sourceId);
                return this;
            }

            public Builder targetId(final String targetId) {
                b.add(FhirPropertyNames.PROPERTY_TARGET_ID, targetId);
                return this;
            }

            public Builder url(final String url) {
                b.add(FhirPropertyNames.PROPERTY_URL, url);
                return this;
            }

            public TestScriptOperation build() {
                return new TestScriptOperation(b.build());
            }
        }
    }

    /**
     * A structured set of tests against a FHIR server or client
     * implementation to determine compliance against the FHIR specification.
     */
    public static class TestScriptOrigin extends FhirObject {
        public static final String RESOURCE_TYPE = "TestScriptOrigin";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TestScriptOrigin(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Abstract name given to an origin server in this test script.  The name
         * is provided as a number starting at 1.
         */
        public Integer index() {
            return data.getInt(FhirPropertyNames.PROPERTY_INDEX);
        }

        /**
         * The type of origin profile the test system supports.
         */
        public Coding profile() {
            return getObject(Coding.class, FhirPropertyNames.PROPERTY_PROFILE);
        }

        public static final class Builder extends FhirObject.Builder<TestScriptOrigin, TestScriptOrigin.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder index(final Integer index) {
                b.add(FhirPropertyNames.PROPERTY_INDEX, index);
                return this;
            }

            public Builder profile(final Coding profile) {
                b.add(FhirPropertyNames.PROPERTY_PROFILE, profile);
                return this;
            }

            public TestScriptOrigin build() {
                return new TestScriptOrigin(b.build());
            }
        }
    }

    /**
     * A structured set of tests against a FHIR server or client
     * implementation to determine compliance against the FHIR specification.
     */
    public static class TestScriptRequestHeader extends FhirObject {
        public static final String RESOURCE_TYPE = "TestScriptRequestHeader";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TestScriptRequestHeader(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The HTTP header field e.g. &quot;Accept&quot;.
         */
        public String field() {
            return getString(FhirPropertyNames.PROPERTY_FIELD);
        }

        /**
         * The value of the header e.g. &quot;application/fhir+xml&quot;.
         */
        public String value() {
            return getString(FhirPropertyNames.PROPERTY_VALUE);
        }

        public static final class Builder extends FhirObject.Builder<TestScriptRequestHeader, TestScriptRequestHeader.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder field(final String field) {
                b.add(FhirPropertyNames.PROPERTY_FIELD, field);
                return this;
            }

            public Builder value(final String value) {
                b.add(FhirPropertyNames.PROPERTY_VALUE, value);
                return this;
            }

            public TestScriptRequestHeader build() {
                return new TestScriptRequestHeader(b.build());
            }
        }
    }

    /**
     * A structured set of tests against a FHIR server or client
     * implementation to determine compliance against the FHIR specification.
     */
    public static class TestScriptSetup extends FhirObject {
        public static final String RESOURCE_TYPE = "TestScriptSetup";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TestScriptSetup(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Action would contain either an operation or an assertion.
         */
        public java.util.List<TestScriptAction> action() {
            return getList(TestScriptAction.class, FhirPropertyNames.PROPERTY_ACTION);
        }

        public static final class Builder extends FhirObject.Builder<TestScriptSetup, TestScriptSetup.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder action(final java.util.List<TestScriptAction> action) {
                b.add(FhirPropertyNames.PROPERTY_ACTION, FhirObject.toArray(action));
                return this;
            }

            public TestScriptSetup build() {
                return new TestScriptSetup(b.build());
            }
        }
    }

    /**
     * A structured set of tests against a FHIR server or client
     * implementation to determine compliance against the FHIR specification.
     */
    public static class TestScriptTeardown extends FhirObject {
        public static final String RESOURCE_TYPE = "TestScriptTeardown";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TestScriptTeardown(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The teardown action will only contain an operation.
         */
        public java.util.List<TestScriptAction2> action() {
            return getList(TestScriptAction2.class, FhirPropertyNames.PROPERTY_ACTION);
        }

        public static final class Builder extends FhirObject.Builder<TestScriptTeardown, TestScriptTeardown.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder action(final java.util.List<TestScriptAction2> action) {
                b.add(FhirPropertyNames.PROPERTY_ACTION, FhirObject.toArray(action));
                return this;
            }

            public TestScriptTeardown build() {
                return new TestScriptTeardown(b.build());
            }
        }
    }

    /**
     * A structured set of tests against a FHIR server or client
     * implementation to determine compliance against the FHIR specification.
     */
    public static class TestScriptTest extends FhirObject {
        public static final String RESOURCE_TYPE = "TestScriptTest";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TestScriptTest(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The name of this test used for tracking/logging purposes by test
         * engines.
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * A short description of the test used by test engines for tracking and
         * reporting purposes.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * Action would contain either an operation or an assertion.
         */
        public java.util.List<TestScriptAction1> action() {
            return getList(TestScriptAction1.class, FhirPropertyNames.PROPERTY_ACTION);
        }

        public static final class Builder extends FhirObject.Builder<TestScriptTest, TestScriptTest.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder action(final java.util.List<TestScriptAction1> action) {
                b.add(FhirPropertyNames.PROPERTY_ACTION, FhirObject.toArray(action));
                return this;
            }

            public TestScriptTest build() {
                return new TestScriptTest(b.build());
            }
        }
    }

    /**
     * A structured set of tests against a FHIR server or client
     * implementation to determine compliance against the FHIR specification.
     */
    public static class TestScriptVariable extends FhirObject {
        public static final String RESOURCE_TYPE = "TestScriptVariable";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TestScriptVariable(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Descriptive name for this variable.
         */
        public String name() {
            return getString(FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * A default, hard-coded, or user-defined value for this variable.
         */
        public String defaultValue() {
            return getString(FhirPropertyNames.PROPERTY_DEFAULT_VALUE);
        }

        /**
         * A free text natural language description of the variable and its
         * purpose.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * The FHIRPath expression to evaluate against the fixture body. When
         * variables are defined, only one of either expression, headerField or
         * path must be specified.
         */
        public String expression() {
            return getString(FhirPropertyNames.PROPERTY_EXPRESSION);
        }

        /**
         * Will be used to grab the HTTP header field value from the headers that
         * sourceId is pointing to.
         */
        public String headerField() {
            return getString(FhirPropertyNames.PROPERTY_HEADER_FIELD);
        }

        /**
         * Displayable text string with hint help information to the user when
         * entering a default value.
         */
        public String hint() {
            return getString(FhirPropertyNames.PROPERTY_HINT);
        }

        /**
         * XPath or JSONPath to evaluate against the fixture body.  When
         * variables are defined, only one of either expression, headerField or
         * path must be specified.
         */
        public String path() {
            return getString(FhirPropertyNames.PROPERTY_PATH);
        }

        /**
         * Fixture to evaluate the XPath/JSONPath expression or the headerField
         * against within this variable.
         */
        public String sourceId() {
            return getString(FhirPropertyNames.PROPERTY_SOURCE_ID);
        }

        public static final class Builder extends FhirObject.Builder<TestScriptVariable, TestScriptVariable.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder name(final String name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder defaultValue(final String defaultValue) {
                b.add(FhirPropertyNames.PROPERTY_DEFAULT_VALUE, defaultValue);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder expression(final String expression) {
                b.add(FhirPropertyNames.PROPERTY_EXPRESSION, expression);
                return this;
            }

            public Builder headerField(final String headerField) {
                b.add(FhirPropertyNames.PROPERTY_HEADER_FIELD, headerField);
                return this;
            }

            public Builder hint(final String hint) {
                b.add(FhirPropertyNames.PROPERTY_HINT, hint);
                return this;
            }

            public Builder path(final String path) {
                b.add(FhirPropertyNames.PROPERTY_PATH, path);
                return this;
            }

            public Builder sourceId(final String sourceId) {
                b.add(FhirPropertyNames.PROPERTY_SOURCE_ID, sourceId);
                return this;
            }

            public TestScriptVariable build() {
                return new TestScriptVariable(b.build());
            }
        }
    }
}
