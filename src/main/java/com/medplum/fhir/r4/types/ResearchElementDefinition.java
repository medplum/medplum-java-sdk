/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * The ResearchElementDefinition resource describes a &quot;PICO&quot; element that
 * knowledge (evidence, assertion, recommendation) is about.
 */
public class ResearchElementDefinition extends DomainResource {
    public static final String RESOURCE_TYPE = "ResearchElementDefinition";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ResearchElementDefinition(final JsonObject data) {
        super(data);
    }

    /**
     * An absolute URI that is used to identify this research element
     * definition when it is referenced in a specification, model, design or
     * an instance; also called its canonical identifier. This SHOULD be
     * globally unique and SHOULD be a literal address at which at which an
     * authoritative instance of this research element definition is (or will
     * be) published. This URL can be the target of a canonical reference. It
     * SHALL remain the same when the research element definition is stored
     * on different servers.
     */
    public java.net.URI url() {
        return getUri(FhirPropertyNames.PROPERTY_URL);
    }

    /**
     * A formal identifier that is used to identify this research element
     * definition when it is represented in other formats, or referenced in a
     * specification, model, design or an instance.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The identifier that is used to identify this version of the research
     * element definition when it is referenced in a specification, model,
     * design or instance. This is an arbitrary value managed by the research
     * element definition author and is not expected to be globally unique.
     * For example, it might be a timestamp (e.g. yyyymmdd) if a managed
     * version is not available. There is also no expectation that versions
     * can be placed in a lexicographical sequence. To provide a version
     * consistent with the Decision Support Service specification, use the
     * format Major.Minor.Revision (e.g. 1.0.0). For more information on
     * versioning knowledge assets, refer to the Decision Support Service
     * specification. Note that a version is required for non-experimental
     * active artifacts.
     */
    public String version() {
        return getString(FhirPropertyNames.PROPERTY_VERSION);
    }

    /**
     * A natural language name identifying the research element definition.
     * This name should be usable as an identifier for the module by machine
     * processing applications such as code generation.
     */
    public String name() {
        return getString(FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * A short, descriptive, user-friendly title for the research element
     * definition.
     */
    public String title() {
        return getString(FhirPropertyNames.PROPERTY_TITLE);
    }

    /**
     * The short title provides an alternate title for use in informal
     * descriptive contexts where the full, formal title is not necessary.
     */
    public String shortTitle() {
        return getString(FhirPropertyNames.PROPERTY_SHORT_TITLE);
    }

    /**
     * An explanatory or alternate title for the ResearchElementDefinition
     * giving additional information about its content.
     */
    public String subtitle() {
        return getString(FhirPropertyNames.PROPERTY_SUBTITLE);
    }

    /**
     * The status of this research element definition. Enables tracking the
     * life-cycle of the content.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * A Boolean value to indicate that this research element definition is
     * authored for testing purposes (or education/evaluation/marketing) and
     * is not intended to be used for genuine usage.
     */
    public Boolean experimental() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_EXPERIMENTAL);
    }

    /**
     * The intended subjects for the ResearchElementDefinition. If this
     * element is not provided, a Patient subject is assumed, but the subject
     * of the ResearchElementDefinition can be anything.
     */
    public CodeableConcept subjectCodeableConcept() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_SUBJECT_CODEABLE_CONCEPT);
    }

    /**
     * The intended subjects for the ResearchElementDefinition. If this
     * element is not provided, a Patient subject is assumed, but the subject
     * of the ResearchElementDefinition can be anything.
     */
    public Reference subjectReference() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT_REFERENCE);
    }

    /**
     * The date  (and optionally time) when the research element definition
     * was published. The date must change when the business version changes
     * and it must change if the status code changes. In addition, it should
     * change when the substantive content of the research element definition
     * changes.
     */
    public java.time.Instant date() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE);
    }

    /**
     * The name of the organization or individual that published the research
     * element definition.
     */
    public String publisher() {
        return getString(FhirPropertyNames.PROPERTY_PUBLISHER);
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_CONTACT);
    }

    /**
     * A free text natural language description of the research element
     * definition from a consumer's perspective.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * A human-readable string to clarify or explain concepts about the
     * resource.
     */
    public java.util.List<String> comment() {
        return getList(String.class, FhirPropertyNames.PROPERTY_COMMENT);
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs
     * (insurance plans, studies, ...) and may be used to assist with
     * indexing and searching for appropriate research element definition
     * instances.
     */
    public java.util.List<UsageContext> useContext() {
        return getList(UsageContext.class, FhirPropertyNames.PROPERTY_USE_CONTEXT);
    }

    /**
     * A legal or geographic region in which the research element definition
     * is intended to be used.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_JURISDICTION);
    }

    /**
     * Explanation of why this research element definition is needed and why
     * it has been designed as it has.
     */
    public String purpose() {
        return getString(FhirPropertyNames.PROPERTY_PURPOSE);
    }

    /**
     * A detailed description, from a clinical perspective, of how the
     * ResearchElementDefinition is used.
     */
    public String usage() {
        return getString(FhirPropertyNames.PROPERTY_USAGE);
    }

    /**
     * A copyright statement relating to the research element definition
     * and/or its contents. Copyright statements are generally legal
     * restrictions on the use and publishing of the research element
     * definition.
     */
    public String copyright() {
        return getString(FhirPropertyNames.PROPERTY_COPYRIGHT);
    }

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for
     * usage.
     */
    public java.time.LocalDate approvalDate() {
        return getLocalDate(FhirPropertyNames.PROPERTY_APPROVAL_DATE);
    }

    /**
     * The date on which the resource content was last reviewed. Review
     * happens periodically after approval but does not change the original
     * approval date.
     */
    public java.time.LocalDate lastReviewDate() {
        return getLocalDate(FhirPropertyNames.PROPERTY_LAST_REVIEW_DATE);
    }

    /**
     * The period during which the research element definition content was or
     * is planned to be in active use.
     */
    public Period effectivePeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD);
    }

    /**
     * Descriptive topics related to the content of the
     * ResearchElementDefinition. Topics provide a high-level categorization
     * grouping types of ResearchElementDefinitions that can be useful for
     * filtering and searching.
     */
    public java.util.List<CodeableConcept> topic() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_TOPIC);
    }

    /**
     * An individiual or organization primarily involved in the creation and
     * maintenance of the content.
     */
    public java.util.List<ContactDetail> author() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_AUTHOR);
    }

    /**
     * An individual or organization primarily responsible for internal
     * coherence of the content.
     */
    public java.util.List<ContactDetail> editor() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_EDITOR);
    }

    /**
     * An individual or organization primarily responsible for review of some
     * aspect of the content.
     */
    public java.util.List<ContactDetail> reviewer() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_REVIEWER);
    }

    /**
     * An individual or organization responsible for officially endorsing the
     * content for use in some setting.
     */
    public java.util.List<ContactDetail> endorser() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_ENDORSER);
    }

    /**
     * Related artifacts such as additional documentation, justification, or
     * bibliographic references.
     */
    public java.util.List<RelatedArtifact> relatedArtifact() {
        return getList(RelatedArtifact.class, FhirPropertyNames.PROPERTY_RELATED_ARTIFACT);
    }

    /**
     * A reference to a Library resource containing the formal logic used by
     * the ResearchElementDefinition.
     */
    public java.util.List<String> library() {
        return getList(String.class, FhirPropertyNames.PROPERTY_LIBRARY);
    }

    /**
     * The type of research element, a population, an exposure, or an
     * outcome.
     */
    public String type() {
        return getString(FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * The type of the outcome (e.g. Dichotomous, Continuous, or
     * Descriptive).
     */
    public String variableType() {
        return getString(FhirPropertyNames.PROPERTY_VARIABLE_TYPE);
    }

    /**
     * A characteristic that defines the members of the research element.
     * Multiple characteristics are applied with &quot;and&quot; semantics.
     */
    public java.util.List<ResearchElementDefinitionCharacteristic> characteristic() {
        return getList(ResearchElementDefinitionCharacteristic.class, FhirPropertyNames.PROPERTY_CHARACTERISTIC);
    }

    public static final class Builder extends DomainResource.Builder<ResearchElementDefinition, ResearchElementDefinition.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder url(final java.net.URI url) {
            b.add(FhirPropertyNames.PROPERTY_URL, url.toString());
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder version(final String version) {
            b.add(FhirPropertyNames.PROPERTY_VERSION, version);
            return this;
        }

        public Builder name(final String name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, name);
            return this;
        }

        public Builder title(final String title) {
            b.add(FhirPropertyNames.PROPERTY_TITLE, title);
            return this;
        }

        public Builder shortTitle(final String shortTitle) {
            b.add(FhirPropertyNames.PROPERTY_SHORT_TITLE, shortTitle);
            return this;
        }

        public Builder subtitle(final String subtitle) {
            b.add(FhirPropertyNames.PROPERTY_SUBTITLE, subtitle);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder experimental(final Boolean experimental) {
            b.add(FhirPropertyNames.PROPERTY_EXPERIMENTAL, experimental);
            return this;
        }

        public Builder subjectCodeableConcept(final CodeableConcept subjectCodeableConcept) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT_CODEABLE_CONCEPT, subjectCodeableConcept);
            return this;
        }

        public Builder subjectReference(final Reference subjectReference) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT_REFERENCE, subjectReference);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder publisher(final String publisher) {
            b.add(FhirPropertyNames.PROPERTY_PUBLISHER, publisher);
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(FhirPropertyNames.PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder comment(final java.util.List<String> comment) {
            b.add(FhirPropertyNames.PROPERTY_COMMENT, FhirObject.toStringArray(comment));
            return this;
        }

        public Builder useContext(final java.util.List<UsageContext> useContext) {
            b.add(FhirPropertyNames.PROPERTY_USE_CONTEXT, FhirObject.toArray(useContext));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(FhirPropertyNames.PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder purpose(final String purpose) {
            b.add(FhirPropertyNames.PROPERTY_PURPOSE, purpose);
            return this;
        }

        public Builder usage(final String usage) {
            b.add(FhirPropertyNames.PROPERTY_USAGE, usage);
            return this;
        }

        public Builder copyright(final String copyright) {
            b.add(FhirPropertyNames.PROPERTY_COPYRIGHT, copyright);
            return this;
        }

        public Builder approvalDate(final java.time.LocalDate approvalDate) {
            b.add(FhirPropertyNames.PROPERTY_APPROVAL_DATE, approvalDate.toString());
            return this;
        }

        public Builder lastReviewDate(final java.time.LocalDate lastReviewDate) {
            b.add(FhirPropertyNames.PROPERTY_LAST_REVIEW_DATE, lastReviewDate.toString());
            return this;
        }

        public Builder effectivePeriod(final Period effectivePeriod) {
            b.add(FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD, effectivePeriod);
            return this;
        }

        public Builder topic(final java.util.List<CodeableConcept> topic) {
            b.add(FhirPropertyNames.PROPERTY_TOPIC, FhirObject.toArray(topic));
            return this;
        }

        public Builder author(final java.util.List<ContactDetail> author) {
            b.add(FhirPropertyNames.PROPERTY_AUTHOR, FhirObject.toArray(author));
            return this;
        }

        public Builder editor(final java.util.List<ContactDetail> editor) {
            b.add(FhirPropertyNames.PROPERTY_EDITOR, FhirObject.toArray(editor));
            return this;
        }

        public Builder reviewer(final java.util.List<ContactDetail> reviewer) {
            b.add(FhirPropertyNames.PROPERTY_REVIEWER, FhirObject.toArray(reviewer));
            return this;
        }

        public Builder endorser(final java.util.List<ContactDetail> endorser) {
            b.add(FhirPropertyNames.PROPERTY_ENDORSER, FhirObject.toArray(endorser));
            return this;
        }

        public Builder relatedArtifact(final java.util.List<RelatedArtifact> relatedArtifact) {
            b.add(FhirPropertyNames.PROPERTY_RELATED_ARTIFACT, FhirObject.toArray(relatedArtifact));
            return this;
        }

        public Builder library(final java.util.List<String> library) {
            b.add(FhirPropertyNames.PROPERTY_LIBRARY, FhirObject.toStringArray(library));
            return this;
        }

        public Builder type(final String type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, type);
            return this;
        }

        public Builder variableType(final String variableType) {
            b.add(FhirPropertyNames.PROPERTY_VARIABLE_TYPE, variableType);
            return this;
        }

        public Builder characteristic(final java.util.List<ResearchElementDefinitionCharacteristic> characteristic) {
            b.add(FhirPropertyNames.PROPERTY_CHARACTERISTIC, FhirObject.toArray(characteristic));
            return this;
        }

        public ResearchElementDefinition build() {
            return new ResearchElementDefinition(b.build());
        }
    }

    /**
     * The ResearchElementDefinition resource describes a &quot;PICO&quot; element that
     * knowledge (evidence, assertion, recommendation) is about.
     */
    public static class ResearchElementDefinitionCharacteristic extends FhirObject {
        public static final String RESOURCE_TYPE = "ResearchElementDefinitionCharacteristic";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ResearchElementDefinitionCharacteristic(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Define members of the research element using Codes (such as condition,
         * medication, or observation), Expressions ( using an expression
         * language such as FHIRPath or CQL) or DataRequirements (such as
         * Diabetes diagnosis onset in the last year).
         */
        public CodeableConcept definitionCodeableConcept() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_DEFINITION_CODEABLE_CONCEPT);
        }

        /**
         * Define members of the research element using Codes (such as condition,
         * medication, or observation), Expressions ( using an expression
         * language such as FHIRPath or CQL) or DataRequirements (such as
         * Diabetes diagnosis onset in the last year).
         */
        public String definitionCanonical() {
            return getString(FhirPropertyNames.PROPERTY_DEFINITION_CANONICAL);
        }

        /**
         * Define members of the research element using Codes (such as condition,
         * medication, or observation), Expressions ( using an expression
         * language such as FHIRPath or CQL) or DataRequirements (such as
         * Diabetes diagnosis onset in the last year).
         */
        public Expression definitionExpression() {
            return getObject(Expression.class, FhirPropertyNames.PROPERTY_DEFINITION_EXPRESSION);
        }

        /**
         * Define members of the research element using Codes (such as condition,
         * medication, or observation), Expressions ( using an expression
         * language such as FHIRPath or CQL) or DataRequirements (such as
         * Diabetes diagnosis onset in the last year).
         */
        public DataRequirement definitionDataRequirement() {
            return getObject(DataRequirement.class, FhirPropertyNames.PROPERTY_DEFINITION_DATA_REQUIREMENT);
        }

        /**
         * Use UsageContext to define the members of the population, such as Age
         * Ranges, Genders, Settings.
         */
        public java.util.List<UsageContext> usageContext() {
            return getList(UsageContext.class, FhirPropertyNames.PROPERTY_USAGE_CONTEXT);
        }

        /**
         * When true, members with this characteristic are excluded from the
         * element.
         */
        public Boolean exclude() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_EXCLUDE);
        }

        /**
         * Specifies the UCUM unit for the outcome.
         */
        public CodeableConcept unitOfMeasure() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_UNIT_OF_MEASURE);
        }

        /**
         * A narrative description of the time period the study covers.
         */
        public String studyEffectiveDescription() {
            return getString(FhirPropertyNames.PROPERTY_STUDY_EFFECTIVE_DESCRIPTION);
        }

        /**
         * Indicates what effective period the study covers.
         */
        public String studyEffectiveDateTime() {
            return getString(FhirPropertyNames.PROPERTY_STUDY_EFFECTIVE_DATE_TIME);
        }

        /**
         * Indicates what effective period the study covers.
         */
        public Period studyEffectivePeriod() {
            return getObject(Period.class, FhirPropertyNames.PROPERTY_STUDY_EFFECTIVE_PERIOD);
        }

        /**
         * Indicates what effective period the study covers.
         */
        public Duration studyEffectiveDuration() {
            return getObject(Duration.class, FhirPropertyNames.PROPERTY_STUDY_EFFECTIVE_DURATION);
        }

        /**
         * Indicates what effective period the study covers.
         */
        public Timing studyEffectiveTiming() {
            return getObject(Timing.class, FhirPropertyNames.PROPERTY_STUDY_EFFECTIVE_TIMING);
        }

        /**
         * Indicates duration from the study initiation.
         */
        public Duration studyEffectiveTimeFromStart() {
            return getObject(Duration.class, FhirPropertyNames.PROPERTY_STUDY_EFFECTIVE_TIME_FROM_START);
        }

        /**
         * Indicates how elements are aggregated within the study effective
         * period.
         */
        public String studyEffectiveGroupMeasure() {
            return getString(FhirPropertyNames.PROPERTY_STUDY_EFFECTIVE_GROUP_MEASURE);
        }

        /**
         * A narrative description of the time period the study covers.
         */
        public String participantEffectiveDescription() {
            return getString(FhirPropertyNames.PROPERTY_PARTICIPANT_EFFECTIVE_DESCRIPTION);
        }

        /**
         * Indicates what effective period the study covers.
         */
        public String participantEffectiveDateTime() {
            return getString(FhirPropertyNames.PROPERTY_PARTICIPANT_EFFECTIVE_DATE_TIME);
        }

        /**
         * Indicates what effective period the study covers.
         */
        public Period participantEffectivePeriod() {
            return getObject(Period.class, FhirPropertyNames.PROPERTY_PARTICIPANT_EFFECTIVE_PERIOD);
        }

        /**
         * Indicates what effective period the study covers.
         */
        public Duration participantEffectiveDuration() {
            return getObject(Duration.class, FhirPropertyNames.PROPERTY_PARTICIPANT_EFFECTIVE_DURATION);
        }

        /**
         * Indicates what effective period the study covers.
         */
        public Timing participantEffectiveTiming() {
            return getObject(Timing.class, FhirPropertyNames.PROPERTY_PARTICIPANT_EFFECTIVE_TIMING);
        }

        /**
         * Indicates duration from the participant's study entry.
         */
        public Duration participantEffectiveTimeFromStart() {
            return getObject(Duration.class, FhirPropertyNames.PROPERTY_PARTICIPANT_EFFECTIVE_TIME_FROM_START);
        }

        /**
         * Indicates how elements are aggregated within the study effective
         * period.
         */
        public String participantEffectiveGroupMeasure() {
            return getString(FhirPropertyNames.PROPERTY_PARTICIPANT_EFFECTIVE_GROUP_MEASURE);
        }

        public static final class Builder extends FhirObject.Builder<ResearchElementDefinitionCharacteristic,
                ResearchElementDefinitionCharacteristic.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder definitionCodeableConcept(final CodeableConcept definitionCodeableConcept) {
                b.add(FhirPropertyNames.PROPERTY_DEFINITION_CODEABLE_CONCEPT, definitionCodeableConcept);
                return this;
            }

            public Builder definitionCanonical(final String definitionCanonical) {
                b.add(FhirPropertyNames.PROPERTY_DEFINITION_CANONICAL, definitionCanonical);
                return this;
            }

            public Builder definitionExpression(final Expression definitionExpression) {
                b.add(FhirPropertyNames.PROPERTY_DEFINITION_EXPRESSION, definitionExpression);
                return this;
            }

            public Builder definitionDataRequirement(final DataRequirement definitionDataRequirement) {
                b.add(FhirPropertyNames.PROPERTY_DEFINITION_DATA_REQUIREMENT, definitionDataRequirement);
                return this;
            }

            public Builder usageContext(final java.util.List<UsageContext> usageContext) {
                b.add(FhirPropertyNames.PROPERTY_USAGE_CONTEXT, FhirObject.toArray(usageContext));
                return this;
            }

            public Builder exclude(final Boolean exclude) {
                b.add(FhirPropertyNames.PROPERTY_EXCLUDE, exclude);
                return this;
            }

            public Builder unitOfMeasure(final CodeableConcept unitOfMeasure) {
                b.add(FhirPropertyNames.PROPERTY_UNIT_OF_MEASURE, unitOfMeasure);
                return this;
            }

            public Builder studyEffectiveDescription(final String studyEffectiveDescription) {
                b.add(FhirPropertyNames.PROPERTY_STUDY_EFFECTIVE_DESCRIPTION, studyEffectiveDescription);
                return this;
            }

            public Builder studyEffectiveDateTime(final String studyEffectiveDateTime) {
                b.add(FhirPropertyNames.PROPERTY_STUDY_EFFECTIVE_DATE_TIME, studyEffectiveDateTime);
                return this;
            }

            public Builder studyEffectivePeriod(final Period studyEffectivePeriod) {
                b.add(FhirPropertyNames.PROPERTY_STUDY_EFFECTIVE_PERIOD, studyEffectivePeriod);
                return this;
            }

            public Builder studyEffectiveDuration(final Duration studyEffectiveDuration) {
                b.add(FhirPropertyNames.PROPERTY_STUDY_EFFECTIVE_DURATION, studyEffectiveDuration);
                return this;
            }

            public Builder studyEffectiveTiming(final Timing studyEffectiveTiming) {
                b.add(FhirPropertyNames.PROPERTY_STUDY_EFFECTIVE_TIMING, studyEffectiveTiming);
                return this;
            }

            public Builder studyEffectiveTimeFromStart(final Duration studyEffectiveTimeFromStart) {
                b.add(FhirPropertyNames.PROPERTY_STUDY_EFFECTIVE_TIME_FROM_START, studyEffectiveTimeFromStart);
                return this;
            }

            public Builder studyEffectiveGroupMeasure(final String studyEffectiveGroupMeasure) {
                b.add(FhirPropertyNames.PROPERTY_STUDY_EFFECTIVE_GROUP_MEASURE, studyEffectiveGroupMeasure);
                return this;
            }

            public Builder participantEffectiveDescription(final String participantEffectiveDescription) {
                b.add(FhirPropertyNames.PROPERTY_PARTICIPANT_EFFECTIVE_DESCRIPTION, participantEffectiveDescription);
                return this;
            }

            public Builder participantEffectiveDateTime(final String participantEffectiveDateTime) {
                b.add(FhirPropertyNames.PROPERTY_PARTICIPANT_EFFECTIVE_DATE_TIME, participantEffectiveDateTime);
                return this;
            }

            public Builder participantEffectivePeriod(final Period participantEffectivePeriod) {
                b.add(FhirPropertyNames.PROPERTY_PARTICIPANT_EFFECTIVE_PERIOD, participantEffectivePeriod);
                return this;
            }

            public Builder participantEffectiveDuration(final Duration participantEffectiveDuration) {
                b.add(FhirPropertyNames.PROPERTY_PARTICIPANT_EFFECTIVE_DURATION, participantEffectiveDuration);
                return this;
            }

            public Builder participantEffectiveTiming(final Timing participantEffectiveTiming) {
                b.add(FhirPropertyNames.PROPERTY_PARTICIPANT_EFFECTIVE_TIMING, participantEffectiveTiming);
                return this;
            }

            public Builder participantEffectiveTimeFromStart(final Duration participantEffectiveTimeFromStart) {
                b.add(FhirPropertyNames.PROPERTY_PARTICIPANT_EFFECTIVE_TIME_FROM_START, participantEffectiveTimeFromStart);
                return this;
            }

            public Builder participantEffectiveGroupMeasure(final String participantEffectiveGroupMeasure) {
                b.add(FhirPropertyNames.PROPERTY_PARTICIPANT_EFFECTIVE_GROUP_MEASURE, participantEffectiveGroupMeasure);
                return this;
            }

            public ResearchElementDefinitionCharacteristic build() {
                return new ResearchElementDefinitionCharacteristic(b.build());
            }
        }
    }
}
