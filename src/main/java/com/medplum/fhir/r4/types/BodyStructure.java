/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Record details about an anatomical structure.  This resource may be
 * used when a coded concept does not provide the necessary detail needed
 * for the use case.
 */
public class BodyStructure extends DomainResource {
    public static final String RESOURCE_TYPE = "BodyStructure";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public BodyStructure(final JsonObject data) {
        super(data);
    }

    /**
     * Identifier for this instance of the anatomical structure.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * Whether this body site is in active use.
     */
    public Boolean active() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_ACTIVE);
    }

    /**
     * The kind of structure being represented by the body structure at
     * `BodyStructure.location`.  This can define both normal and abnormal
     * morphologies.
     */
    public CodeableConcept morphology() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_MORPHOLOGY);
    }

    /**
     * The anatomical location or region of the specimen, lesion, or body
     * structure.
     */
    public CodeableConcept location() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_LOCATION);
    }

    /**
     * Qualifier to refine the anatomical location.  These include qualifiers
     * for laterality, relative location, directionality, number, and plane.
     */
    public java.util.List<CodeableConcept> locationQualifier() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_LOCATION_QUALIFIER);
    }

    /**
     * A summary, characterization or explanation of the body structure.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * Image or images used to identify a location.
     */
    public java.util.List<Attachment> image() {
        return getList(Attachment.class, FhirPropertyNames.PROPERTY_IMAGE);
    }

    /**
     * The person to which the body site belongs.
     */
    public Reference patient() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PATIENT);
    }

    public static final class Builder extends DomainResource.Builder<BodyStructure, BodyStructure.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder active(final Boolean active) {
            b.add(FhirPropertyNames.PROPERTY_ACTIVE, active);
            return this;
        }

        public Builder morphology(final CodeableConcept morphology) {
            b.add(FhirPropertyNames.PROPERTY_MORPHOLOGY, morphology);
            return this;
        }

        public Builder location(final CodeableConcept location) {
            b.add(FhirPropertyNames.PROPERTY_LOCATION, location);
            return this;
        }

        public Builder locationQualifier(final java.util.List<CodeableConcept> locationQualifier) {
            b.add(FhirPropertyNames.PROPERTY_LOCATION_QUALIFIER, FhirObject.toArray(locationQualifier));
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder image(final java.util.List<Attachment> image) {
            b.add(FhirPropertyNames.PROPERTY_IMAGE, FhirObject.toArray(image));
            return this;
        }

        public Builder patient(final Reference patient) {
            b.add(FhirPropertyNames.PROPERTY_PATIENT, patient);
            return this;
        }

        public BodyStructure build() {
            return new BodyStructure(b.build());
        }
    }
}
