/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * The parameters to the module. This collection specifies both the input
 * and output parameters. Input parameters are provided by the caller as
 * part of the $evaluate operation. Output parameters are included in the
 * GuidanceResponse.
 */
public class ParameterDefinition extends FhirObject {
    public static final String RESOURCE_TYPE = "ParameterDefinition";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ParameterDefinition(final JsonObject data) {
        super(data);
    }

    /**
     * Unique id for the element within a resource (for internal references).
     * This may be any string value that does not contain spaces.
     */
    public String id() {
        return getString(FhirPropertyNames.PROPERTY_ID);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the element. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
    }

    /**
     * The name of the parameter used to allow access to the value of the
     * parameter in evaluation contexts.
     */
    public String name() {
        return getString(FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * Whether the parameter is input or output for the module.
     */
    public String use() {
        return getString(FhirPropertyNames.PROPERTY_USE);
    }

    /**
     * The minimum number of times this parameter SHALL appear in the request
     * or response.
     */
    public Integer min() {
        return data.getInt(FhirPropertyNames.PROPERTY_MIN);
    }

    /**
     * The maximum number of times this element is permitted to appear in the
     * request or response.
     */
    public String max() {
        return getString(FhirPropertyNames.PROPERTY_MAX);
    }

    /**
     * A brief discussion of what the parameter is for and how it is used by
     * the module.
     */
    public String documentation() {
        return getString(FhirPropertyNames.PROPERTY_DOCUMENTATION);
    }

    /**
     * The type of the parameter.
     */
    public String type() {
        return getString(FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * If specified, this indicates a profile that the input data must
     * conform to, or that the output data will conform to.
     */
    public String profile() {
        return getString(FhirPropertyNames.PROPERTY_PROFILE);
    }

    public static final class Builder extends FhirObject.Builder<ParameterDefinition, ParameterDefinition.Builder> {

        private Builder() {
            super();
        }

        private Builder(final JsonObject data) {
            super(data);
        }

        public Builder id(final String id) {
            b.add(FhirPropertyNames.PROPERTY_ID, id);
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder name(final String name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, name);
            return this;
        }

        public Builder use(final String use) {
            b.add(FhirPropertyNames.PROPERTY_USE, use);
            return this;
        }

        public Builder min(final Integer min) {
            b.add(FhirPropertyNames.PROPERTY_MIN, min);
            return this;
        }

        public Builder max(final String max) {
            b.add(FhirPropertyNames.PROPERTY_MAX, max);
            return this;
        }

        public Builder documentation(final String documentation) {
            b.add(FhirPropertyNames.PROPERTY_DOCUMENTATION, documentation);
            return this;
        }

        public Builder type(final String type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, type);
            return this;
        }

        public Builder profile(final String profile) {
            b.add(FhirPropertyNames.PROPERTY_PROFILE, profile);
            return this;
        }

        public ParameterDefinition build() {
            return new ParameterDefinition(b.build());
        }
    }
}
