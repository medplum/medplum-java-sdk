/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * The ChargeItemDefinition resource provides the properties that apply
 * to the (billing) codes necessary to calculate costs and prices. The
 * properties may differ largely depending on type and realm, therefore
 * this resource gives only a rough structure and requires profiling for
 * each type of billing code system.
 */
public class ChargeItemDefinition extends DomainResource {
    public static final String RESOURCE_TYPE = "ChargeItemDefinition";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ChargeItemDefinition(final JsonObject data) {
        super(data);
    }

    /**
     * An absolute URI that is used to identify this charge item definition
     * when it is referenced in a specification, model, design or an
     * instance; also called its canonical identifier. This SHOULD be
     * globally unique and SHOULD be a literal address at which at which an
     * authoritative instance of this charge item definition is (or will be)
     * published. This URL can be the target of a canonical reference. It
     * SHALL remain the same when the charge item definition is stored on
     * different servers.
     */
    public java.net.URI url() {
        return getUri(FhirPropertyNames.PROPERTY_URL);
    }

    /**
     * A formal identifier that is used to identify this charge item
     * definition when it is represented in other formats, or referenced in a
     * specification, model, design or an instance.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The identifier that is used to identify this version of the charge
     * item definition when it is referenced in a specification, model,
     * design or instance. This is an arbitrary value managed by the charge
     * item definition author and is not expected to be globally unique. For
     * example, it might be a timestamp (e.g. yyyymmdd) if a managed version
     * is not available. There is also no expectation that versions can be
     * placed in a lexicographical sequence. To provide a version consistent
     * with the Decision Support Service specification, use the format
     * Major.Minor.Revision (e.g. 1.0.0). For more information on versioning
     * knowledge assets, refer to the Decision Support Service specification.
     * Note that a version is required for non-experimental active assets.
     */
    public String version() {
        return getString(FhirPropertyNames.PROPERTY_VERSION);
    }

    /**
     * A short, descriptive, user-friendly title for the charge item
     * definition.
     */
    public String title() {
        return getString(FhirPropertyNames.PROPERTY_TITLE);
    }

    /**
     * The URL pointing to an externally-defined charge item definition that
     * is adhered to in whole or in part by this definition.
     */
    public java.util.List<java.net.URI> derivedFromUri() {
        return getList(java.net.URI.class, FhirPropertyNames.PROPERTY_DERIVED_FROM_URI);
    }

    /**
     * A larger definition of which this particular definition is a component
     * or step.
     */
    public java.util.List<String> partOf() {
        return getList(String.class, FhirPropertyNames.PROPERTY_PART_OF);
    }

    /**
     * As new versions of a protocol or guideline are defined, allows
     * identification of what versions are replaced by a new instance.
     */
    public java.util.List<String> replaces() {
        return getList(String.class, FhirPropertyNames.PROPERTY_REPLACES);
    }

    /**
     * The current state of the ChargeItemDefinition.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * A Boolean value to indicate that this charge item definition is
     * authored for testing purposes (or education/evaluation/marketing) and
     * is not intended to be used for genuine usage.
     */
    public Boolean experimental() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_EXPERIMENTAL);
    }

    /**
     * The date  (and optionally time) when the charge item definition was
     * published. The date must change when the business version changes and
     * it must change if the status code changes. In addition, it should
     * change when the substantive content of the charge item definition
     * changes.
     */
    public java.time.Instant date() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE);
    }

    /**
     * The name of the organization or individual that published the charge
     * item definition.
     */
    public String publisher() {
        return getString(FhirPropertyNames.PROPERTY_PUBLISHER);
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_CONTACT);
    }

    /**
     * A free text natural language description of the charge item definition
     * from a consumer's perspective.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs
     * (insurance plans, studies, ...) and may be used to assist with
     * indexing and searching for appropriate charge item definition
     * instances.
     */
    public java.util.List<UsageContext> useContext() {
        return getList(UsageContext.class, FhirPropertyNames.PROPERTY_USE_CONTEXT);
    }

    /**
     * A legal or geographic region in which the charge item definition is
     * intended to be used.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_JURISDICTION);
    }

    /**
     * A copyright statement relating to the charge item definition and/or
     * its contents. Copyright statements are generally legal restrictions on
     * the use and publishing of the charge item definition.
     */
    public String copyright() {
        return getString(FhirPropertyNames.PROPERTY_COPYRIGHT);
    }

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for
     * usage.
     */
    public java.time.LocalDate approvalDate() {
        return getLocalDate(FhirPropertyNames.PROPERTY_APPROVAL_DATE);
    }

    /**
     * The date on which the resource content was last reviewed. Review
     * happens periodically after approval but does not change the original
     * approval date.
     */
    public java.time.LocalDate lastReviewDate() {
        return getLocalDate(FhirPropertyNames.PROPERTY_LAST_REVIEW_DATE);
    }

    /**
     * The period during which the charge item definition content was or is
     * planned to be in active use.
     */
    public Period effectivePeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD);
    }

    /**
     * The defined billing details in this resource pertain to the given
     * billing code.
     */
    public CodeableConcept code() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
    }

    /**
     * The defined billing details in this resource pertain to the given
     * product instance(s).
     */
    public java.util.List<Reference> instance() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_INSTANCE);
    }

    /**
     * Expressions that describe applicability criteria for the billing code.
     */
    public java.util.List<ChargeItemDefinitionApplicability> applicability() {
        return getList(ChargeItemDefinitionApplicability.class, FhirPropertyNames.PROPERTY_APPLICABILITY);
    }

    /**
     * Group of properties which are applicable under the same conditions. If
     * no applicability rules are established for the group, then all
     * properties always apply.
     */
    public java.util.List<ChargeItemDefinitionPropertyGroup> propertyGroup() {
        return getList(ChargeItemDefinitionPropertyGroup.class, FhirPropertyNames.PROPERTY_PROPERTY_GROUP);
    }

    public static final class Builder extends DomainResource.Builder<ChargeItemDefinition, ChargeItemDefinition.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder url(final java.net.URI url) {
            b.add(FhirPropertyNames.PROPERTY_URL, url.toString());
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder version(final String version) {
            b.add(FhirPropertyNames.PROPERTY_VERSION, version);
            return this;
        }

        public Builder title(final String title) {
            b.add(FhirPropertyNames.PROPERTY_TITLE, title);
            return this;
        }

        public Builder derivedFromUri(final java.util.List<java.net.URI> derivedFromUri) {
            b.add(FhirPropertyNames.PROPERTY_DERIVED_FROM_URI, FhirObject.toUriArray(derivedFromUri));
            return this;
        }

        public Builder partOf(final java.util.List<String> partOf) {
            b.add(FhirPropertyNames.PROPERTY_PART_OF, FhirObject.toStringArray(partOf));
            return this;
        }

        public Builder replaces(final java.util.List<String> replaces) {
            b.add(FhirPropertyNames.PROPERTY_REPLACES, FhirObject.toStringArray(replaces));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder experimental(final Boolean experimental) {
            b.add(FhirPropertyNames.PROPERTY_EXPERIMENTAL, experimental);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder publisher(final String publisher) {
            b.add(FhirPropertyNames.PROPERTY_PUBLISHER, publisher);
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(FhirPropertyNames.PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder useContext(final java.util.List<UsageContext> useContext) {
            b.add(FhirPropertyNames.PROPERTY_USE_CONTEXT, FhirObject.toArray(useContext));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(FhirPropertyNames.PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder copyright(final String copyright) {
            b.add(FhirPropertyNames.PROPERTY_COPYRIGHT, copyright);
            return this;
        }

        public Builder approvalDate(final java.time.LocalDate approvalDate) {
            b.add(FhirPropertyNames.PROPERTY_APPROVAL_DATE, approvalDate.toString());
            return this;
        }

        public Builder lastReviewDate(final java.time.LocalDate lastReviewDate) {
            b.add(FhirPropertyNames.PROPERTY_LAST_REVIEW_DATE, lastReviewDate.toString());
            return this;
        }

        public Builder effectivePeriod(final Period effectivePeriod) {
            b.add(FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD, effectivePeriod);
            return this;
        }

        public Builder code(final CodeableConcept code) {
            b.add(FhirPropertyNames.PROPERTY_CODE, code);
            return this;
        }

        public Builder instance(final java.util.List<Reference> instance) {
            b.add(FhirPropertyNames.PROPERTY_INSTANCE, FhirObject.toArray(instance));
            return this;
        }

        public Builder applicability(final java.util.List<ChargeItemDefinitionApplicability> applicability) {
            b.add(FhirPropertyNames.PROPERTY_APPLICABILITY, FhirObject.toArray(applicability));
            return this;
        }

        public Builder propertyGroup(final java.util.List<ChargeItemDefinitionPropertyGroup> propertyGroup) {
            b.add(FhirPropertyNames.PROPERTY_PROPERTY_GROUP, FhirObject.toArray(propertyGroup));
            return this;
        }

        public ChargeItemDefinition build() {
            return new ChargeItemDefinition(b.build());
        }
    }

    /**
     * The ChargeItemDefinition resource provides the properties that apply
     * to the (billing) codes necessary to calculate costs and prices. The
     * properties may differ largely depending on type and realm, therefore
     * this resource gives only a rough structure and requires profiling for
     * each type of billing code system.
     */
    public static class ChargeItemDefinitionApplicability extends FhirObject {
        public static final String RESOURCE_TYPE = "ChargeItemDefinitionApplicability";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ChargeItemDefinitionApplicability(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A brief, natural language description of the condition that
         * effectively communicates the intended semantics.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * The media type of the language for the expression, e.g. &quot;text/cql&quot; for
         * Clinical Query Language expressions or &quot;text/fhirpath&quot; for FHIRPath
         * expressions.
         */
        public String language() {
            return getString(FhirPropertyNames.PROPERTY_LANGUAGE);
        }

        /**
         * An expression that returns true or false, indicating whether the
         * condition is satisfied. When using FHIRPath expressions, the %context
         * environment variable must be replaced at runtime with the ChargeItem
         * resource to which this definition is applied.
         */
        public String expression() {
            return getString(FhirPropertyNames.PROPERTY_EXPRESSION);
        }

        public static final class Builder extends FhirObject.Builder<ChargeItemDefinitionApplicability, ChargeItemDefinitionApplicability.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder language(final String language) {
                b.add(FhirPropertyNames.PROPERTY_LANGUAGE, language);
                return this;
            }

            public Builder expression(final String expression) {
                b.add(FhirPropertyNames.PROPERTY_EXPRESSION, expression);
                return this;
            }

            public ChargeItemDefinitionApplicability build() {
                return new ChargeItemDefinitionApplicability(b.build());
            }
        }
    }

    /**
     * The ChargeItemDefinition resource provides the properties that apply
     * to the (billing) codes necessary to calculate costs and prices. The
     * properties may differ largely depending on type and realm, therefore
     * this resource gives only a rough structure and requires profiling for
     * each type of billing code system.
     */
    public static class ChargeItemDefinitionPriceComponent extends FhirObject {
        public static final String RESOURCE_TYPE = "ChargeItemDefinitionPriceComponent";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ChargeItemDefinitionPriceComponent(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * This code identifies the type of the component.
         */
        public String type() {
            return getString(FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * A code that identifies the component. Codes may be used to
         * differentiate between kinds of taxes, surcharges, discounts etc.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * The factor that has been applied on the base price for calculating
         * this component.
         */
        public Double factor() {
            return data.getJsonNumber(FhirPropertyNames.PROPERTY_FACTOR).doubleValue();
        }

        /**
         * The amount calculated for this component.
         */
        public Money amount() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_AMOUNT);
        }

        public static final class Builder extends FhirObject.Builder<ChargeItemDefinitionPriceComponent, ChargeItemDefinitionPriceComponent.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final String type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public Builder factor(final Double factor) {
                b.add(FhirPropertyNames.PROPERTY_FACTOR, factor);
                return this;
            }

            public Builder amount(final Money amount) {
                b.add(FhirPropertyNames.PROPERTY_AMOUNT, amount);
                return this;
            }

            public ChargeItemDefinitionPriceComponent build() {
                return new ChargeItemDefinitionPriceComponent(b.build());
            }
        }
    }

    /**
     * The ChargeItemDefinition resource provides the properties that apply
     * to the (billing) codes necessary to calculate costs and prices. The
     * properties may differ largely depending on type and realm, therefore
     * this resource gives only a rough structure and requires profiling for
     * each type of billing code system.
     */
    public static class ChargeItemDefinitionPropertyGroup extends FhirObject {
        public static final String RESOURCE_TYPE = "ChargeItemDefinitionPropertyGroup";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ChargeItemDefinitionPropertyGroup(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Expressions that describe applicability criteria for the
         * priceComponent.
         */
        public java.util.List<ChargeItemDefinitionApplicability> applicability() {
            return getList(ChargeItemDefinitionApplicability.class, FhirPropertyNames.PROPERTY_APPLICABILITY);
        }

        /**
         * The price for a ChargeItem may be calculated as a base price with
         * surcharges/deductions that apply in certain conditions. A
         * ChargeItemDefinition resource that defines the prices, factors and
         * conditions that apply to a billing code is currently under
         * development. The priceComponent element can be used to offer
         * transparency to the recipient of the Invoice of how the prices have
         * been calculated.
         */
        public java.util.List<ChargeItemDefinitionPriceComponent> priceComponent() {
            return getList(ChargeItemDefinitionPriceComponent.class, FhirPropertyNames.PROPERTY_PRICE_COMPONENT);
        }

        public static final class Builder extends FhirObject.Builder<ChargeItemDefinitionPropertyGroup, ChargeItemDefinitionPropertyGroup.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder applicability(final java.util.List<ChargeItemDefinitionApplicability> applicability) {
                b.add(FhirPropertyNames.PROPERTY_APPLICABILITY, FhirObject.toArray(applicability));
                return this;
            }

            public Builder priceComponent(final java.util.List<ChargeItemDefinitionPriceComponent> priceComponent) {
                b.add(FhirPropertyNames.PROPERTY_PRICE_COMPONENT, FhirObject.toArray(priceComponent));
                return this;
            }

            public ChargeItemDefinitionPropertyGroup build() {
                return new ChargeItemDefinitionPropertyGroup(b.build());
            }
        }
    }
}
