/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A signature along with supporting context. The signature may be a
 * digital signature that is cryptographic in nature, or some other
 * signature acceptable to the domain. This other signature may be as
 * simple as a graphical image representing a hand-written signature, or
 * a signature ceremony Different signature approaches have different
 * utilities.
 */
public class Signature extends FhirObject {
    public static final String RESOURCE_TYPE = "Signature";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Signature(final JsonObject data) {
        super(data);
    }

    /**
     * Unique id for the element within a resource (for internal references).
     * This may be any string value that does not contain spaces.
     */
    public String id() {
        return getString(FhirPropertyNames.PROPERTY_ID);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the element. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
    }

    /**
     * An indication of the reason that the entity signed this document. This
     * may be explicitly included as part of the signature information and
     * can be used when determining accountability for various actions
     * concerning the document.
     */
    public java.util.List<Coding> type() {
        return getList(Coding.class, FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * When the digital signature was signed.
     */
    public java.time.Instant when() {
        return getInstant(FhirPropertyNames.PROPERTY_WHEN);
    }

    /**
     * A reference to an application-usable description of the identity that
     * signed  (e.g. the signature used their private key).
     */
    public Reference who() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_WHO);
    }

    /**
     * A reference to an application-usable description of the identity that
     * is represented by the signature.
     */
    public Reference onBehalfOf() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ON_BEHALF_OF);
    }

    /**
     * A mime type that indicates the technical format of the target
     * resources signed by the signature.
     */
    public String targetFormat() {
        return getString(FhirPropertyNames.PROPERTY_TARGET_FORMAT);
    }

    /**
     * A mime type that indicates the technical format of the signature.
     * Important mime types are application/signature+xml for X ML DigSig,
     * application/jose for JWS, and image/* for a graphical image of a
     * signature, etc.
     */
    public String sigFormat() {
        return getString(FhirPropertyNames.PROPERTY_SIG_FORMAT);
    }

    /**
     * The base64 encoding of the Signature content. When signature is not
     * recorded electronically this element would be empty.
     */
    public String data() {
        return getString(FhirPropertyNames.PROPERTY_DATA);
    }

    public static final class Builder extends FhirObject.Builder<Signature, Signature.Builder> {

        private Builder() {
            super();
        }

        private Builder(final JsonObject data) {
            super(data);
        }

        public Builder id(final String id) {
            b.add(FhirPropertyNames.PROPERTY_ID, id);
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder type(final java.util.List<Coding> type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, FhirObject.toArray(type));
            return this;
        }

        public Builder when(final java.time.Instant when) {
            b.add(FhirPropertyNames.PROPERTY_WHEN, when.toString());
            return this;
        }

        public Builder who(final Reference who) {
            b.add(FhirPropertyNames.PROPERTY_WHO, who);
            return this;
        }

        public Builder onBehalfOf(final Reference onBehalfOf) {
            b.add(FhirPropertyNames.PROPERTY_ON_BEHALF_OF, onBehalfOf);
            return this;
        }

        public Builder targetFormat(final String targetFormat) {
            b.add(FhirPropertyNames.PROPERTY_TARGET_FORMAT, targetFormat);
            return this;
        }

        public Builder sigFormat(final String sigFormat) {
            b.add(FhirPropertyNames.PROPERTY_SIG_FORMAT, sigFormat);
            return this;
        }

        public Builder data(final String data) {
            b.add(FhirPropertyNames.PROPERTY_DATA, data);
            return this;
        }

        public Signature build() {
            return new Signature(b.build());
        }
    }
}
