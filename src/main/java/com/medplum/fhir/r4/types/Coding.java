/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A reference to a code defined by a terminology system.
 */
public class Coding extends FhirObject {
    public static final String RESOURCE_TYPE = "Coding";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Coding(final JsonObject data) {
        super(data);
    }

    /**
     * Unique id for the element within a resource (for internal references).
     * This may be any string value that does not contain spaces.
     */
    public String id() {
        return getString(FhirPropertyNames.PROPERTY_ID);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the element. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
    }

    /**
     * The identification of the code system that defines the meaning of the
     * symbol in the code.
     */
    public java.net.URI system() {
        return getUri(FhirPropertyNames.PROPERTY_SYSTEM);
    }

    /**
     * The version of the code system which was used when choosing this code.
     * Note that a well-maintained code system does not need the version
     * reported, because the meaning of codes is consistent across versions.
     * However this cannot consistently be assured, and when the meaning is
     * not guaranteed to be consistent, the version SHOULD be exchanged.
     */
    public String version() {
        return getString(FhirPropertyNames.PROPERTY_VERSION);
    }

    /**
     * A symbol in syntax defined by the system. The symbol may be a
     * predefined code or an expression in a syntax defined by the coding
     * system (e.g. post-coordination).
     */
    public String code() {
        return getString(FhirPropertyNames.PROPERTY_CODE);
    }

    /**
     * A representation of the meaning of the code in the system, following
     * the rules of the system.
     */
    public String display() {
        return getString(FhirPropertyNames.PROPERTY_DISPLAY);
    }

    /**
     * Indicates that this coding was chosen by a user directly - e.g. off a
     * pick list of available items (codes or displays).
     */
    public Boolean userSelected() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_USER_SELECTED);
    }

    public static final class Builder extends FhirObject.Builder<Coding, Coding.Builder> {

        private Builder() {
            super();
        }

        private Builder(final JsonObject data) {
            super(data);
        }

        public Builder id(final String id) {
            b.add(FhirPropertyNames.PROPERTY_ID, id);
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder system(final java.net.URI system) {
            b.add(FhirPropertyNames.PROPERTY_SYSTEM, system.toString());
            return this;
        }

        public Builder version(final String version) {
            b.add(FhirPropertyNames.PROPERTY_VERSION, version);
            return this;
        }

        public Builder code(final String code) {
            b.add(FhirPropertyNames.PROPERTY_CODE, code);
            return this;
        }

        public Builder display(final String display) {
            b.add(FhirPropertyNames.PROPERTY_DISPLAY, display);
            return this;
        }

        public Builder userSelected(final Boolean userSelected) {
            b.add(FhirPropertyNames.PROPERTY_USER_SELECTED, userSelected);
            return this;
        }

        public Coding build() {
            return new Coding(b.build());
        }
    }
}
