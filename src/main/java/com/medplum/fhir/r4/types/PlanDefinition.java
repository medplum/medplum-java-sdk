/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * This resource allows for the definition of various types of plans as a
 * sharable, consumable, and executable artifact. The resource is general
 * enough to support the description of a broad range of clinical
 * artifacts such as clinical decision support rules, order sets and
 * protocols.
 */
public class PlanDefinition extends DomainResource {
    public static final String RESOURCE_TYPE = "PlanDefinition";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public PlanDefinition(final JsonObject data) {
        super(data);
    }

    /**
     * An absolute URI that is used to identify this plan definition when it
     * is referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative
     * instance of this plan definition is (or will be) published. This URL
     * can be the target of a canonical reference. It SHALL remain the same
     * when the plan definition is stored on different servers.
     */
    public java.net.URI url() {
        return getUri(FhirPropertyNames.PROPERTY_URL);
    }

    /**
     * A formal identifier that is used to identify this plan definition when
     * it is represented in other formats, or referenced in a specification,
     * model, design or an instance.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The identifier that is used to identify this version of the plan
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the plan definition
     * author and is not expected to be globally unique. For example, it
     * might be a timestamp (e.g. yyyymmdd) if a managed version is not
     * available. There is also no expectation that versions can be placed in
     * a lexicographical sequence. To provide a version consistent with the
     * Decision Support Service specification, use the format
     * Major.Minor.Revision (e.g. 1.0.0). For more information on versioning
     * knowledge assets, refer to the Decision Support Service specification.
     * Note that a version is required for non-experimental active artifacts.
     */
    public String version() {
        return getString(FhirPropertyNames.PROPERTY_VERSION);
    }

    /**
     * A natural language name identifying the plan definition. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    public String name() {
        return getString(FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * A short, descriptive, user-friendly title for the plan definition.
     */
    public String title() {
        return getString(FhirPropertyNames.PROPERTY_TITLE);
    }

    /**
     * An explanatory or alternate title for the plan definition giving
     * additional information about its content.
     */
    public String subtitle() {
        return getString(FhirPropertyNames.PROPERTY_SUBTITLE);
    }

    /**
     * A high-level category for the plan definition that distinguishes the
     * kinds of systems that would be interested in the plan definition.
     */
    public CodeableConcept type() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * The status of this plan definition. Enables tracking the life-cycle of
     * the content.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * A Boolean value to indicate that this plan definition is authored for
     * testing purposes (or education/evaluation/marketing) and is not
     * intended to be used for genuine usage.
     */
    public Boolean experimental() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_EXPERIMENTAL);
    }

    /**
     * A code or group definition that describes the intended subject of the
     * plan definition.
     */
    public CodeableConcept subjectCodeableConcept() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_SUBJECT_CODEABLE_CONCEPT);
    }

    /**
     * A code or group definition that describes the intended subject of the
     * plan definition.
     */
    public Reference subjectReference() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT_REFERENCE);
    }

    /**
     * The date  (and optionally time) when the plan definition was
     * published. The date must change when the business version changes and
     * it must change if the status code changes. In addition, it should
     * change when the substantive content of the plan definition changes.
     */
    public java.time.Instant date() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE);
    }

    /**
     * The name of the organization or individual that published the plan
     * definition.
     */
    public String publisher() {
        return getString(FhirPropertyNames.PROPERTY_PUBLISHER);
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_CONTACT);
    }

    /**
     * A free text natural language description of the plan definition from a
     * consumer's perspective.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs
     * (insurance plans, studies, ...) and may be used to assist with
     * indexing and searching for appropriate plan definition instances.
     */
    public java.util.List<UsageContext> useContext() {
        return getList(UsageContext.class, FhirPropertyNames.PROPERTY_USE_CONTEXT);
    }

    /**
     * A legal or geographic region in which the plan definition is intended
     * to be used.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_JURISDICTION);
    }

    /**
     * Explanation of why this plan definition is needed and why it has been
     * designed as it has.
     */
    public String purpose() {
        return getString(FhirPropertyNames.PROPERTY_PURPOSE);
    }

    /**
     * A detailed description of how the plan definition is used from a
     * clinical perspective.
     */
    public String usage() {
        return getString(FhirPropertyNames.PROPERTY_USAGE);
    }

    /**
     * A copyright statement relating to the plan definition and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the plan definition.
     */
    public String copyright() {
        return getString(FhirPropertyNames.PROPERTY_COPYRIGHT);
    }

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for
     * usage.
     */
    public java.time.LocalDate approvalDate() {
        return getLocalDate(FhirPropertyNames.PROPERTY_APPROVAL_DATE);
    }

    /**
     * The date on which the resource content was last reviewed. Review
     * happens periodically after approval but does not change the original
     * approval date.
     */
    public java.time.LocalDate lastReviewDate() {
        return getLocalDate(FhirPropertyNames.PROPERTY_LAST_REVIEW_DATE);
    }

    /**
     * The period during which the plan definition content was or is planned
     * to be in active use.
     */
    public Period effectivePeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD);
    }

    /**
     * Descriptive topics related to the content of the plan definition.
     * Topics provide a high-level categorization of the definition that can
     * be useful for filtering and searching.
     */
    public java.util.List<CodeableConcept> topic() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_TOPIC);
    }

    /**
     * An individiual or organization primarily involved in the creation and
     * maintenance of the content.
     */
    public java.util.List<ContactDetail> author() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_AUTHOR);
    }

    /**
     * An individual or organization primarily responsible for internal
     * coherence of the content.
     */
    public java.util.List<ContactDetail> editor() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_EDITOR);
    }

    /**
     * An individual or organization primarily responsible for review of some
     * aspect of the content.
     */
    public java.util.List<ContactDetail> reviewer() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_REVIEWER);
    }

    /**
     * An individual or organization responsible for officially endorsing the
     * content for use in some setting.
     */
    public java.util.List<ContactDetail> endorser() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_ENDORSER);
    }

    /**
     * Related artifacts such as additional documentation, justification, or
     * bibliographic references.
     */
    public java.util.List<RelatedArtifact> relatedArtifact() {
        return getList(RelatedArtifact.class, FhirPropertyNames.PROPERTY_RELATED_ARTIFACT);
    }

    /**
     * A reference to a Library resource containing any formal logic used by
     * the plan definition.
     */
    public java.util.List<String> library() {
        return getList(String.class, FhirPropertyNames.PROPERTY_LIBRARY);
    }

    /**
     * Goals that describe what the activities within the plan are intended
     * to achieve. For example, weight loss, restoring an activity of daily
     * living, obtaining herd immunity via immunization, meeting a process
     * improvement objective, etc.
     */
    public java.util.List<PlanDefinitionGoal> goal() {
        return getList(PlanDefinitionGoal.class, FhirPropertyNames.PROPERTY_GOAL);
    }

    /**
     * An action or group of actions to be taken as part of the plan.
     */
    public java.util.List<PlanDefinitionAction> action() {
        return getList(PlanDefinitionAction.class, FhirPropertyNames.PROPERTY_ACTION);
    }

    public static final class Builder extends DomainResource.Builder<PlanDefinition, PlanDefinition.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder url(final java.net.URI url) {
            b.add(FhirPropertyNames.PROPERTY_URL, url.toString());
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder version(final String version) {
            b.add(FhirPropertyNames.PROPERTY_VERSION, version);
            return this;
        }

        public Builder name(final String name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, name);
            return this;
        }

        public Builder title(final String title) {
            b.add(FhirPropertyNames.PROPERTY_TITLE, title);
            return this;
        }

        public Builder subtitle(final String subtitle) {
            b.add(FhirPropertyNames.PROPERTY_SUBTITLE, subtitle);
            return this;
        }

        public Builder type(final CodeableConcept type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, type);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder experimental(final Boolean experimental) {
            b.add(FhirPropertyNames.PROPERTY_EXPERIMENTAL, experimental);
            return this;
        }

        public Builder subjectCodeableConcept(final CodeableConcept subjectCodeableConcept) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT_CODEABLE_CONCEPT, subjectCodeableConcept);
            return this;
        }

        public Builder subjectReference(final Reference subjectReference) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT_REFERENCE, subjectReference);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder publisher(final String publisher) {
            b.add(FhirPropertyNames.PROPERTY_PUBLISHER, publisher);
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(FhirPropertyNames.PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder useContext(final java.util.List<UsageContext> useContext) {
            b.add(FhirPropertyNames.PROPERTY_USE_CONTEXT, FhirObject.toArray(useContext));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(FhirPropertyNames.PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder purpose(final String purpose) {
            b.add(FhirPropertyNames.PROPERTY_PURPOSE, purpose);
            return this;
        }

        public Builder usage(final String usage) {
            b.add(FhirPropertyNames.PROPERTY_USAGE, usage);
            return this;
        }

        public Builder copyright(final String copyright) {
            b.add(FhirPropertyNames.PROPERTY_COPYRIGHT, copyright);
            return this;
        }

        public Builder approvalDate(final java.time.LocalDate approvalDate) {
            b.add(FhirPropertyNames.PROPERTY_APPROVAL_DATE, approvalDate.toString());
            return this;
        }

        public Builder lastReviewDate(final java.time.LocalDate lastReviewDate) {
            b.add(FhirPropertyNames.PROPERTY_LAST_REVIEW_DATE, lastReviewDate.toString());
            return this;
        }

        public Builder effectivePeriod(final Period effectivePeriod) {
            b.add(FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD, effectivePeriod);
            return this;
        }

        public Builder topic(final java.util.List<CodeableConcept> topic) {
            b.add(FhirPropertyNames.PROPERTY_TOPIC, FhirObject.toArray(topic));
            return this;
        }

        public Builder author(final java.util.List<ContactDetail> author) {
            b.add(FhirPropertyNames.PROPERTY_AUTHOR, FhirObject.toArray(author));
            return this;
        }

        public Builder editor(final java.util.List<ContactDetail> editor) {
            b.add(FhirPropertyNames.PROPERTY_EDITOR, FhirObject.toArray(editor));
            return this;
        }

        public Builder reviewer(final java.util.List<ContactDetail> reviewer) {
            b.add(FhirPropertyNames.PROPERTY_REVIEWER, FhirObject.toArray(reviewer));
            return this;
        }

        public Builder endorser(final java.util.List<ContactDetail> endorser) {
            b.add(FhirPropertyNames.PROPERTY_ENDORSER, FhirObject.toArray(endorser));
            return this;
        }

        public Builder relatedArtifact(final java.util.List<RelatedArtifact> relatedArtifact) {
            b.add(FhirPropertyNames.PROPERTY_RELATED_ARTIFACT, FhirObject.toArray(relatedArtifact));
            return this;
        }

        public Builder library(final java.util.List<String> library) {
            b.add(FhirPropertyNames.PROPERTY_LIBRARY, FhirObject.toStringArray(library));
            return this;
        }

        public Builder goal(final java.util.List<PlanDefinitionGoal> goal) {
            b.add(FhirPropertyNames.PROPERTY_GOAL, FhirObject.toArray(goal));
            return this;
        }

        public Builder action(final java.util.List<PlanDefinitionAction> action) {
            b.add(FhirPropertyNames.PROPERTY_ACTION, FhirObject.toArray(action));
            return this;
        }

        public PlanDefinition build() {
            return new PlanDefinition(b.build());
        }
    }

    /**
     * This resource allows for the definition of various types of plans as a
     * sharable, consumable, and executable artifact. The resource is general
     * enough to support the description of a broad range of clinical
     * artifacts such as clinical decision support rules, order sets and
     * protocols.
     */
    public static class PlanDefinitionAction extends FhirObject {
        public static final String RESOURCE_TYPE = "PlanDefinitionAction";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public PlanDefinitionAction(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A user-visible prefix for the action.
         */
        public String prefix() {
            return getString(FhirPropertyNames.PROPERTY_PREFIX);
        }

        /**
         * The title of the action displayed to a user.
         */
        public String title() {
            return getString(FhirPropertyNames.PROPERTY_TITLE);
        }

        /**
         * A brief description of the action used to provide a summary to display
         * to the user.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * A text equivalent of the action to be performed. This provides a
         * human-interpretable description of the action when the definition is
         * consumed by a system that might not be capable of interpreting it
         * dynamically.
         */
        public String textEquivalent() {
            return getString(FhirPropertyNames.PROPERTY_TEXT_EQUIVALENT);
        }

        /**
         * Indicates how quickly the action should be addressed with respect to
         * other actions.
         */
        public String priority() {
            return getString(FhirPropertyNames.PROPERTY_PRIORITY);
        }

        /**
         * A code that provides meaning for the action or action group. For
         * example, a section may have a LOINC code for the section of a
         * documentation template.
         */
        public java.util.List<CodeableConcept> code() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        /**
         * A description of why this action is necessary or appropriate.
         */
        public java.util.List<CodeableConcept> reason() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_REASON);
        }

        /**
         * Didactic or other informational resources associated with the action
         * that can be provided to the CDS recipient. Information resources can
         * include inline text commentary and links to web resources.
         */
        public java.util.List<RelatedArtifact> documentation() {
            return getList(RelatedArtifact.class, FhirPropertyNames.PROPERTY_DOCUMENTATION);
        }

        /**
         * Identifies goals that this action supports. The reference must be to a
         * goal element defined within this plan definition.
         */
        public java.util.List<String> goalId() {
            return getList(String.class, FhirPropertyNames.PROPERTY_GOAL_ID);
        }

        /**
         * A code or group definition that describes the intended subject of the
         * action and its children, if any.
         */
        public CodeableConcept subjectCodeableConcept() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_SUBJECT_CODEABLE_CONCEPT);
        }

        /**
         * A code or group definition that describes the intended subject of the
         * action and its children, if any.
         */
        public Reference subjectReference() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT_REFERENCE);
        }

        /**
         * A description of when the action should be triggered.
         */
        public java.util.List<TriggerDefinition> trigger() {
            return getList(TriggerDefinition.class, FhirPropertyNames.PROPERTY_TRIGGER);
        }

        /**
         * An expression that describes applicability criteria or start/stop
         * conditions for the action.
         */
        public java.util.List<PlanDefinitionCondition> condition() {
            return getList(PlanDefinitionCondition.class, FhirPropertyNames.PROPERTY_CONDITION);
        }

        /**
         * Defines input data requirements for the action.
         */
        public java.util.List<DataRequirement> input() {
            return getList(DataRequirement.class, FhirPropertyNames.PROPERTY_INPUT);
        }

        /**
         * Defines the outputs of the action, if any.
         */
        public java.util.List<DataRequirement> output() {
            return getList(DataRequirement.class, FhirPropertyNames.PROPERTY_OUTPUT);
        }

        /**
         * A relationship to another action such as &quot;before&quot; or &quot;30-60 minutes
         * after start of&quot;.
         */
        public java.util.List<PlanDefinitionRelatedAction> relatedAction() {
            return getList(PlanDefinitionRelatedAction.class, FhirPropertyNames.PROPERTY_RELATED_ACTION);
        }

        /**
         * An optional value describing when the action should be performed.
         */
        public String timingDateTime() {
            return getString(FhirPropertyNames.PROPERTY_TIMING_DATE_TIME);
        }

        /**
         * An optional value describing when the action should be performed.
         */
        public Age timingAge() {
            return getObject(Age.class, FhirPropertyNames.PROPERTY_TIMING_AGE);
        }

        /**
         * An optional value describing when the action should be performed.
         */
        public Period timingPeriod() {
            return getObject(Period.class, FhirPropertyNames.PROPERTY_TIMING_PERIOD);
        }

        /**
         * An optional value describing when the action should be performed.
         */
        public Duration timingDuration() {
            return getObject(Duration.class, FhirPropertyNames.PROPERTY_TIMING_DURATION);
        }

        /**
         * An optional value describing when the action should be performed.
         */
        public Range timingRange() {
            return getObject(Range.class, FhirPropertyNames.PROPERTY_TIMING_RANGE);
        }

        /**
         * An optional value describing when the action should be performed.
         */
        public Timing timingTiming() {
            return getObject(Timing.class, FhirPropertyNames.PROPERTY_TIMING_TIMING);
        }

        /**
         * Indicates who should participate in performing the action described.
         */
        public java.util.List<PlanDefinitionParticipant> participant() {
            return getList(PlanDefinitionParticipant.class, FhirPropertyNames.PROPERTY_PARTICIPANT);
        }

        /**
         * The type of action to perform (create, update, remove).
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Defines the grouping behavior for the action and its children.
         */
        public String groupingBehavior() {
            return getString(FhirPropertyNames.PROPERTY_GROUPING_BEHAVIOR);
        }

        /**
         * Defines the selection behavior for the action and its children.
         */
        public String selectionBehavior() {
            return getString(FhirPropertyNames.PROPERTY_SELECTION_BEHAVIOR);
        }

        /**
         * Defines the required behavior for the action.
         */
        public String requiredBehavior() {
            return getString(FhirPropertyNames.PROPERTY_REQUIRED_BEHAVIOR);
        }

        /**
         * Defines whether the action should usually be preselected.
         */
        public String precheckBehavior() {
            return getString(FhirPropertyNames.PROPERTY_PRECHECK_BEHAVIOR);
        }

        /**
         * Defines whether the action can be selected multiple times.
         */
        public String cardinalityBehavior() {
            return getString(FhirPropertyNames.PROPERTY_CARDINALITY_BEHAVIOR);
        }

        /**
         * A reference to an ActivityDefinition that describes the action to be
         * taken in detail, or a PlanDefinition that describes a series of
         * actions to be taken.
         */
        public String definitionCanonical() {
            return getString(FhirPropertyNames.PROPERTY_DEFINITION_CANONICAL);
        }

        /**
         * A reference to an ActivityDefinition that describes the action to be
         * taken in detail, or a PlanDefinition that describes a series of
         * actions to be taken.
         */
        public String definitionUri() {
            return getString(FhirPropertyNames.PROPERTY_DEFINITION_URI);
        }

        /**
         * A reference to a StructureMap resource that defines a transform that
         * can be executed to produce the intent resource using the
         * ActivityDefinition instance as the input.
         */
        public String transform() {
            return getString(FhirPropertyNames.PROPERTY_TRANSFORM);
        }

        /**
         * Customizations that should be applied to the statically defined
         * resource. For example, if the dosage of a medication must be computed
         * based on the patient's weight, a customization would be used to
         * specify an expression that calculated the weight, and the path on the
         * resource that would contain the result.
         */
        public java.util.List<PlanDefinitionDynamicValue> dynamicValue() {
            return getList(PlanDefinitionDynamicValue.class, FhirPropertyNames.PROPERTY_DYNAMIC_VALUE);
        }

        /**
         * Sub actions that are contained within the action. The behavior of this
         * action determines the functionality of the sub-actions. For example, a
         * selection behavior of at-most-one indicates that of the sub-actions,
         * at most one may be chosen as part of realizing the action definition.
         */
        public java.util.List<PlanDefinitionAction> action() {
            return getList(PlanDefinitionAction.class, FhirPropertyNames.PROPERTY_ACTION);
        }

        public static final class Builder extends FhirObject.Builder<PlanDefinitionAction, PlanDefinitionAction.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder prefix(final String prefix) {
                b.add(FhirPropertyNames.PROPERTY_PREFIX, prefix);
                return this;
            }

            public Builder title(final String title) {
                b.add(FhirPropertyNames.PROPERTY_TITLE, title);
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder textEquivalent(final String textEquivalent) {
                b.add(FhirPropertyNames.PROPERTY_TEXT_EQUIVALENT, textEquivalent);
                return this;
            }

            public Builder priority(final String priority) {
                b.add(FhirPropertyNames.PROPERTY_PRIORITY, priority);
                return this;
            }

            public Builder code(final java.util.List<CodeableConcept> code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, FhirObject.toArray(code));
                return this;
            }

            public Builder reason(final java.util.List<CodeableConcept> reason) {
                b.add(FhirPropertyNames.PROPERTY_REASON, FhirObject.toArray(reason));
                return this;
            }

            public Builder documentation(final java.util.List<RelatedArtifact> documentation) {
                b.add(FhirPropertyNames.PROPERTY_DOCUMENTATION, FhirObject.toArray(documentation));
                return this;
            }

            public Builder goalId(final java.util.List<String> goalId) {
                b.add(FhirPropertyNames.PROPERTY_GOAL_ID, FhirObject.toStringArray(goalId));
                return this;
            }

            public Builder subjectCodeableConcept(final CodeableConcept subjectCodeableConcept) {
                b.add(FhirPropertyNames.PROPERTY_SUBJECT_CODEABLE_CONCEPT, subjectCodeableConcept);
                return this;
            }

            public Builder subjectReference(final Reference subjectReference) {
                b.add(FhirPropertyNames.PROPERTY_SUBJECT_REFERENCE, subjectReference);
                return this;
            }

            public Builder trigger(final java.util.List<TriggerDefinition> trigger) {
                b.add(FhirPropertyNames.PROPERTY_TRIGGER, FhirObject.toArray(trigger));
                return this;
            }

            public Builder condition(final java.util.List<PlanDefinitionCondition> condition) {
                b.add(FhirPropertyNames.PROPERTY_CONDITION, FhirObject.toArray(condition));
                return this;
            }

            public Builder input(final java.util.List<DataRequirement> input) {
                b.add(FhirPropertyNames.PROPERTY_INPUT, FhirObject.toArray(input));
                return this;
            }

            public Builder output(final java.util.List<DataRequirement> output) {
                b.add(FhirPropertyNames.PROPERTY_OUTPUT, FhirObject.toArray(output));
                return this;
            }

            public Builder relatedAction(final java.util.List<PlanDefinitionRelatedAction> relatedAction) {
                b.add(FhirPropertyNames.PROPERTY_RELATED_ACTION, FhirObject.toArray(relatedAction));
                return this;
            }

            public Builder timingDateTime(final String timingDateTime) {
                b.add(FhirPropertyNames.PROPERTY_TIMING_DATE_TIME, timingDateTime);
                return this;
            }

            public Builder timingAge(final Age timingAge) {
                b.add(FhirPropertyNames.PROPERTY_TIMING_AGE, timingAge);
                return this;
            }

            public Builder timingPeriod(final Period timingPeriod) {
                b.add(FhirPropertyNames.PROPERTY_TIMING_PERIOD, timingPeriod);
                return this;
            }

            public Builder timingDuration(final Duration timingDuration) {
                b.add(FhirPropertyNames.PROPERTY_TIMING_DURATION, timingDuration);
                return this;
            }

            public Builder timingRange(final Range timingRange) {
                b.add(FhirPropertyNames.PROPERTY_TIMING_RANGE, timingRange);
                return this;
            }

            public Builder timingTiming(final Timing timingTiming) {
                b.add(FhirPropertyNames.PROPERTY_TIMING_TIMING, timingTiming);
                return this;
            }

            public Builder participant(final java.util.List<PlanDefinitionParticipant> participant) {
                b.add(FhirPropertyNames.PROPERTY_PARTICIPANT, FhirObject.toArray(participant));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder groupingBehavior(final String groupingBehavior) {
                b.add(FhirPropertyNames.PROPERTY_GROUPING_BEHAVIOR, groupingBehavior);
                return this;
            }

            public Builder selectionBehavior(final String selectionBehavior) {
                b.add(FhirPropertyNames.PROPERTY_SELECTION_BEHAVIOR, selectionBehavior);
                return this;
            }

            public Builder requiredBehavior(final String requiredBehavior) {
                b.add(FhirPropertyNames.PROPERTY_REQUIRED_BEHAVIOR, requiredBehavior);
                return this;
            }

            public Builder precheckBehavior(final String precheckBehavior) {
                b.add(FhirPropertyNames.PROPERTY_PRECHECK_BEHAVIOR, precheckBehavior);
                return this;
            }

            public Builder cardinalityBehavior(final String cardinalityBehavior) {
                b.add(FhirPropertyNames.PROPERTY_CARDINALITY_BEHAVIOR, cardinalityBehavior);
                return this;
            }

            public Builder definitionCanonical(final String definitionCanonical) {
                b.add(FhirPropertyNames.PROPERTY_DEFINITION_CANONICAL, definitionCanonical);
                return this;
            }

            public Builder definitionUri(final String definitionUri) {
                b.add(FhirPropertyNames.PROPERTY_DEFINITION_URI, definitionUri);
                return this;
            }

            public Builder transform(final String transform) {
                b.add(FhirPropertyNames.PROPERTY_TRANSFORM, transform);
                return this;
            }

            public Builder dynamicValue(final java.util.List<PlanDefinitionDynamicValue> dynamicValue) {
                b.add(FhirPropertyNames.PROPERTY_DYNAMIC_VALUE, FhirObject.toArray(dynamicValue));
                return this;
            }

            public Builder action(final java.util.List<PlanDefinitionAction> action) {
                b.add(FhirPropertyNames.PROPERTY_ACTION, FhirObject.toArray(action));
                return this;
            }

            public PlanDefinitionAction build() {
                return new PlanDefinitionAction(b.build());
            }
        }
    }

    /**
     * This resource allows for the definition of various types of plans as a
     * sharable, consumable, and executable artifact. The resource is general
     * enough to support the description of a broad range of clinical
     * artifacts such as clinical decision support rules, order sets and
     * protocols.
     */
    public static class PlanDefinitionCondition extends FhirObject {
        public static final String RESOURCE_TYPE = "PlanDefinitionCondition";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public PlanDefinitionCondition(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The kind of condition.
         */
        public String kind() {
            return getString(FhirPropertyNames.PROPERTY_KIND);
        }

        /**
         * An expression that returns true or false, indicating whether the
         * condition is satisfied.
         */
        public Expression expression() {
            return getObject(Expression.class, FhirPropertyNames.PROPERTY_EXPRESSION);
        }

        public static final class Builder extends FhirObject.Builder<PlanDefinitionCondition, PlanDefinitionCondition.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder kind(final String kind) {
                b.add(FhirPropertyNames.PROPERTY_KIND, kind);
                return this;
            }

            public Builder expression(final Expression expression) {
                b.add(FhirPropertyNames.PROPERTY_EXPRESSION, expression);
                return this;
            }

            public PlanDefinitionCondition build() {
                return new PlanDefinitionCondition(b.build());
            }
        }
    }

    /**
     * This resource allows for the definition of various types of plans as a
     * sharable, consumable, and executable artifact. The resource is general
     * enough to support the description of a broad range of clinical
     * artifacts such as clinical decision support rules, order sets and
     * protocols.
     */
    public static class PlanDefinitionDynamicValue extends FhirObject {
        public static final String RESOURCE_TYPE = "PlanDefinitionDynamicValue";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public PlanDefinitionDynamicValue(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The path to the element to be customized. This is the path on the
         * resource that will hold the result of the calculation defined by the
         * expression. The specified path SHALL be a FHIRPath resolveable on the
         * specified target type of the ActivityDefinition, and SHALL consist
         * only of identifiers, constant indexers, and a restricted subset of
         * functions. The path is allowed to contain qualifiers (.) to traverse
         * sub-elements, as well as indexers ([x]) to traverse
         * multiple-cardinality sub-elements (see the [Simple FHIRPath
         * Profile](fhirpath.html#simple) for full details).
         */
        public String path() {
            return getString(FhirPropertyNames.PROPERTY_PATH);
        }

        /**
         * An expression specifying the value of the customized element.
         */
        public Expression expression() {
            return getObject(Expression.class, FhirPropertyNames.PROPERTY_EXPRESSION);
        }

        public static final class Builder extends FhirObject.Builder<PlanDefinitionDynamicValue, PlanDefinitionDynamicValue.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder path(final String path) {
                b.add(FhirPropertyNames.PROPERTY_PATH, path);
                return this;
            }

            public Builder expression(final Expression expression) {
                b.add(FhirPropertyNames.PROPERTY_EXPRESSION, expression);
                return this;
            }

            public PlanDefinitionDynamicValue build() {
                return new PlanDefinitionDynamicValue(b.build());
            }
        }
    }

    /**
     * This resource allows for the definition of various types of plans as a
     * sharable, consumable, and executable artifact. The resource is general
     * enough to support the description of a broad range of clinical
     * artifacts such as clinical decision support rules, order sets and
     * protocols.
     */
    public static class PlanDefinitionGoal extends FhirObject {
        public static final String RESOURCE_TYPE = "PlanDefinitionGoal";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public PlanDefinitionGoal(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Indicates a category the goal falls within.
         */
        public CodeableConcept category() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CATEGORY);
        }

        /**
         * Human-readable and/or coded description of a specific desired
         * objective of care, such as &quot;control blood pressure&quot; or &quot;negotiate an
         * obstacle course&quot; or &quot;dance with child at wedding&quot;.
         */
        public CodeableConcept description() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * Identifies the expected level of importance associated with
         * reaching/sustaining the defined goal.
         */
        public CodeableConcept priority() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_PRIORITY);
        }

        /**
         * The event after which the goal should begin being pursued.
         */
        public CodeableConcept start() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_START);
        }

        /**
         * Identifies problems, conditions, issues, or concerns the goal is
         * intended to address.
         */
        public java.util.List<CodeableConcept> addresses() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_ADDRESSES);
        }

        /**
         * Didactic or other informational resources associated with the goal
         * that provide further supporting information about the goal.
         * Information resources can include inline text commentary and links to
         * web resources.
         */
        public java.util.List<RelatedArtifact> documentation() {
            return getList(RelatedArtifact.class, FhirPropertyNames.PROPERTY_DOCUMENTATION);
        }

        /**
         * Indicates what should be done and within what timeframe.
         */
        public java.util.List<PlanDefinitionTarget> target() {
            return getList(PlanDefinitionTarget.class, FhirPropertyNames.PROPERTY_TARGET);
        }

        public static final class Builder extends FhirObject.Builder<PlanDefinitionGoal, PlanDefinitionGoal.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder category(final CodeableConcept category) {
                b.add(FhirPropertyNames.PROPERTY_CATEGORY, category);
                return this;
            }

            public Builder description(final CodeableConcept description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder priority(final CodeableConcept priority) {
                b.add(FhirPropertyNames.PROPERTY_PRIORITY, priority);
                return this;
            }

            public Builder start(final CodeableConcept start) {
                b.add(FhirPropertyNames.PROPERTY_START, start);
                return this;
            }

            public Builder addresses(final java.util.List<CodeableConcept> addresses) {
                b.add(FhirPropertyNames.PROPERTY_ADDRESSES, FhirObject.toArray(addresses));
                return this;
            }

            public Builder documentation(final java.util.List<RelatedArtifact> documentation) {
                b.add(FhirPropertyNames.PROPERTY_DOCUMENTATION, FhirObject.toArray(documentation));
                return this;
            }

            public Builder target(final java.util.List<PlanDefinitionTarget> target) {
                b.add(FhirPropertyNames.PROPERTY_TARGET, FhirObject.toArray(target));
                return this;
            }

            public PlanDefinitionGoal build() {
                return new PlanDefinitionGoal(b.build());
            }
        }
    }

    /**
     * This resource allows for the definition of various types of plans as a
     * sharable, consumable, and executable artifact. The resource is general
     * enough to support the description of a broad range of clinical
     * artifacts such as clinical decision support rules, order sets and
     * protocols.
     */
    public static class PlanDefinitionParticipant extends FhirObject {
        public static final String RESOURCE_TYPE = "PlanDefinitionParticipant";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public PlanDefinitionParticipant(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The type of participant in the action.
         */
        public String type() {
            return getString(FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The role the participant should play in performing the described
         * action.
         */
        public CodeableConcept role() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_ROLE);
        }

        public static final class Builder extends FhirObject.Builder<PlanDefinitionParticipant, PlanDefinitionParticipant.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final String type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder role(final CodeableConcept role) {
                b.add(FhirPropertyNames.PROPERTY_ROLE, role);
                return this;
            }

            public PlanDefinitionParticipant build() {
                return new PlanDefinitionParticipant(b.build());
            }
        }
    }

    /**
     * This resource allows for the definition of various types of plans as a
     * sharable, consumable, and executable artifact. The resource is general
     * enough to support the description of a broad range of clinical
     * artifacts such as clinical decision support rules, order sets and
     * protocols.
     */
    public static class PlanDefinitionRelatedAction extends FhirObject {
        public static final String RESOURCE_TYPE = "PlanDefinitionRelatedAction";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public PlanDefinitionRelatedAction(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The element id of the related action.
         */
        public String actionId() {
            return getString(FhirPropertyNames.PROPERTY_ACTION_ID);
        }

        /**
         * The relationship of this action to the related action.
         */
        public String relationship() {
            return getString(FhirPropertyNames.PROPERTY_RELATIONSHIP);
        }

        /**
         * A duration or range of durations to apply to the relationship. For
         * example, 30-60 minutes before.
         */
        public Duration offsetDuration() {
            return getObject(Duration.class, FhirPropertyNames.PROPERTY_OFFSET_DURATION);
        }

        /**
         * A duration or range of durations to apply to the relationship. For
         * example, 30-60 minutes before.
         */
        public Range offsetRange() {
            return getObject(Range.class, FhirPropertyNames.PROPERTY_OFFSET_RANGE);
        }

        public static final class Builder extends FhirObject.Builder<PlanDefinitionRelatedAction, PlanDefinitionRelatedAction.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder actionId(final String actionId) {
                b.add(FhirPropertyNames.PROPERTY_ACTION_ID, actionId);
                return this;
            }

            public Builder relationship(final String relationship) {
                b.add(FhirPropertyNames.PROPERTY_RELATIONSHIP, relationship);
                return this;
            }

            public Builder offsetDuration(final Duration offsetDuration) {
                b.add(FhirPropertyNames.PROPERTY_OFFSET_DURATION, offsetDuration);
                return this;
            }

            public Builder offsetRange(final Range offsetRange) {
                b.add(FhirPropertyNames.PROPERTY_OFFSET_RANGE, offsetRange);
                return this;
            }

            public PlanDefinitionRelatedAction build() {
                return new PlanDefinitionRelatedAction(b.build());
            }
        }
    }

    /**
     * This resource allows for the definition of various types of plans as a
     * sharable, consumable, and executable artifact. The resource is general
     * enough to support the description of a broad range of clinical
     * artifacts such as clinical decision support rules, order sets and
     * protocols.
     */
    public static class PlanDefinitionTarget extends FhirObject {
        public static final String RESOURCE_TYPE = "PlanDefinitionTarget";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public PlanDefinitionTarget(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The parameter whose value is to be tracked, e.g. body weight, blood
         * pressure, or hemoglobin A1c level.
         */
        public CodeableConcept measure() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_MEASURE);
        }

        /**
         * The target value of the measure to be achieved to signify fulfillment
         * of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both
         * values of the range can be specified. When a low value is missing, it
         * indicates that the goal is achieved at any value at or below the high
         * value. Similarly, if the high value is missing, it indicates that the
         * goal is achieved at any value at or above the low value.
         */
        public Quantity detailQuantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_DETAIL_QUANTITY);
        }

        /**
         * The target value of the measure to be achieved to signify fulfillment
         * of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both
         * values of the range can be specified. When a low value is missing, it
         * indicates that the goal is achieved at any value at or below the high
         * value. Similarly, if the high value is missing, it indicates that the
         * goal is achieved at any value at or above the low value.
         */
        public Range detailRange() {
            return getObject(Range.class, FhirPropertyNames.PROPERTY_DETAIL_RANGE);
        }

        /**
         * The target value of the measure to be achieved to signify fulfillment
         * of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both
         * values of the range can be specified. When a low value is missing, it
         * indicates that the goal is achieved at any value at or below the high
         * value. Similarly, if the high value is missing, it indicates that the
         * goal is achieved at any value at or above the low value.
         */
        public CodeableConcept detailCodeableConcept() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_DETAIL_CODEABLE_CONCEPT);
        }

        /**
         * Indicates the timeframe after the start of the goal in which the goal
         * should be met.
         */
        public Duration due() {
            return getObject(Duration.class, FhirPropertyNames.PROPERTY_DUE);
        }

        public static final class Builder extends FhirObject.Builder<PlanDefinitionTarget, PlanDefinitionTarget.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder measure(final CodeableConcept measure) {
                b.add(FhirPropertyNames.PROPERTY_MEASURE, measure);
                return this;
            }

            public Builder detailQuantity(final Quantity detailQuantity) {
                b.add(FhirPropertyNames.PROPERTY_DETAIL_QUANTITY, detailQuantity);
                return this;
            }

            public Builder detailRange(final Range detailRange) {
                b.add(FhirPropertyNames.PROPERTY_DETAIL_RANGE, detailRange);
                return this;
            }

            public Builder detailCodeableConcept(final CodeableConcept detailCodeableConcept) {
                b.add(FhirPropertyNames.PROPERTY_DETAIL_CODEABLE_CONCEPT, detailCodeableConcept);
                return this;
            }

            public Builder due(final Duration due) {
                b.add(FhirPropertyNames.PROPERTY_DUE, due);
                return this;
            }

            public PlanDefinitionTarget build() {
                return new PlanDefinitionTarget(b.build());
            }
        }
    }
}
