/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * An address expressed using postal conventions (as opposed to GPS or
 * other location definition formats).  This data type may be used to
 * convey addresses for use in delivering mail as well as for visiting
 * locations which might not be valid for mail delivery.  There are a
 * variety of postal address formats defined around the world.
 */
public class Address extends FhirObject {
    public static final String RESOURCE_TYPE = "Address";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Address(final JsonObject data) {
        super(data);
    }

    /**
     * Unique id for the element within a resource (for internal references).
     * This may be any string value that does not contain spaces.
     */
    public String id() {
        return getString(FhirPropertyNames.PROPERTY_ID);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the element. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
    }

    /**
     * The purpose of this address.
     */
    public String use() {
        return getString(FhirPropertyNames.PROPERTY_USE);
    }

    /**
     * Distinguishes between physical addresses (those you can visit) and
     * mailing addresses (e.g. PO Boxes and care-of addresses). Most
     * addresses are both.
     */
    public String type() {
        return getString(FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * Specifies the entire address as it should be displayed e.g. on a
     * postal label. This may be provided instead of or as well as the
     * specific parts.
     */
    public String text() {
        return getString(FhirPropertyNames.PROPERTY_TEXT);
    }

    /**
     * This component contains the house number, apartment number, street
     * name, street direction,  P.O. Box number, delivery hints, and similar
     * address information.
     */
    public java.util.List<String> line() {
        return getList(String.class, FhirPropertyNames.PROPERTY_LINE);
    }

    /**
     * The name of the city, town, suburb, village or other community or
     * delivery center.
     */
    public String city() {
        return getString(FhirPropertyNames.PROPERTY_CITY);
    }

    /**
     * The name of the administrative area (county).
     */
    public String district() {
        return getString(FhirPropertyNames.PROPERTY_DISTRICT);
    }

    /**
     * Sub-unit of a country with limited sovereignty in a federally
     * organized country. A code may be used if codes are in common use (e.g.
     * US 2 letter state codes).
     */
    public String state() {
        return getString(FhirPropertyNames.PROPERTY_STATE);
    }

    /**
     * A postal code designating a region defined by the postal service.
     */
    public String postalCode() {
        return getString(FhirPropertyNames.PROPERTY_POSTAL_CODE);
    }

    /**
     * Country - a nation as commonly understood or generally accepted.
     */
    public String country() {
        return getString(FhirPropertyNames.PROPERTY_COUNTRY);
    }

    /**
     * Time period when address was/is in use.
     */
    public Period period() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_PERIOD);
    }

    public static final class Builder extends FhirObject.Builder<Address, Address.Builder> {

        private Builder() {
            super();
        }

        private Builder(final JsonObject data) {
            super(data);
        }

        public Builder id(final String id) {
            b.add(FhirPropertyNames.PROPERTY_ID, id);
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder use(final String use) {
            b.add(FhirPropertyNames.PROPERTY_USE, use);
            return this;
        }

        public Builder type(final String type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, type);
            return this;
        }

        public Builder text(final String text) {
            b.add(FhirPropertyNames.PROPERTY_TEXT, text);
            return this;
        }

        public Builder line(final java.util.List<String> line) {
            b.add(FhirPropertyNames.PROPERTY_LINE, FhirObject.toStringArray(line));
            return this;
        }

        public Builder city(final String city) {
            b.add(FhirPropertyNames.PROPERTY_CITY, city);
            return this;
        }

        public Builder district(final String district) {
            b.add(FhirPropertyNames.PROPERTY_DISTRICT, district);
            return this;
        }

        public Builder state(final String state) {
            b.add(FhirPropertyNames.PROPERTY_STATE, state);
            return this;
        }

        public Builder postalCode(final String postalCode) {
            b.add(FhirPropertyNames.PROPERTY_POSTAL_CODE, postalCode);
            return this;
        }

        public Builder country(final String country) {
            b.add(FhirPropertyNames.PROPERTY_COUNTRY, country);
            return this;
        }

        public Builder period(final Period period) {
            b.add(FhirPropertyNames.PROPERTY_PERIOD, period);
            return this;
        }

        public Address build() {
            return new Address(b.build());
        }
    }
}
