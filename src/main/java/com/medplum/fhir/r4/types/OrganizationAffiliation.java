/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Defines an affiliation/assotiation/relationship between 2 distinct
 * oganizations, that is not a part-of relationship/sub-division
 * relationship.
 */
public class OrganizationAffiliation extends DomainResource {
    public static final String RESOURCE_TYPE = "OrganizationAffiliation";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public OrganizationAffiliation(final JsonObject data) {
        super(data);
    }

    /**
     * Business identifiers that are specific to this role.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * Whether this organization affiliation record is in active use.
     */
    public Boolean active() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_ACTIVE);
    }

    /**
     * The period during which the participatingOrganization is affiliated
     * with the primary organization.
     */
    public Period period() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_PERIOD);
    }

    /**
     * Organization where the role is available (primary organization/has
     * members).
     */
    public Reference organization() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ORGANIZATION);
    }

    /**
     * The Participating Organization provides/performs the role(s) defined
     * by the code to the Primary Organization (e.g. providing services or is
     * a member of).
     */
    public Reference participatingOrganization() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_PARTICIPATING_ORGANIZATION);
    }

    /**
     * Health insurance provider network in which the
     * participatingOrganization provides the role's services (if defined) at
     * the indicated locations (if defined).
     */
    public java.util.List<Reference> network() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_NETWORK);
    }

    /**
     * Definition of the role the participatingOrganization plays in the
     * association.
     */
    public java.util.List<CodeableConcept> code() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
    }

    /**
     * Specific specialty of the participatingOrganization in the context of
     * the role.
     */
    public java.util.List<CodeableConcept> specialty() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_SPECIALTY);
    }

    /**
     * The location(s) at which the role occurs.
     */
    public java.util.List<Reference> location() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_LOCATION);
    }

    /**
     * Healthcare services provided through the role.
     */
    public java.util.List<Reference> healthcareService() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_HEALTHCARE_SERVICE);
    }

    /**
     * Contact details at the participatingOrganization relevant to this
     * Affiliation.
     */
    public java.util.List<ContactPoint> telecom() {
        return getList(ContactPoint.class, FhirPropertyNames.PROPERTY_TELECOM);
    }

    /**
     * Technical endpoints providing access to services operated for this
     * role.
     */
    public java.util.List<Reference> endpoint() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_ENDPOINT);
    }

    public static final class Builder extends DomainResource.Builder<OrganizationAffiliation, OrganizationAffiliation.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder active(final Boolean active) {
            b.add(FhirPropertyNames.PROPERTY_ACTIVE, active);
            return this;
        }

        public Builder period(final Period period) {
            b.add(FhirPropertyNames.PROPERTY_PERIOD, period);
            return this;
        }

        public Builder organization(final Reference organization) {
            b.add(FhirPropertyNames.PROPERTY_ORGANIZATION, organization);
            return this;
        }

        public Builder participatingOrganization(final Reference participatingOrganization) {
            b.add(FhirPropertyNames.PROPERTY_PARTICIPATING_ORGANIZATION, participatingOrganization);
            return this;
        }

        public Builder network(final java.util.List<Reference> network) {
            b.add(FhirPropertyNames.PROPERTY_NETWORK, FhirObject.toArray(network));
            return this;
        }

        public Builder code(final java.util.List<CodeableConcept> code) {
            b.add(FhirPropertyNames.PROPERTY_CODE, FhirObject.toArray(code));
            return this;
        }

        public Builder specialty(final java.util.List<CodeableConcept> specialty) {
            b.add(FhirPropertyNames.PROPERTY_SPECIALTY, FhirObject.toArray(specialty));
            return this;
        }

        public Builder location(final java.util.List<Reference> location) {
            b.add(FhirPropertyNames.PROPERTY_LOCATION, FhirObject.toArray(location));
            return this;
        }

        public Builder healthcareService(final java.util.List<Reference> healthcareService) {
            b.add(FhirPropertyNames.PROPERTY_HEALTHCARE_SERVICE, FhirObject.toArray(healthcareService));
            return this;
        }

        public Builder telecom(final java.util.List<ContactPoint> telecom) {
            b.add(FhirPropertyNames.PROPERTY_TELECOM, FhirObject.toArray(telecom));
            return this;
        }

        public Builder endpoint(final java.util.List<Reference> endpoint) {
            b.add(FhirPropertyNames.PROPERTY_ENDPOINT, FhirObject.toArray(endpoint));
            return this;
        }

        public OrganizationAffiliation build() {
            return new OrganizationAffiliation(b.build());
        }
    }
}
