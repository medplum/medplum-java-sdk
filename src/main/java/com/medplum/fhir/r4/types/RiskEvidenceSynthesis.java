/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * The RiskEvidenceSynthesis resource describes the likelihood of an
 * outcome in a population plus exposure state where the risk estimate is
 * derived from a combination of research studies.
 */
public class RiskEvidenceSynthesis extends DomainResource {
    public static final String RESOURCE_TYPE = "RiskEvidenceSynthesis";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public RiskEvidenceSynthesis(final JsonObject data) {
        super(data);
    }

    /**
     * An absolute URI that is used to identify this risk evidence synthesis
     * when it is referenced in a specification, model, design or an
     * instance; also called its canonical identifier. This SHOULD be
     * globally unique and SHOULD be a literal address at which at which an
     * authoritative instance of this risk evidence synthesis is (or will be)
     * published. This URL can be the target of a canonical reference. It
     * SHALL remain the same when the risk evidence synthesis is stored on
     * different servers.
     */
    public java.net.URI url() {
        return getUri(FhirPropertyNames.PROPERTY_URL);
    }

    /**
     * A formal identifier that is used to identify this risk evidence
     * synthesis when it is represented in other formats, or referenced in a
     * specification, model, design or an instance.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The identifier that is used to identify this version of the risk
     * evidence synthesis when it is referenced in a specification, model,
     * design or instance. This is an arbitrary value managed by the risk
     * evidence synthesis author and is not expected to be globally unique.
     * For example, it might be a timestamp (e.g. yyyymmdd) if a managed
     * version is not available. There is also no expectation that versions
     * can be placed in a lexicographical sequence.
     */
    public String version() {
        return getString(FhirPropertyNames.PROPERTY_VERSION);
    }

    /**
     * A natural language name identifying the risk evidence synthesis. This
     * name should be usable as an identifier for the module by machine
     * processing applications such as code generation.
     */
    public String name() {
        return getString(FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * A short, descriptive, user-friendly title for the risk evidence
     * synthesis.
     */
    public String title() {
        return getString(FhirPropertyNames.PROPERTY_TITLE);
    }

    /**
     * The status of this risk evidence synthesis. Enables tracking the
     * life-cycle of the content.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * The date  (and optionally time) when the risk evidence synthesis was
     * published. The date must change when the business version changes and
     * it must change if the status code changes. In addition, it should
     * change when the substantive content of the risk evidence synthesis
     * changes.
     */
    public java.time.Instant date() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE);
    }

    /**
     * The name of the organization or individual that published the risk
     * evidence synthesis.
     */
    public String publisher() {
        return getString(FhirPropertyNames.PROPERTY_PUBLISHER);
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_CONTACT);
    }

    /**
     * A free text natural language description of the risk evidence
     * synthesis from a consumer's perspective.
     */
    public String description() {
        return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
    }

    /**
     * A human-readable string to clarify or explain concepts about the
     * resource.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs
     * (insurance plans, studies, ...) and may be used to assist with
     * indexing and searching for appropriate risk evidence synthesis
     * instances.
     */
    public java.util.List<UsageContext> useContext() {
        return getList(UsageContext.class, FhirPropertyNames.PROPERTY_USE_CONTEXT);
    }

    /**
     * A legal or geographic region in which the risk evidence synthesis is
     * intended to be used.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_JURISDICTION);
    }

    /**
     * A copyright statement relating to the risk evidence synthesis and/or
     * its contents. Copyright statements are generally legal restrictions on
     * the use and publishing of the risk evidence synthesis.
     */
    public String copyright() {
        return getString(FhirPropertyNames.PROPERTY_COPYRIGHT);
    }

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for
     * usage.
     */
    public java.time.LocalDate approvalDate() {
        return getLocalDate(FhirPropertyNames.PROPERTY_APPROVAL_DATE);
    }

    /**
     * The date on which the resource content was last reviewed. Review
     * happens periodically after approval but does not change the original
     * approval date.
     */
    public java.time.LocalDate lastReviewDate() {
        return getLocalDate(FhirPropertyNames.PROPERTY_LAST_REVIEW_DATE);
    }

    /**
     * The period during which the risk evidence synthesis content was or is
     * planned to be in active use.
     */
    public Period effectivePeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD);
    }

    /**
     * Descriptive topics related to the content of the
     * RiskEvidenceSynthesis. Topics provide a high-level categorization
     * grouping types of EffectEvidenceSynthesiss that can be useful for
     * filtering and searching.
     */
    public java.util.List<CodeableConcept> topic() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_TOPIC);
    }

    /**
     * An individiual or organization primarily involved in the creation and
     * maintenance of the content.
     */
    public java.util.List<ContactDetail> author() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_AUTHOR);
    }

    /**
     * An individual or organization primarily responsible for internal
     * coherence of the content.
     */
    public java.util.List<ContactDetail> editor() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_EDITOR);
    }

    /**
     * An individual or organization primarily responsible for review of some
     * aspect of the content.
     */
    public java.util.List<ContactDetail> reviewer() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_REVIEWER);
    }

    /**
     * An individual or organization responsible for officially endorsing the
     * content for use in some setting.
     */
    public java.util.List<ContactDetail> endorser() {
        return getList(ContactDetail.class, FhirPropertyNames.PROPERTY_ENDORSER);
    }

    /**
     * Related artifacts such as additional documentation, justification, or
     * bibliographic references.
     */
    public java.util.List<RelatedArtifact> relatedArtifact() {
        return getList(RelatedArtifact.class, FhirPropertyNames.PROPERTY_RELATED_ARTIFACT);
    }

    /**
     * Type of synthesis eg meta-analysis.
     */
    public CodeableConcept synthesisType() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_SYNTHESIS_TYPE);
    }

    /**
     * Type of study eg randomized trial.
     */
    public CodeableConcept studyType() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_STUDY_TYPE);
    }

    /**
     * A reference to a EvidenceVariable resource that defines the population
     * for the research.
     */
    public Reference population() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_POPULATION);
    }

    /**
     * A reference to a EvidenceVariable resource that defines the exposure
     * for the research.
     */
    public Reference exposure() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_EXPOSURE);
    }

    /**
     * A reference to a EvidenceVariable resomece that defines the outcome
     * for the research.
     */
    public Reference outcome() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_OUTCOME);
    }

    /**
     * A description of the size of the sample involved in the synthesis.
     */
    public RiskEvidenceSynthesisSampleSize sampleSize() {
        return getObject(RiskEvidenceSynthesisSampleSize.class, FhirPropertyNames.PROPERTY_SAMPLE_SIZE);
    }

    /**
     * The estimated risk of the outcome.
     */
    public RiskEvidenceSynthesisRiskEstimate riskEstimate() {
        return getObject(RiskEvidenceSynthesisRiskEstimate.class, FhirPropertyNames.PROPERTY_RISK_ESTIMATE);
    }

    /**
     * A description of the certainty of the risk estimate.
     */
    public java.util.List<RiskEvidenceSynthesisCertainty> certainty() {
        return getList(RiskEvidenceSynthesisCertainty.class, FhirPropertyNames.PROPERTY_CERTAINTY);
    }

    public static final class Builder extends DomainResource.Builder<RiskEvidenceSynthesis, RiskEvidenceSynthesis.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder url(final java.net.URI url) {
            b.add(FhirPropertyNames.PROPERTY_URL, url.toString());
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder version(final String version) {
            b.add(FhirPropertyNames.PROPERTY_VERSION, version);
            return this;
        }

        public Builder name(final String name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, name);
            return this;
        }

        public Builder title(final String title) {
            b.add(FhirPropertyNames.PROPERTY_TITLE, title);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(FhirPropertyNames.PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder publisher(final String publisher) {
            b.add(FhirPropertyNames.PROPERTY_PUBLISHER, publisher);
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(FhirPropertyNames.PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder description(final String description) {
            b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder useContext(final java.util.List<UsageContext> useContext) {
            b.add(FhirPropertyNames.PROPERTY_USE_CONTEXT, FhirObject.toArray(useContext));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(FhirPropertyNames.PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder copyright(final String copyright) {
            b.add(FhirPropertyNames.PROPERTY_COPYRIGHT, copyright);
            return this;
        }

        public Builder approvalDate(final java.time.LocalDate approvalDate) {
            b.add(FhirPropertyNames.PROPERTY_APPROVAL_DATE, approvalDate.toString());
            return this;
        }

        public Builder lastReviewDate(final java.time.LocalDate lastReviewDate) {
            b.add(FhirPropertyNames.PROPERTY_LAST_REVIEW_DATE, lastReviewDate.toString());
            return this;
        }

        public Builder effectivePeriod(final Period effectivePeriod) {
            b.add(FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD, effectivePeriod);
            return this;
        }

        public Builder topic(final java.util.List<CodeableConcept> topic) {
            b.add(FhirPropertyNames.PROPERTY_TOPIC, FhirObject.toArray(topic));
            return this;
        }

        public Builder author(final java.util.List<ContactDetail> author) {
            b.add(FhirPropertyNames.PROPERTY_AUTHOR, FhirObject.toArray(author));
            return this;
        }

        public Builder editor(final java.util.List<ContactDetail> editor) {
            b.add(FhirPropertyNames.PROPERTY_EDITOR, FhirObject.toArray(editor));
            return this;
        }

        public Builder reviewer(final java.util.List<ContactDetail> reviewer) {
            b.add(FhirPropertyNames.PROPERTY_REVIEWER, FhirObject.toArray(reviewer));
            return this;
        }

        public Builder endorser(final java.util.List<ContactDetail> endorser) {
            b.add(FhirPropertyNames.PROPERTY_ENDORSER, FhirObject.toArray(endorser));
            return this;
        }

        public Builder relatedArtifact(final java.util.List<RelatedArtifact> relatedArtifact) {
            b.add(FhirPropertyNames.PROPERTY_RELATED_ARTIFACT, FhirObject.toArray(relatedArtifact));
            return this;
        }

        public Builder synthesisType(final CodeableConcept synthesisType) {
            b.add(FhirPropertyNames.PROPERTY_SYNTHESIS_TYPE, synthesisType);
            return this;
        }

        public Builder studyType(final CodeableConcept studyType) {
            b.add(FhirPropertyNames.PROPERTY_STUDY_TYPE, studyType);
            return this;
        }

        public Builder population(final Reference population) {
            b.add(FhirPropertyNames.PROPERTY_POPULATION, population);
            return this;
        }

        public Builder exposure(final Reference exposure) {
            b.add(FhirPropertyNames.PROPERTY_EXPOSURE, exposure);
            return this;
        }

        public Builder outcome(final Reference outcome) {
            b.add(FhirPropertyNames.PROPERTY_OUTCOME, outcome);
            return this;
        }

        public Builder sampleSize(final RiskEvidenceSynthesisSampleSize sampleSize) {
            b.add(FhirPropertyNames.PROPERTY_SAMPLE_SIZE, sampleSize);
            return this;
        }

        public Builder riskEstimate(final RiskEvidenceSynthesisRiskEstimate riskEstimate) {
            b.add(FhirPropertyNames.PROPERTY_RISK_ESTIMATE, riskEstimate);
            return this;
        }

        public Builder certainty(final java.util.List<RiskEvidenceSynthesisCertainty> certainty) {
            b.add(FhirPropertyNames.PROPERTY_CERTAINTY, FhirObject.toArray(certainty));
            return this;
        }

        public RiskEvidenceSynthesis build() {
            return new RiskEvidenceSynthesis(b.build());
        }
    }

    /**
     * The RiskEvidenceSynthesis resource describes the likelihood of an
     * outcome in a population plus exposure state where the risk estimate is
     * derived from a combination of research studies.
     */
    public static class RiskEvidenceSynthesisCertainty extends FhirObject {
        public static final String RESOURCE_TYPE = "RiskEvidenceSynthesisCertainty";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public RiskEvidenceSynthesisCertainty(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A rating of the certainty of the effect estimate.
         */
        public java.util.List<CodeableConcept> rating() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_RATING);
        }

        /**
         * A human-readable string to clarify or explain concepts about the
         * resource.
         */
        public java.util.List<Annotation> note() {
            return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
        }

        /**
         * A description of a component of the overall certainty.
         */
        public java.util.List<RiskEvidenceSynthesisCertaintySubcomponent> certaintySubcomponent() {
            return getList(RiskEvidenceSynthesisCertaintySubcomponent.class, FhirPropertyNames.PROPERTY_CERTAINTY_SUBCOMPONENT);
        }

        public static final class Builder extends FhirObject.Builder<RiskEvidenceSynthesisCertainty, RiskEvidenceSynthesisCertainty.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder rating(final java.util.List<CodeableConcept> rating) {
                b.add(FhirPropertyNames.PROPERTY_RATING, FhirObject.toArray(rating));
                return this;
            }

            public Builder note(final java.util.List<Annotation> note) {
                b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
                return this;
            }

            public Builder certaintySubcomponent(final java.util.List<RiskEvidenceSynthesisCertaintySubcomponent> certaintySubcomponent) {
                b.add(FhirPropertyNames.PROPERTY_CERTAINTY_SUBCOMPONENT, FhirObject.toArray(certaintySubcomponent));
                return this;
            }

            public RiskEvidenceSynthesisCertainty build() {
                return new RiskEvidenceSynthesisCertainty(b.build());
            }
        }
    }

    /**
     * The RiskEvidenceSynthesis resource describes the likelihood of an
     * outcome in a population plus exposure state where the risk estimate is
     * derived from a combination of research studies.
     */
    public static class RiskEvidenceSynthesisCertaintySubcomponent extends FhirObject {
        public static final String RESOURCE_TYPE = "RiskEvidenceSynthesisCertaintySubcomponent";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public RiskEvidenceSynthesisCertaintySubcomponent(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Type of subcomponent of certainty rating.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * A rating of a subcomponent of rating certainty.
         */
        public java.util.List<CodeableConcept> rating() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_RATING);
        }

        /**
         * A human-readable string to clarify or explain concepts about the
         * resource.
         */
        public java.util.List<Annotation> note() {
            return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
        }

        public static final class Builder extends FhirObject.Builder<RiskEvidenceSynthesisCertaintySubcomponent,
                RiskEvidenceSynthesisCertaintySubcomponent.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder rating(final java.util.List<CodeableConcept> rating) {
                b.add(FhirPropertyNames.PROPERTY_RATING, FhirObject.toArray(rating));
                return this;
            }

            public Builder note(final java.util.List<Annotation> note) {
                b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
                return this;
            }

            public RiskEvidenceSynthesisCertaintySubcomponent build() {
                return new RiskEvidenceSynthesisCertaintySubcomponent(b.build());
            }
        }
    }

    /**
     * The RiskEvidenceSynthesis resource describes the likelihood of an
     * outcome in a population plus exposure state where the risk estimate is
     * derived from a combination of research studies.
     */
    public static class RiskEvidenceSynthesisPrecisionEstimate extends FhirObject {
        public static final String RESOURCE_TYPE = "RiskEvidenceSynthesisPrecisionEstimate";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public RiskEvidenceSynthesisPrecisionEstimate(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Examples include confidence interval and interquartile range.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Use 95 for a 95% confidence interval.
         */
        public Double level() {
            return data.getJsonNumber(FhirPropertyNames.PROPERTY_LEVEL).doubleValue();
        }

        /**
         * Lower bound of confidence interval.
         */
        public Double from() {
            return data.getJsonNumber(FhirPropertyNames.PROPERTY_FROM).doubleValue();
        }

        /**
         * Upper bound of confidence interval.
         */
        public Double to() {
            return data.getJsonNumber(FhirPropertyNames.PROPERTY_TO).doubleValue();
        }

        public static final class Builder extends FhirObject.Builder<RiskEvidenceSynthesisPrecisionEstimate, RiskEvidenceSynthesisPrecisionEstimate.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder level(final Double level) {
                b.add(FhirPropertyNames.PROPERTY_LEVEL, level);
                return this;
            }

            public Builder from(final Double from) {
                b.add(FhirPropertyNames.PROPERTY_FROM, from);
                return this;
            }

            public Builder to(final Double to) {
                b.add(FhirPropertyNames.PROPERTY_TO, to);
                return this;
            }

            public RiskEvidenceSynthesisPrecisionEstimate build() {
                return new RiskEvidenceSynthesisPrecisionEstimate(b.build());
            }
        }
    }

    /**
     * The RiskEvidenceSynthesis resource describes the likelihood of an
     * outcome in a population plus exposure state where the risk estimate is
     * derived from a combination of research studies.
     */
    public static class RiskEvidenceSynthesisRiskEstimate extends FhirObject {
        public static final String RESOURCE_TYPE = "RiskEvidenceSynthesisRiskEstimate";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public RiskEvidenceSynthesisRiskEstimate(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Human-readable summary of risk estimate.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * Examples include proportion and mean.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The point estimate of the risk estimate.
         */
        public Double value() {
            return data.getJsonNumber(FhirPropertyNames.PROPERTY_VALUE).doubleValue();
        }

        /**
         * Specifies the UCUM unit for the outcome.
         */
        public CodeableConcept unitOfMeasure() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_UNIT_OF_MEASURE);
        }

        /**
         * The sample size for the group that was measured for this risk
         * estimate.
         */
        public Integer denominatorCount() {
            return data.getInt(FhirPropertyNames.PROPERTY_DENOMINATOR_COUNT);
        }

        /**
         * The number of group members with the outcome of interest.
         */
        public Integer numeratorCount() {
            return data.getInt(FhirPropertyNames.PROPERTY_NUMERATOR_COUNT);
        }

        /**
         * A description of the precision of the estimate for the effect.
         */
        public java.util.List<RiskEvidenceSynthesisPrecisionEstimate> precisionEstimate() {
            return getList(RiskEvidenceSynthesisPrecisionEstimate.class, FhirPropertyNames.PROPERTY_PRECISION_ESTIMATE);
        }

        public static final class Builder extends FhirObject.Builder<RiskEvidenceSynthesisRiskEstimate, RiskEvidenceSynthesisRiskEstimate.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder value(final Double value) {
                b.add(FhirPropertyNames.PROPERTY_VALUE, value);
                return this;
            }

            public Builder unitOfMeasure(final CodeableConcept unitOfMeasure) {
                b.add(FhirPropertyNames.PROPERTY_UNIT_OF_MEASURE, unitOfMeasure);
                return this;
            }

            public Builder denominatorCount(final Integer denominatorCount) {
                b.add(FhirPropertyNames.PROPERTY_DENOMINATOR_COUNT, denominatorCount);
                return this;
            }

            public Builder numeratorCount(final Integer numeratorCount) {
                b.add(FhirPropertyNames.PROPERTY_NUMERATOR_COUNT, numeratorCount);
                return this;
            }

            public Builder precisionEstimate(final java.util.List<RiskEvidenceSynthesisPrecisionEstimate> precisionEstimate) {
                b.add(FhirPropertyNames.PROPERTY_PRECISION_ESTIMATE, FhirObject.toArray(precisionEstimate));
                return this;
            }

            public RiskEvidenceSynthesisRiskEstimate build() {
                return new RiskEvidenceSynthesisRiskEstimate(b.build());
            }
        }
    }

    /**
     * The RiskEvidenceSynthesis resource describes the likelihood of an
     * outcome in a population plus exposure state where the risk estimate is
     * derived from a combination of research studies.
     */
    public static class RiskEvidenceSynthesisSampleSize extends FhirObject {
        public static final String RESOURCE_TYPE = "RiskEvidenceSynthesisSampleSize";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public RiskEvidenceSynthesisSampleSize(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Human-readable summary of sample size.
         */
        public String description() {
            return getString(FhirPropertyNames.PROPERTY_DESCRIPTION);
        }

        /**
         * Number of studies included in this evidence synthesis.
         */
        public Integer numberOfStudies() {
            return data.getInt(FhirPropertyNames.PROPERTY_NUMBER_OF_STUDIES);
        }

        /**
         * Number of participants included in this evidence synthesis.
         */
        public Integer numberOfParticipants() {
            return data.getInt(FhirPropertyNames.PROPERTY_NUMBER_OF_PARTICIPANTS);
        }

        public static final class Builder extends FhirObject.Builder<RiskEvidenceSynthesisSampleSize, RiskEvidenceSynthesisSampleSize.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder description(final String description) {
                b.add(FhirPropertyNames.PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder numberOfStudies(final Integer numberOfStudies) {
                b.add(FhirPropertyNames.PROPERTY_NUMBER_OF_STUDIES, numberOfStudies);
                return this;
            }

            public Builder numberOfParticipants(final Integer numberOfParticipants) {
                b.add(FhirPropertyNames.PROPERTY_NUMBER_OF_PARTICIPANTS, numberOfParticipants);
                return this;
            }

            public RiskEvidenceSynthesisSampleSize build() {
                return new RiskEvidenceSynthesisSampleSize(b.build());
            }
        }
    }
}
