/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Todo.
 */
public class SubstancePolymer extends DomainResource {
    public static final String RESOURCE_TYPE = "SubstancePolymer";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public SubstancePolymer(final JsonObject data) {
        super(data);
    }

    /**
     * Todo.
     */
    public CodeableConcept classValue() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CLASS);
    }

    /**
     * Todo.
     */
    public CodeableConcept geometry() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_GEOMETRY);
    }

    /**
     * Todo.
     */
    public java.util.List<CodeableConcept> copolymerConnectivity() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_COPOLYMER_CONNECTIVITY);
    }

    /**
     * Todo.
     */
    public java.util.List<String> modification() {
        return getList(String.class, FhirPropertyNames.PROPERTY_MODIFICATION);
    }

    /**
     * Todo.
     */
    public java.util.List<SubstancePolymerMonomerSet> monomerSet() {
        return getList(SubstancePolymerMonomerSet.class, FhirPropertyNames.PROPERTY_MONOMER_SET);
    }

    /**
     * Todo.
     */
    public java.util.List<SubstancePolymerRepeat> repeat() {
        return getList(SubstancePolymerRepeat.class, FhirPropertyNames.PROPERTY_REPEAT);
    }

    public static final class Builder extends DomainResource.Builder<SubstancePolymer, SubstancePolymer.Builder> {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder classValue(final CodeableConcept classValue) {
            b.add(FhirPropertyNames.PROPERTY_CLASS, classValue);
            return this;
        }

        public Builder geometry(final CodeableConcept geometry) {
            b.add(FhirPropertyNames.PROPERTY_GEOMETRY, geometry);
            return this;
        }

        public Builder copolymerConnectivity(final java.util.List<CodeableConcept> copolymerConnectivity) {
            b.add(FhirPropertyNames.PROPERTY_COPOLYMER_CONNECTIVITY, FhirObject.toArray(copolymerConnectivity));
            return this;
        }

        public Builder modification(final java.util.List<String> modification) {
            b.add(FhirPropertyNames.PROPERTY_MODIFICATION, FhirObject.toStringArray(modification));
            return this;
        }

        public Builder monomerSet(final java.util.List<SubstancePolymerMonomerSet> monomerSet) {
            b.add(FhirPropertyNames.PROPERTY_MONOMER_SET, FhirObject.toArray(monomerSet));
            return this;
        }

        public Builder repeat(final java.util.List<SubstancePolymerRepeat> repeat) {
            b.add(FhirPropertyNames.PROPERTY_REPEAT, FhirObject.toArray(repeat));
            return this;
        }

        public SubstancePolymer build() {
            return new SubstancePolymer(b.build());
        }
    }

    /**
     * Todo.
     */
    public static class SubstancePolymerDegreeOfPolymerisation extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstancePolymerDegreeOfPolymerisation";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstancePolymerDegreeOfPolymerisation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Todo.
         */
        public CodeableConcept degree() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_DEGREE);
        }

        /**
         * Todo.
         */
        public SubstanceAmount amount() {
            return getObject(SubstanceAmount.class, FhirPropertyNames.PROPERTY_AMOUNT);
        }

        public static final class Builder extends FhirObject.Builder<SubstancePolymerDegreeOfPolymerisation, SubstancePolymerDegreeOfPolymerisation.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder degree(final CodeableConcept degree) {
                b.add(FhirPropertyNames.PROPERTY_DEGREE, degree);
                return this;
            }

            public Builder amount(final SubstanceAmount amount) {
                b.add(FhirPropertyNames.PROPERTY_AMOUNT, amount);
                return this;
            }

            public SubstancePolymerDegreeOfPolymerisation build() {
                return new SubstancePolymerDegreeOfPolymerisation(b.build());
            }
        }
    }

    /**
     * Todo.
     */
    public static class SubstancePolymerMonomerSet extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstancePolymerMonomerSet";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstancePolymerMonomerSet(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Todo.
         */
        public CodeableConcept ratioType() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_RATIO_TYPE);
        }

        /**
         * Todo.
         */
        public java.util.List<SubstancePolymerStartingMaterial> startingMaterial() {
            return getList(SubstancePolymerStartingMaterial.class, FhirPropertyNames.PROPERTY_STARTING_MATERIAL);
        }

        public static final class Builder extends FhirObject.Builder<SubstancePolymerMonomerSet, SubstancePolymerMonomerSet.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder ratioType(final CodeableConcept ratioType) {
                b.add(FhirPropertyNames.PROPERTY_RATIO_TYPE, ratioType);
                return this;
            }

            public Builder startingMaterial(final java.util.List<SubstancePolymerStartingMaterial> startingMaterial) {
                b.add(FhirPropertyNames.PROPERTY_STARTING_MATERIAL, FhirObject.toArray(startingMaterial));
                return this;
            }

            public SubstancePolymerMonomerSet build() {
                return new SubstancePolymerMonomerSet(b.build());
            }
        }
    }

    /**
     * Todo.
     */
    public static class SubstancePolymerRepeat extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstancePolymerRepeat";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstancePolymerRepeat(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Todo.
         */
        public Integer numberOfUnits() {
            return data.getInt(FhirPropertyNames.PROPERTY_NUMBER_OF_UNITS);
        }

        /**
         * Todo.
         */
        public String averageMolecularFormula() {
            return getString(FhirPropertyNames.PROPERTY_AVERAGE_MOLECULAR_FORMULA);
        }

        /**
         * Todo.
         */
        public CodeableConcept repeatUnitAmountType() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_REPEAT_UNIT_AMOUNT_TYPE);
        }

        /**
         * Todo.
         */
        public java.util.List<SubstancePolymerRepeatUnit> repeatUnit() {
            return getList(SubstancePolymerRepeatUnit.class, FhirPropertyNames.PROPERTY_REPEAT_UNIT);
        }

        public static final class Builder extends FhirObject.Builder<SubstancePolymerRepeat, SubstancePolymerRepeat.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder numberOfUnits(final Integer numberOfUnits) {
                b.add(FhirPropertyNames.PROPERTY_NUMBER_OF_UNITS, numberOfUnits);
                return this;
            }

            public Builder averageMolecularFormula(final String averageMolecularFormula) {
                b.add(FhirPropertyNames.PROPERTY_AVERAGE_MOLECULAR_FORMULA, averageMolecularFormula);
                return this;
            }

            public Builder repeatUnitAmountType(final CodeableConcept repeatUnitAmountType) {
                b.add(FhirPropertyNames.PROPERTY_REPEAT_UNIT_AMOUNT_TYPE, repeatUnitAmountType);
                return this;
            }

            public Builder repeatUnit(final java.util.List<SubstancePolymerRepeatUnit> repeatUnit) {
                b.add(FhirPropertyNames.PROPERTY_REPEAT_UNIT, FhirObject.toArray(repeatUnit));
                return this;
            }

            public SubstancePolymerRepeat build() {
                return new SubstancePolymerRepeat(b.build());
            }
        }
    }

    /**
     * Todo.
     */
    public static class SubstancePolymerRepeatUnit extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstancePolymerRepeatUnit";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstancePolymerRepeatUnit(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Todo.
         */
        public CodeableConcept orientationOfPolymerisation() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_ORIENTATION_OF_POLYMERISATION);
        }

        /**
         * Todo.
         */
        public String repeatUnit() {
            return getString(FhirPropertyNames.PROPERTY_REPEAT_UNIT);
        }

        /**
         * Todo.
         */
        public SubstanceAmount amount() {
            return getObject(SubstanceAmount.class, FhirPropertyNames.PROPERTY_AMOUNT);
        }

        /**
         * Todo.
         */
        public java.util.List<SubstancePolymerDegreeOfPolymerisation> degreeOfPolymerisation() {
            return getList(SubstancePolymerDegreeOfPolymerisation.class, FhirPropertyNames.PROPERTY_DEGREE_OF_POLYMERISATION);
        }

        /**
         * Todo.
         */
        public java.util.List<SubstancePolymerStructuralRepresentation> structuralRepresentation() {
            return getList(SubstancePolymerStructuralRepresentation.class, FhirPropertyNames.PROPERTY_STRUCTURAL_REPRESENTATION);
        }

        public static final class Builder extends FhirObject.Builder<SubstancePolymerRepeatUnit, SubstancePolymerRepeatUnit.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder orientationOfPolymerisation(final CodeableConcept orientationOfPolymerisation) {
                b.add(FhirPropertyNames.PROPERTY_ORIENTATION_OF_POLYMERISATION, orientationOfPolymerisation);
                return this;
            }

            public Builder repeatUnit(final String repeatUnit) {
                b.add(FhirPropertyNames.PROPERTY_REPEAT_UNIT, repeatUnit);
                return this;
            }

            public Builder amount(final SubstanceAmount amount) {
                b.add(FhirPropertyNames.PROPERTY_AMOUNT, amount);
                return this;
            }

            public Builder degreeOfPolymerisation(final java.util.List<SubstancePolymerDegreeOfPolymerisation> degreeOfPolymerisation) {
                b.add(FhirPropertyNames.PROPERTY_DEGREE_OF_POLYMERISATION, FhirObject.toArray(degreeOfPolymerisation));
                return this;
            }

            public Builder structuralRepresentation(final java.util.List<SubstancePolymerStructuralRepresentation> structuralRepresentation) {
                b.add(FhirPropertyNames.PROPERTY_STRUCTURAL_REPRESENTATION, FhirObject.toArray(structuralRepresentation));
                return this;
            }

            public SubstancePolymerRepeatUnit build() {
                return new SubstancePolymerRepeatUnit(b.build());
            }
        }
    }

    /**
     * Todo.
     */
    public static class SubstancePolymerStartingMaterial extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstancePolymerStartingMaterial";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstancePolymerStartingMaterial(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Todo.
         */
        public CodeableConcept material() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_MATERIAL);
        }

        /**
         * Todo.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Todo.
         */
        public Boolean isDefining() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_IS_DEFINING);
        }

        /**
         * Todo.
         */
        public SubstanceAmount amount() {
            return getObject(SubstanceAmount.class, FhirPropertyNames.PROPERTY_AMOUNT);
        }

        public static final class Builder extends FhirObject.Builder<SubstancePolymerStartingMaterial, SubstancePolymerStartingMaterial.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder material(final CodeableConcept material) {
                b.add(FhirPropertyNames.PROPERTY_MATERIAL, material);
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder isDefining(final Boolean isDefining) {
                b.add(FhirPropertyNames.PROPERTY_IS_DEFINING, isDefining);
                return this;
            }

            public Builder amount(final SubstanceAmount amount) {
                b.add(FhirPropertyNames.PROPERTY_AMOUNT, amount);
                return this;
            }

            public SubstancePolymerStartingMaterial build() {
                return new SubstancePolymerStartingMaterial(b.build());
            }
        }
    }

    /**
     * Todo.
     */
    public static class SubstancePolymerStructuralRepresentation extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstancePolymerStructuralRepresentation";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstancePolymerStructuralRepresentation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Todo.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Todo.
         */
        public String representation() {
            return getString(FhirPropertyNames.PROPERTY_REPRESENTATION);
        }

        /**
         * Todo.
         */
        public Attachment attachment() {
            return getObject(Attachment.class, FhirPropertyNames.PROPERTY_ATTACHMENT);
        }

        public static final class Builder extends FhirObject.Builder<SubstancePolymerStructuralRepresentation,
                SubstancePolymerStructuralRepresentation.Builder> {

            private Builder() {
                super();
            }

            private Builder(final JsonObject data) {
                super(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder representation(final String representation) {
                b.add(FhirPropertyNames.PROPERTY_REPRESENTATION, representation);
                return this;
            }

            public Builder attachment(final Attachment attachment) {
                b.add(FhirPropertyNames.PROPERTY_ATTACHMENT, attachment);
                return this;
            }

            public SubstancePolymerStructuralRepresentation build() {
                return new SubstancePolymerStructuralRepresentation(b.build());
            }
        }
    }
}
